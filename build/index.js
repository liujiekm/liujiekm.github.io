webpackJsonp([0],{0:function(e,t,n){e.exports=n(1)},1:function(e,t,n){try{(function(){"use strict";function e(e){return e&&e.__esModule?e:{default:e}}var t=n(2),l=e(t),o=n(33),r=n(179),a=n(234),u=(e(a),n(603)),c=e(u),i=n(609),f=e(i);n(1067),n(1070),n(1072),(0,c.default)(),(0,o.render)(l.default.createElement(f.default,{history:r.browserHistory}),document.getElementById("root"))}).call(this)}finally{}},603:function(e,t,n){var l=n(8),o=n(604),r=!1;e.exports=function(e){e=e||{};var t=e.shouldRejectClick||o;l(!r,"injectTapEventPlugin(): Can only be called once per application lifecycle.\n\n\tIt is recommended to call injectTapEventPlugin() just before you call \tReactDOM.render(). If you are using an external library which calls injectTapEventPlugin() \titself, please contact the maintainer as it shouldn't be called in library code and \tshould be injected by the application."),r=!0,n(43).injection.injectEventPluginsByName({TapEventPlugin:n(605)(t)})}},604:function(e,t){e.exports=function(e,t){if(e&&t-e<750)return!0}},605:function(e,t,n){"use strict";function l(e,t){var n=f.extractSingleTouch(t);return n?n[e.page]:e.page in t?t[e.page]:t[e.client]+d[e.envScroll]}function o(e,t){var n=l(g.x,t),o=l(g.y,t);return Math.pow(Math.pow(n-e.x,2)+Math.pow(o-e.y,2),.5)}function r(e){return{tapMoveThreshold:h,ignoreMouseThreshold:v,eventTypes:T,extractEvents:function(t,n,r,a){if(!s(t)&&!y(t))return null;if(m(t))E=M();else if(e(E,M()))return null;var u=null,f=o(b,r);return y(t)&&f<h&&(u=i.getPooled(T.touchTap,n,r,a)),s(t)?(b.x=l(g.x,r),b.y=l(g.y,r)):y(t)&&(b.x=0,b.y=0),c.accumulateTwoPhaseDispatches(u),u}}}var a=n(606),u=n(45),c=n(42),i=n(76),f=n(607),d=n(77),p=n(608),s=(a.topLevelTypes,u.isStartish),y=u.isEndish,m=function(e){var t=["topTouchCancel","topTouchEnd","topTouchStart","topTouchMove"];return t.indexOf(e)>=0},h=10,v=750,b={x:null,y:null},E=null,g={x:{page:"pageX",client:"clientX",envScroll:"currentPageScrollLeft"},y:{page:"pageY",client:"clientY",envScroll:"currentPageScrollTop"}},_=["topTouchStart","topTouchCancel","topTouchEnd","topTouchMove"],C=["topMouseDown","topMouseMove","topMouseUp"].concat(_),T={touchTap:{phasedRegistrationNames:{bubbled:p({onTouchTap:null}),captured:p({onTouchTapCapture:null})},dependencies:C}},M=function(){return Date.now?Date.now:function(){return+new Date}}();e.exports=r},606:function(e,t){"use strict";var n={topAbort:null,topAnimationEnd:null,topAnimationIteration:null,topAnimationStart:null,topBlur:null,topCanPlay:null,topCanPlayThrough:null,topChange:null,topClick:null,topCompositionEnd:null,topCompositionStart:null,topCompositionUpdate:null,topContextMenu:null,topCopy:null,topCut:null,topDoubleClick:null,topDrag:null,topDragEnd:null,topDragEnter:null,topDragExit:null,topDragLeave:null,topDragOver:null,topDragStart:null,topDrop:null,topDurationChange:null,topEmptied:null,topEncrypted:null,topEnded:null,topError:null,topFocus:null,topInput:null,topInvalid:null,topKeyDown:null,topKeyPress:null,topKeyUp:null,topLoad:null,topLoadedData:null,topLoadedMetadata:null,topLoadStart:null,topMouseDown:null,topMouseMove:null,topMouseOut:null,topMouseOver:null,topMouseUp:null,topPaste:null,topPause:null,topPlay:null,topPlaying:null,topProgress:null,topRateChange:null,topReset:null,topScroll:null,topSeeked:null,topSeeking:null,topSelectionChange:null,topStalled:null,topSubmit:null,topSuspend:null,topTextInput:null,topTimeUpdate:null,topTouchCancel:null,topTouchEnd:null,topTouchMove:null,topTouchStart:null,topTransitionEnd:null,topVolumeChange:null,topWaiting:null,topWheel:null},l={topLevelTypes:n};e.exports=l},607:function(e,t){var n={extractSingleTouch:function(e){var t=e.touches,n=e.changedTouches,l=t&&t.length>0,o=n&&n.length>0;return!l&&o?n[0]:l?t[0]:e}};e.exports=n},608:function(e,t){"use strict";var n=function(e){var t;for(t in e)if(e.hasOwnProperty(t))return t;return null};e.exports=n},609:function(e,t,n){try{(function(){"use strict";function e(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var l in n)Object.prototype.hasOwnProperty.call(n,l)&&(e[l]=n[l])}return e},o=n(2),r=e(o),a=n(179),u=n(610),c=e(u),i=n(639),f=e(i),d=n(1065),p=e(d),s=function(e){return Boolean(e&&e.prototype&&Boolean(e.prototype.isReactComponent))},y=function(e){return s(e)?{component:e}:{getComponent:function(t,n){return e(function(e){return n(null,e.default||e)})}}},m=function(e){var t=e.history;return r.default.createElement(a.Router,{history:t},r.default.createElement(a.Route,{path:"/",component:c.default},r.default.createElement(a.IndexRoute,y(f.default)),r.default.createElement(a.Route,l({path:"Home"},y(f.default))),r.default.createElement(a.Route,l({path:"Config"},y(p.default)))))};m.propTypes={history:o.PropTypes.any},t.default=m}).call(this)}finally{}},610:function(e,t,n){try{(function(){"use strict";function e(e){return e&&e.__esModule?e:{default:e}}function l(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function r(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var l=t[n];l.enumerable=l.enumerable||!1,l.configurable=!0,"value"in l&&(l.writable=!0),Object.defineProperty(e,l.key,l)}}return function(t,n,l){return n&&e(t.prototype,n),l&&e(t,l),t}}(),u=n(2),c=e(u),i=n(490),f=e(i),d=n(611),p=(e(d),n(612)),s=e(p),y=n(495),m=n(491),h=e(m),v=n(414),b=(0,h.default)({palette:{accent1Color:y.deepOrange500,textColor:y.grey500,shadowColor:y.grey50,disabledColor:(0,v.fade)(y.darkBlack,.3),pickerHeaderColor:y.cyan500,clockCircleColor:(0,v.fade)(y.darkBlack,.07),primary1Color:y.cyan500,primary2Color:y.cyan700,primary3Color:y.grey400,accent2Color:y.grey100,accent3Color:y.grey500,alternateTextColor:y.white,canvasColor:y.white,borderColor:y.grey300},menu:{backgroundColor:y.white,containerBackgroundColor:y.white},menuItem:{dataHeight:48,height:52,hoverColor:(0,v.fade)(y.redA200,.035),selectedTextColor:y.redA200,rightIconDesktopFill:y.redA200}}),E=function(e){function t(){return l(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return r(t,e),a(t,[{key:"render",value:function(){return c.default.createElement(f.default,{muiTheme:b},c.default.createElement(s.default,null,this.props.children))}}]),t}(u.Component);t.default=E,E.propTypes={}}).call(this)}finally{}},611:function(e,t,n){"use strict";function l(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(495),r=n(414),a=n(496),u=l(a);t.default={spacing:u.default,fontFamily:"Roboto, sans-serif",palette:{primary1Color:o.cyan700,primary2Color:o.cyan700,primary3Color:o.grey600,accent1Color:o.pinkA200,accent2Color:o.pinkA400,accent3Color:o.pinkA100,textColor:o.fullWhite,secondaryTextColor:(0,r.fade)(o.fullWhite,.7),alternateTextColor:"#303030",canvasColor:"#303030",borderColor:(0,r.fade)(o.fullWhite,.3),disabledColor:(0,r.fade)(o.fullWhite,.3),pickerHeaderColor:(0,r.fade)(o.fullWhite,.12),clockCircleColor:(0,r.fade)(o.fullWhite,.12)}}},612:function(e,t,n){try{(function(){"use strict";function e(e){return e&&e.__esModule?e:{default:e}}function l(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function r(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var l=t[n];l.enumerable=l.enumerable||!1,l.configurable=!0,"value"in l&&(l.writable=!0),Object.defineProperty(e,l.key,l)}}return function(t,n,l){return n&&e(t.prototype,n),l&&e(t,l),t}}(),u=n(2),c=e(u),i=(n(179),n(613)),f=e(i),d=n(631),p=e(d),s=n(471),y=(e(s),n(235)),m=(e(y),n(632)),h=(e(m),n(638)),v=e(h),b=function(e){function t(e){l(this,t);var n=o(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={open:!0},n}return r(t,e),a(t,[{key:"render",value:function(){return c.default.createElement("div",{className:"app-root"},c.default.createElement("div",{className:"top-nav-area"},c.default.createElement(f.default,null)),c.default.createElement("div",{className:"left-nav-area"},c.default.createElement(v.default,null)),c.default.createElement(p.default,null,this.props.children))}}]),t}(u.Component);t.default=b,b.propTypes={}}).call(this)}finally{}},613:function(e,t,n){try{(function(){"use strict";function e(e){return e&&e.__esModule?e:{default:e}}function l(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function r(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var l=t[n];l.enumerable=l.enumerable||!1,l.configurable=!0,"value"in l&&(l.writable=!0),Object.defineProperty(e,l.key,l)}}return function(t,n,l){return n&&e(t.prototype,n),l&&e(t,l),t}}(),u=n(2),c=e(u),i=(n(179),n(420)),f=e(i),d=n(490),p=(e(d),n(484)),s=(e(p),n(333)),y=e(s),m=n(366),h=(e(m),n(416)),v=(e(h),n(405)),b=(e(v),n(473)),E=(e(b),n(544)),g=(e(E),n(598)),_=n(614),C=(e(_),n(422)),T=e(C),M=n(453),O=e(M),x=n(615),w=e(x),P=n(616),j=e(P),S=n(617),I=e(S),k=n(386),N=e(k),z=n(495);n(618);var D=n(627),H=e(D),R={errorStyle:{color:z.orange500},underlineStyle:{borderColor:z.orange500},floatingLabelStyle:{color:z.orange500},floatingLabelFocusStyle:{color:z.blue500}},L=function(e){function t(e){l(this,t);var n=o(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={value:3},n}return r(t,e),a(t,[{key:"render",value:function(){return c.default.createElement(g.Toolbar,{style:{backgroundColor:"white"}},c.default.createElement(g.ToolbarGroup,{firstChild:!0},c.default.createElement(O.default,{label:"Scruman Hub",href:"#",secondary:!0,icon:c.default.createElement("i",{className:"icon-time icon-2x"})})),c.default.createElement(g.ToolbarGroup,null,c.default.createElement("div",null,c.default.createElement(T.default,{style:{marginTop:"-15px"},badgeContent:c.default.createElement(y.default,{tooltip:"Backup"},c.default.createElement(w.default,null)),badgeStyle:{top:8,right:8}},c.default.createElement(j.default,null)),c.default.createElement(T.default,{style:{marginTop:"-15px"},badgeContent:10,secondary:!0,badgeStyle:{top:24,right:24,width:"20px",height:"20px"}},c.default.createElement(y.default,{tooltip:"Notifications"},c.default.createElement(I.default,null))))),c.default.createElement(g.ToolbarGroup,{lastChild:!0},c.default.createElement(N.default,{style:{marginTop:"-15px",width:"150px"},floatingLabelText:"Search",floatingLabelStyle:R.floatingLabelStyle,floatingLabelFocusStyle:R.floatingLabelFocusStyle}),c.default.createElement(f.default,{src:"/src/content/img/user.jpg",style:{marginTop:"7px"}}),c.default.createElement(H.default,null)))}}]),t}(c.default.Component);t.default=L}).call(this)}finally{}},614:function(e,t,n){"use strict";function l(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(2),r=l(o),a=n(370),u=l(a),c=n(379),i=l(c),f=function(e){return r.default.createElement(i.default,e,r.default.createElement("path",{d:"M10 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2h-8l-2-2z"}))};f=(0,u.default)(f),f.displayName="FileFolder",f.muiName="SvgIcon",t.default=f},615:function(e,t,n){"use strict";function l(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(2),r=l(o),a=n(370),u=l(a),c=n(379),i=l(c),f=function(e){return r.default.createElement(i.default,e,r.default.createElement("path",{d:"M19.35 10.04C18.67 6.59 15.64 4 12 4 9.11 4 6.6 5.64 5.35 8.04 2.34 8.36 0 10.91 0 14c0 3.31 2.69 6 6 6h13c2.76 0 5-2.24 5-5 0-2.64-2.05-4.78-4.65-4.96zM14 13v4h-4v-4H7l5-5 5 5h-3z"}))};f=(0,u.default)(f),f.displayName="FileCloudUpload",f.muiName="SvgIcon",t.default=f},616:function(e,t,n){"use strict";function l(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(2),r=l(o),a=n(370),u=l(a),c=n(379),i=l(c),f=function(e){return r.default.createElement(i.default,e,r.default.createElement("path",{d:"M20 6h-8l-2-2H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2zm0 12H4V8h16v10z"}))};f=(0,u.default)(f),f.displayName="FileFolderOpen",f.muiName="SvgIcon",t.default=f},617:function(e,t,n){"use strict";function l(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(2),r=l(o),a=n(370),u=l(a),c=n(379),i=l(c),f=function(e){return r.default.createElement(i.default,e,r.default.createElement("path",{d:"M12 22c1.1 0 2-.9 2-2h-4c0 1.1.89 2 2 2zm6-6v-5c0-3.07-1.64-5.64-4.5-6.32V4c0-.83-.67-1.5-1.5-1.5s-1.5.67-1.5 1.5v.68C7.63 5.36 6 7.92 6 11v5l-2 2v1h16v-1l-2-2z"}))};f=(0,u.default)(f),f.displayName="SocialNotifications",f.muiName="SvgIcon",t.default=f},618:function(e,t){},627:function(e,t,n){try{(function(){"use strict";function e(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var l=n(2),o=e(l),r=n(484),a=e(r),u=n(405),c=e(u),i=n(333),f=e(i),d=n(418),p=e(d),s=n(628),y=e(s),m=n(629),h=e(m),v=n(630),b=e(v),E=function(){return o.default.createElement("div",null,o.default.createElement(a.default,{iconButtonElement:o.default.createElement(f.default,null,o.default.createElement(b.default,null)),anchorOrigin:{horizontal:"left",vertical:"top"},targetOrigin:{horizontal:"left",vertical:"top"}},o.default.createElement(c.default,{primaryText:"Copy & Paste",rightIcon:o.default.createElement(h.default,null),menuItems:[o.default.createElement(c.default,{primaryText:"Cut"}),o.default.createElement(c.default,{primaryText:"Copy"}),o.default.createElement(p.default,null),o.default.createElement(c.default,{primaryText:"Paste"})]}),o.default.createElement(c.default,{primaryText:"Case Tools",rightIcon:o.default.createElement(h.default,null),menuItems:[o.default.createElement(c.default,{primaryText:"UPPERCASE"}),o.default.createElement(c.default,{primaryText:"lowercase"}),o.default.createElement(c.default,{primaryText:"CamelCase"}),o.default.createElement(c.default,{primaryText:"Propercase"})]}),o.default.createElement(p.default,null),o.default.createElement(c.default,{primaryText:"Download",leftIcon:o.default.createElement(y.default,null)}),o.default.createElement(p.default,null),o.default.createElement(c.default,{value:"Del",primaryText:"Delete"})))};t.default=E}).call(this)}finally{}},628:function(e,t,n){"use strict";function l(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(2),r=l(o),a=n(370),u=l(a),c=n(379),i=l(c),f=function(e){return r.default.createElement(i.default,e,r.default.createElement("path",{d:"M19 9h-4V3H9v6H5l7 7 7-7zM5 18v2h14v-2H5z"}))};f=(0,u.default)(f),f.displayName="FileFileDownload",f.muiName="SvgIcon",t.default=f},629:function(e,t,n){"use strict";function l(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(2),r=l(o),a=n(370),u=l(a),c=n(379),i=l(c),f=function(e){return r.default.createElement(i.default,e,r.default.createElement("path",{d:"M9.5,7l5,5l-5,5V7z"}))};f=(0,u.default)(f),f.displayName="NavigationArrowDropRight",f.muiName="SvgIcon",t.default=f},630:function(e,t,n){"use strict";function l(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(2),r=l(o),a=n(370),u=l(a),c=n(379),i=l(c),f=function(e){return r.default.createElement(i.default,e,r.default.createElement("path",{d:"M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"}))};f=(0,u.default)(f),f.displayName="NavigationMoreVert",f.muiName="SvgIcon",t.default=f},631:function(e,t,n){try{(function(){"use strict";function e(e){return e&&e.__esModule?e:{default:e}}function l(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function r(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var l=t[n];l.enumerable=l.enumerable||!1,l.configurable=!0,"value"in l&&(l.writable=!0),Object.defineProperty(e,l.key,l)}}return function(t,n,l){return n&&e(t.prototype,n),l&&e(t,l),t}}(),u=n(2),c=e(u),i=function(e){function t(){return l(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return r(t,e),a(t,[{key:"render",value:function(){return c.default.createElement("div",{className:"content"},this.props.children)}}]),t}(u.Component);i.propTypes={},t.default=i}).call(this)}finally{}},632:function(e,t,n){try{(function(){"use strict";function e(e){return e&&e.__esModule?e:{default:e}}function l(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function r(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var l=t[n];l.enumerable=l.enumerable||!1,l.configurable=!0,"value"in l&&(l.writable=!0),Object.defineProperty(e,l.key,l)}}return function(t,n,l){return n&&e(t.prototype,n),l&&e(t,l),t}}(),u=n(2),c=e(u),i=n(381),f=e(i),d=n(398),p=e(d),s=n(405),y=e(s),m=n(633),h=e(m),v=n(634),b=e(v),E=n(635),g=e(E),_=n(418),C=(e(_),n(636)),T=e(C),M=n(628),O=e(M),x=n(637),w=e(x),P=n(366),j=(e(P),n(488)),S={paper:{display:"inline-block",float:"left",margin:"8px 32px 16px 10px",backgroundColor:"rgb(43, 53, 65)"}},I=function(e){function t(){return l(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return r(t,e),a(t,[{key:"handleNavigator",value:function(e,t){this.context.router.push(t)}},{key:"handleItemTouch",value:function(e,t,n){}},{key:"render",value:function(){return c.default.createElement(f.default,{style:S.paper},c.default.createElement(p.default,{onChange:this.handleNavigator.bind(this),onItemTouchTap:this.handleItemTouch.bind(this)},c.default.createElement(y.default,{value:"Home",primaryText:"Preview",leftIcon:c.default.createElement(h.default,null)}),c.default.createElement(y.default,{value:"Config",primaryText:"Share",leftIcon:c.default.createElement(b.default,null)}),c.default.createElement(y.default,{value:3,primaryText:"Get links",leftIcon:c.default.createElement(g.default,null)}),c.default.createElement(y.default,{value:4,primaryText:"Make a copy",leftIcon:c.default.createElement(T.default,null)}),c.default.createElement(y.default,{value:5,primaryText:"Download",leftIcon:c.default.createElement(O.default,null)}),c.default.createElement(y.default,{value:6,primaryText:"Remove",leftIcon:c.default.createElement(w.default,null)})))}}]),t}(u.Component);I.contextTypes={router:c.default.PropTypes.object.isRequired},t.default=(0,j.makeSelectable)(I)}).call(this)}finally{}},633:function(e,t,n){"use strict";function l(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(2),r=l(o),a=n(370),u=l(a),c=n(379),i=l(c),f=function(e){return r.default.createElement(i.default,e,r.default.createElement("path",{d:"M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z"}))};f=(0,u.default)(f),f.displayName="ImageRemoveRedEye",f.muiName="SvgIcon",t.default=f},634:function(e,t,n){"use strict";function l(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(2),r=l(o),a=n(370),u=l(a),c=n(379),i=l(c),f=function(e){return r.default.createElement(i.default,e,r.default.createElement("path",{d:"M15 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm-9-2V7H4v3H1v2h3v3h2v-3h3v-2H6zm9 4c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"}))};f=(0,u.default)(f),f.displayName="SocialPersonAdd",f.muiName="SvgIcon",t.default=f},635:function(e,t,n){"use strict";function l(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(2),r=l(o),a=n(370),u=l(a),c=n(379),i=l(c),f=function(e){return r.default.createElement(i.default,e,r.default.createElement("path",{d:"M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71 0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71 0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76 0 5-2.24 5-5s-2.24-5-5-5z"}))};f=(0,u.default)(f),f.displayName="ContentLink",f.muiName="SvgIcon",t.default=f},636:function(e,t,n){"use strict";function l(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(2),r=l(o),a=n(370),u=l(a),c=n(379),i=l(c),f=function(e){return r.default.createElement(i.default,e,r.default.createElement("path",{d:"M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12V1zm3 4H8c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h11c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm0 16H8V7h11v14z"}))};f=(0,u.default)(f),f.displayName="ContentContentCopy",f.muiName="SvgIcon",t.default=f},637:function(e,t,n){"use strict";function l(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(2),r=l(o),a=n(370),u=l(a),c=n(379),i=l(c),f=function(e){return r.default.createElement(i.default,e,r.default.createElement("path",{d:"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"}))};f=(0,u.default)(f),f.displayName="ActionDelete",f.muiName="SvgIcon",t.default=f},638:function(e,t,n){try{(function(){"use strict";function e(e){return e&&e.__esModule?e:{default:e}}function l(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function r(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function a(e){return function(t){function n(){return l(this,n),o(this,(n.__proto__||Object.getPrototypeOf(n)).apply(this,arguments))}return r(n,t),u(n,[{key:"componentWillMount",value:function(){this.setState({selectedIndex:this.props.defaultValue})}},{key:"handleRequestChange",value:function(e,t){this.setState({selectedIndex:t}),this.context.router.push(t)}},{key:"render",value:function(){return i.default.createElement(e,{value:this.state.selectedIndex,onChange:this.handleRequestChange.bind(this)},this.props.children)}}]),n}(c.Component)}Object.defineProperty(t,"__esModule",{value:!0});var u=function(){function e(e,t){for(var n=0;n<t.length;n++){var l=t[n];l.enumerable=l.enumerable||!1,l.configurable=!0,"value"in l&&(l.writable=!0),Object.defineProperty(e,l.key,l)}}return function(t,n,l){return n&&e(t.prototype,n),l&&e(t,l),t}}(),c=n(2),i=e(c),f=n(488),d=n(420),p=(e(d),n(402)),s=e(p),y=n(636),m=e(y),h=n(628),v=(e(h),n(637)),b=(e(v),n(366)),E=(e(b),n(633)),g=e(E),_=n(634),C=e(_),T=n(635),M=e(T),O={color:"rgb(117, 117, 117)"},x=(0,f.makeSelectable)(f.List);x=a(x),x.contextTypes={router:i.default.PropTypes.object.isRequired};var w=function(e){function t(){return l(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return r(t,e),u(t,[{key:"render",value:function(){return i.default.createElement(x,{defaultValue:"Home"},i.default.createElement(s.default,null,"  "),i.default.createElement(f.ListItem,{value:"Home",primaryText:"Widget配置页面",leftIcon:i.default.createElement(g.default,null),style:O}),i.default.createElement(f.ListItem,{value:"Config",primaryText:"自定义表单页面",leftIcon:i.default.createElement(C.default,null),style:O}),i.default.createElement(f.ListItem,{value:4,primaryText:"Nothing",leftIcon:i.default.createElement(M.default,null),style:O}),i.default.createElement(f.ListItem,{value:5,primaryText:"Nothing",leftIcon:i.default.createElement(m.default,null),style:O}))}}]),t}(c.Component);t.default=w}).call(this)}finally{}},639:function(e,t,n){try{(function(){"use strict";e.exports=function(e){n.e(1,function(t){e(n(640))})}}).call(this)}finally{}},1065:function(e,t,n){try{(function(){"use strict";e.exports=function(e){n.e(2,function(t){e(n(1066))})}}).call(this)}finally{}},1067:function(e,t){},1070:function(e,t){},1072:function(e,t){}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC10YXAtZXZlbnQtcGx1Z2luL3NyYy9pbmplY3RUYXBFdmVudFBsdWdpbi5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LXRhcC1ldmVudC1wbHVnaW4vc3JjL2RlZmF1bHRDbGlja1JlamVjdGlvblN0cmF0ZWd5LmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtdGFwLWV2ZW50LXBsdWdpbi9zcmMvVGFwRXZlbnRQbHVnaW4uanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL0V2ZW50Q29uc3RhbnRzLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtdGFwLWV2ZW50LXBsdWdpbi9zcmMvVG91Y2hFdmVudFV0aWxzLmpzIiwid2VicGFjazovLy8uL34vZmJqcy9saWIva2V5T2YuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3JvdXRlL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21tb24vQXBwLmpzIiwid2VicGFjazovLy8uL34vbWF0ZXJpYWwtdWkvc3R5bGVzL2Jhc2VUaGVtZXMvZGFya0Jhc2VUaGVtZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbGF5b3V0cy9NYWluTGF5b3V0LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21tb24vVG9wTmF2LmpzIiwid2VicGFjazovLy8uL34vbWF0ZXJpYWwtdWkvc3ZnLWljb25zL2ZpbGUvZm9sZGVyLmpzIiwid2VicGFjazovLy8uL34vbWF0ZXJpYWwtdWkvc3ZnLWljb25zL2ZpbGUvY2xvdWQtdXBsb2FkLmpzIiwid2VicGFjazovLy8uL34vbWF0ZXJpYWwtdWkvc3ZnLWljb25zL2ZpbGUvZm9sZGVyLW9wZW4uanMiLCJ3ZWJwYWNrOi8vLy4vfi9tYXRlcmlhbC11aS9zdmctaWNvbnMvc29jaWFsL25vdGlmaWNhdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbW1vbi9Vc2VyQ29udHJvbC5qcyIsIndlYnBhY2s6Ly8vLi9+L21hdGVyaWFsLXVpL3N2Zy1pY29ucy9maWxlL2ZpbGUtZG93bmxvYWQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9tYXRlcmlhbC11aS9zdmctaWNvbnMvbmF2aWdhdGlvbi1hcnJvdy1kcm9wLXJpZ2h0LmpzIiwid2VicGFjazovLy8uL34vbWF0ZXJpYWwtdWkvc3ZnLWljb25zL25hdmlnYXRpb24vbW9yZS12ZXJ0LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21tb24vQ29udGVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL0xlZnROYXYuanMiLCJ3ZWJwYWNrOi8vLy4vfi9tYXRlcmlhbC11aS9zdmctaWNvbnMvaW1hZ2UvcmVtb3ZlLXJlZC1leWUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9tYXRlcmlhbC11aS9zdmctaWNvbnMvc29jaWFsL3BlcnNvbi1hZGQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9tYXRlcmlhbC11aS9zdmctaWNvbnMvY29udGVudC9saW5rLmpzIiwid2VicGFjazovLy8uL34vbWF0ZXJpYWwtdWkvc3ZnLWljb25zL2NvbnRlbnQvY29udGVudC1jb3B5LmpzIiwid2VicGFjazovLy8uL34vbWF0ZXJpYWwtdWkvc3ZnLWljb25zL2FjdGlvbi9kZWxldGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbW1vbi9TZWxlY3RhYmxlTGlzdC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcm91dGVzL0hvbWUvY29tcG9uZW50cy9Ib21lLmpzIiwid2VicGFjazovLy8uL3NyYy9yb3V0ZXMvQ29uZmlnL2NvbXBvbmVudHMvQ29uZmlnLmpzIl0sIm5hbWVzIjpbIndlYnBhY2tKc29ucCIsIjAiLCJtb2R1bGUiLCJleHBvcnRzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIjEiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0Iiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJfcmVhY3QiLCJfcmVhY3QyIiwiX3JlYWN0RG9tIiwiX3JlYWN0Um91dGVyIiwiX21hdGVyaWFsVWkiLCJfcmVhY3RUYXBFdmVudFBsdWdpbiIsIl9yZWFjdFRhcEV2ZW50UGx1Z2luMiIsIl9pbmRleCIsIl9pbmRleDIiLCJyZW5kZXIiLCJjcmVhdGVFbGVtZW50IiwiaGlzdG9yeSIsImJyb3dzZXJIaXN0b3J5IiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImNhbGwiLCJ0aGlzIiwiNjAzIiwiaW52YXJpYW50IiwiZGVmYXVsdENsaWNrUmVqZWN0aW9uU3RyYXRlZ3kiLCJhbHJlYWR5SW5qZWN0ZWQiLCJzdHJhdGVneU92ZXJyaWRlcyIsInNob3VsZFJlamVjdENsaWNrIiwiaW5qZWN0aW9uIiwiaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lIiwiVGFwRXZlbnRQbHVnaW4iLCI2MDQiLCJsYXN0VG91Y2hFdmVudCIsImNsaWNrVGltZXN0YW1wIiwiNjA1IiwiZ2V0QXhpc0Nvb3JkT2ZFdmVudCIsImF4aXMiLCJuYXRpdmVFdmVudCIsInNpbmdsZVRvdWNoIiwiVG91Y2hFdmVudFV0aWxzIiwiZXh0cmFjdFNpbmdsZVRvdWNoIiwicGFnZSIsImNsaWVudCIsIlZpZXdwb3J0TWV0cmljcyIsImVudlNjcm9sbCIsImdldERpc3RhbmNlIiwiY29vcmRzIiwicGFnZVgiLCJBeGlzIiwieCIsInBhZ2VZIiwieSIsIk1hdGgiLCJwb3ciLCJjcmVhdGVUYXBFdmVudFBsdWdpbiIsInRhcE1vdmVUaHJlc2hvbGQiLCJpZ25vcmVNb3VzZVRocmVzaG9sZCIsImV2ZW50VHlwZXMiLCJleHRyYWN0RXZlbnRzIiwidG9wTGV2ZWxUeXBlIiwidGFyZ2V0SW5zdCIsIm5hdGl2ZUV2ZW50VGFyZ2V0IiwiaXNTdGFydGlzaCIsImlzRW5kaXNoIiwiaXNUb3VjaCIsIm5vdyIsImV2ZW50IiwiZGlzdGFuY2UiLCJzdGFydENvb3JkcyIsIlN5bnRoZXRpY1VJRXZlbnQiLCJnZXRQb29sZWQiLCJ0b3VjaFRhcCIsIkV2ZW50UHJvcGFnYXRvcnMiLCJhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzIiwiRXZlbnRDb25zdGFudHMiLCJFdmVudFBsdWdpblV0aWxzIiwia2V5T2YiLCJ0b3BMZXZlbFR5cGVzIiwidG91Y2hUeXBlcyIsImluZGV4T2YiLCJ0b3VjaEV2ZW50cyIsImRlcGVuZGVuY2llcyIsImNvbmNhdCIsInBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzIiwiYnViYmxlZCIsIm9uVG91Y2hUYXAiLCJjYXB0dXJlZCIsIm9uVG91Y2hUYXBDYXB0dXJlIiwiRGF0ZSIsIjYwNiIsInRvcEFib3J0IiwidG9wQW5pbWF0aW9uRW5kIiwidG9wQW5pbWF0aW9uSXRlcmF0aW9uIiwidG9wQW5pbWF0aW9uU3RhcnQiLCJ0b3BCbHVyIiwidG9wQ2FuUGxheSIsInRvcENhblBsYXlUaHJvdWdoIiwidG9wQ2hhbmdlIiwidG9wQ2xpY2siLCJ0b3BDb21wb3NpdGlvbkVuZCIsInRvcENvbXBvc2l0aW9uU3RhcnQiLCJ0b3BDb21wb3NpdGlvblVwZGF0ZSIsInRvcENvbnRleHRNZW51IiwidG9wQ29weSIsInRvcEN1dCIsInRvcERvdWJsZUNsaWNrIiwidG9wRHJhZyIsInRvcERyYWdFbmQiLCJ0b3BEcmFnRW50ZXIiLCJ0b3BEcmFnRXhpdCIsInRvcERyYWdMZWF2ZSIsInRvcERyYWdPdmVyIiwidG9wRHJhZ1N0YXJ0IiwidG9wRHJvcCIsInRvcER1cmF0aW9uQ2hhbmdlIiwidG9wRW1wdGllZCIsInRvcEVuY3J5cHRlZCIsInRvcEVuZGVkIiwidG9wRXJyb3IiLCJ0b3BGb2N1cyIsInRvcElucHV0IiwidG9wSW52YWxpZCIsInRvcEtleURvd24iLCJ0b3BLZXlQcmVzcyIsInRvcEtleVVwIiwidG9wTG9hZCIsInRvcExvYWRlZERhdGEiLCJ0b3BMb2FkZWRNZXRhZGF0YSIsInRvcExvYWRTdGFydCIsInRvcE1vdXNlRG93biIsInRvcE1vdXNlTW92ZSIsInRvcE1vdXNlT3V0IiwidG9wTW91c2VPdmVyIiwidG9wTW91c2VVcCIsInRvcFBhc3RlIiwidG9wUGF1c2UiLCJ0b3BQbGF5IiwidG9wUGxheWluZyIsInRvcFByb2dyZXNzIiwidG9wUmF0ZUNoYW5nZSIsInRvcFJlc2V0IiwidG9wU2Nyb2xsIiwidG9wU2Vla2VkIiwidG9wU2Vla2luZyIsInRvcFNlbGVjdGlvbkNoYW5nZSIsInRvcFN0YWxsZWQiLCJ0b3BTdWJtaXQiLCJ0b3BTdXNwZW5kIiwidG9wVGV4dElucHV0IiwidG9wVGltZVVwZGF0ZSIsInRvcFRvdWNoQ2FuY2VsIiwidG9wVG91Y2hFbmQiLCJ0b3BUb3VjaE1vdmUiLCJ0b3BUb3VjaFN0YXJ0IiwidG9wVHJhbnNpdGlvbkVuZCIsInRvcFZvbHVtZUNoYW5nZSIsInRvcFdhaXRpbmciLCJ0b3BXaGVlbCIsIjYwNyIsInRvdWNoZXMiLCJjaGFuZ2VkVG91Y2hlcyIsImhhc1RvdWNoZXMiLCJsZW5ndGgiLCJoYXNDaGFuZ2VkVG91Y2hlcyIsIjYwOCIsIm9uZUtleU9iaiIsImtleSIsImhhc093blByb3BlcnR5IiwiNjA5IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsIl9leHRlbmRzIiwiYXNzaWduIiwidGFyZ2V0IiwiaSIsImFyZ3VtZW50cyIsInNvdXJjZSIsInByb3RvdHlwZSIsIl9BcHAiLCJfQXBwMiIsIl9Ib21lIiwiX0hvbWUyIiwiX0NvbmZpZyIsIl9Db25maWcyIiwiaXNSZWFjdENvbXBvbmVudCIsIkJvb2xlYW4iLCJjb21wb25lbnQiLCJnZXRDb21wb25lbnQiLCJsb2MiLCJjYiIsImNvbXAiLCJSb3V0ZXMiLCJfcmVmIiwiUm91dGVyIiwiUm91dGUiLCJwYXRoIiwiSW5kZXhSb3V0ZSIsInByb3BUeXBlcyIsIlByb3BUeXBlcyIsImFueSIsIjYxMCIsIl9jbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJUeXBlRXJyb3IiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsInNlbGYiLCJSZWZlcmVuY2VFcnJvciIsIl9pbmhlcml0cyIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsImNyZWF0ZSIsImNvbnN0cnVjdG9yIiwiZW51bWVyYWJsZSIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJfY3JlYXRlQ2xhc3MiLCJkZWZpbmVQcm9wZXJ0aWVzIiwicHJvcHMiLCJkZXNjcmlwdG9yIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiX011aVRoZW1lUHJvdmlkZXIiLCJfTXVpVGhlbWVQcm92aWRlcjIiLCJfZGFya0Jhc2VUaGVtZSIsIl9NYWluTGF5b3V0IiwiX01haW5MYXlvdXQyIiwiX2NvbG9ycyIsIl9nZXRNdWlUaGVtZSIsIl9nZXRNdWlUaGVtZTIiLCJfY29sb3JNYW5pcHVsYXRvciIsIm11aVRoZW1lIiwicGFsZXR0ZSIsImFjY2VudDFDb2xvciIsInRleHRDb2xvciIsInNoYWRvd0NvbG9yIiwiZGlzYWJsZWRDb2xvciIsImZhZGUiLCJkYXJrQmxhY2siLCJwaWNrZXJIZWFkZXJDb2xvciIsImNsb2NrQ2lyY2xlQ29sb3IiLCJwcmltYXJ5MUNvbG9yIiwicHJpbWFyeTJDb2xvciIsInByaW1hcnkzQ29sb3IiLCJhY2NlbnQyQ29sb3IiLCJhY2NlbnQzQ29sb3IiLCJhbHRlcm5hdGVUZXh0Q29sb3IiLCJjYW52YXNDb2xvciIsImJvcmRlckNvbG9yIiwibWVudSIsImJhY2tncm91bmRDb2xvciIsImNvbnRhaW5lckJhY2tncm91bmRDb2xvciIsIm1lbnVJdGVtIiwiZGF0YUhlaWdodCIsImhlaWdodCIsImhvdmVyQ29sb3IiLCJyZWRBMjAwIiwic2VsZWN0ZWRUZXh0Q29sb3IiLCJyaWdodEljb25EZXNrdG9wRmlsbCIsIkFwcCIsIl9Db21wb25lbnQiLCJnZXRQcm90b3R5cGVPZiIsImFwcGx5IiwiY2hpbGRyZW4iLCJDb21wb25lbnQiLCI2MTEiLCJfc3BhY2luZyIsIl9zcGFjaW5nMiIsInNwYWNpbmciLCJmb250RmFtaWx5IiwiY3lhbjcwMCIsImdyZXk2MDAiLCJwaW5rQTIwMCIsInBpbmtBNDAwIiwicGlua0ExMDAiLCJmdWxsV2hpdGUiLCJzZWNvbmRhcnlUZXh0Q29sb3IiLCI2MTIiLCJfVG9wTmF2IiwiX1RvcE5hdjIiLCJfQ29udGVudCIsIl9Db250ZW50MiIsIl9EcmF3ZXIiLCJfQXBwQmFyIiwiX0xlZnROYXYiLCJfU2VsZWN0YWJsZUxpc3QiLCJfU2VsZWN0YWJsZUxpc3QyIiwiTWFpbkxheW91dCIsIl90aGlzIiwic3RhdGUiLCJvcGVuIiwiY2xhc3NOYW1lIiwiNjEzIiwiX0F2YXRhciIsIl9BdmF0YXIyIiwiX0ljb25NZW51IiwiX0ljb25CdXR0b24iLCJfSWNvbkJ1dHRvbjIiLCJfRm9udEljb24iLCJfZXhwYW5kTW9yZSIsIl9NZW51SXRlbSIsIl9Ecm9wRG93bk1lbnUiLCJfUmFpc2VkQnV0dG9uIiwiX1Rvb2xiYXIiLCJfZm9sZGVyIiwiX0JhZGdlIiwiX0JhZGdlMiIsIl9GbGF0QnV0dG9uIiwiX0ZsYXRCdXR0b24yIiwiX2Nsb3VkVXBsb2FkIiwiX2Nsb3VkVXBsb2FkMiIsIl9mb2xkZXJPcGVuIiwiX2ZvbGRlck9wZW4yIiwiX25vdGlmaWNhdGlvbnMiLCJfbm90aWZpY2F0aW9uczIiLCJfVGV4dEZpZWxkIiwiX1RleHRGaWVsZDIiLCJfVXNlckNvbnRyb2wiLCJfVXNlckNvbnRyb2wyIiwic3R5bGVzIiwiZXJyb3JTdHlsZSIsImNvbG9yIiwidW5kZXJsaW5lU3R5bGUiLCJmbG9hdGluZ0xhYmVsU3R5bGUiLCJmbG9hdGluZ0xhYmVsRm9jdXNTdHlsZSIsIlRvcE5hdiIsIl9SZWFjdCRDb21wb25lbnQiLCJUb29sYmFyIiwic3R5bGUiLCJUb29sYmFyR3JvdXAiLCJmaXJzdENoaWxkIiwibGFiZWwiLCJocmVmIiwic2Vjb25kYXJ5IiwiaWNvbiIsIm1hcmdpblRvcCIsImJhZGdlQ29udGVudCIsInRvb2x0aXAiLCJiYWRnZVN0eWxlIiwidG9wIiwicmlnaHQiLCJ3aWR0aCIsImxhc3RDaGlsZCIsImZsb2F0aW5nTGFiZWxUZXh0Iiwic3JjIiwiNjE0IiwiX3B1cmUiLCJfcHVyZTIiLCJfU3ZnSWNvbiIsIl9TdmdJY29uMiIsIkZpbGVGb2xkZXIiLCJkIiwiZGlzcGxheU5hbWUiLCJtdWlOYW1lIiwiNjE1IiwiRmlsZUNsb3VkVXBsb2FkIiwiNjE2IiwiRmlsZUZvbGRlck9wZW4iLCI2MTciLCJTb2NpYWxOb3RpZmljYXRpb25zIiwiNjE4IiwiNjI3IiwiX0ljb25NZW51MiIsIl9NZW51SXRlbTIiLCJfRGl2aWRlciIsIl9EaXZpZGVyMiIsIl9maWxlRG93bmxvYWQiLCJfZmlsZURvd25sb2FkMiIsIl9uYXZpZ2F0aW9uQXJyb3dEcm9wUmlnaHQiLCJfbmF2aWdhdGlvbkFycm93RHJvcFJpZ2h0MiIsIl9tb3JlVmVydCIsIl9tb3JlVmVydDIiLCJVc2VyQ29udHJvbCIsImljb25CdXR0b25FbGVtZW50IiwiYW5jaG9yT3JpZ2luIiwiaG9yaXpvbnRhbCIsInZlcnRpY2FsIiwidGFyZ2V0T3JpZ2luIiwicHJpbWFyeVRleHQiLCJyaWdodEljb24iLCJtZW51SXRlbXMiLCJsZWZ0SWNvbiIsIjYyOCIsIkZpbGVGaWxlRG93bmxvYWQiLCI2MjkiLCJOYXZpZ2F0aW9uQXJyb3dEcm9wUmlnaHQiLCI2MzAiLCJOYXZpZ2F0aW9uTW9yZVZlcnQiLCI2MzEiLCJDb250ZW50IiwiNjMyIiwiX1BhcGVyIiwiX1BhcGVyMiIsIl9NZW51IiwiX01lbnUyIiwiX3JlbW92ZVJlZEV5ZSIsIl9yZW1vdmVSZWRFeWUyIiwiX3BlcnNvbkFkZCIsIl9wZXJzb25BZGQyIiwiX2xpbmsiLCJfbGluazIiLCJfY29udGVudENvcHkiLCJfY29udGVudENvcHkyIiwiX2RlbGV0ZSIsIl9kZWxldGUyIiwiX0xpc3QiLCJwYXBlciIsImRpc3BsYXkiLCJmbG9hdCIsIm1hcmdpbiIsIkxlZnROYXYiLCJjb250ZXh0Iiwicm91dGVyIiwicHVzaCIsImluZGV4Iiwib25DaGFuZ2UiLCJoYW5kbGVOYXZpZ2F0b3IiLCJiaW5kIiwib25JdGVtVG91Y2hUYXAiLCJoYW5kbGVJdGVtVG91Y2giLCJjb250ZXh0VHlwZXMiLCJvYmplY3QiLCJpc1JlcXVpcmVkIiwibWFrZVNlbGVjdGFibGUiLCI2MzMiLCJJbWFnZVJlbW92ZVJlZEV5ZSIsIjYzNCIsIlNvY2lhbFBlcnNvbkFkZCIsIjYzNSIsIkNvbnRlbnRMaW5rIiwiNjM2IiwiQ29udGVudENvbnRlbnRDb3B5IiwiNjM3IiwiQWN0aW9uRGVsZXRlIiwiNjM4Iiwid3JhcFN0YXRlIiwiQ29tcG9zZWRDb21wb25lbnQiLCJTZWxlY3RhYmxlTGlzdCIsInNldFN0YXRlIiwic2VsZWN0ZWRJbmRleCIsImRlZmF1bHRWYWx1ZSIsImhhbmRsZVJlcXVlc3RDaGFuZ2UiLCJfU3ViaGVhZGVyIiwiX1N1YmhlYWRlcjIiLCJpdGVtU3R5bGUiLCJMaXN0IiwiTGlzdEV4YW1wbGVTZWxlY3RhYmxlIiwiX0NvbXBvbmVudDIiLCJMaXN0SXRlbSIsIjYzOSIsImUiLCJyZXF1aXJlIiwiMTA2NSIsIjEwNjciLCIxMDcwIiwiMTA3MiJdLCJtYXBwaW5ncyI6IkFBQUFBLGNBQWMsSUFFUkMsRUFDQSxTQUFTQyxFQUFRQyxFQUFTQyxHQUUvQkYsRUFBT0MsUUFBVUMsRUFBb0IsSUFLaENDLEVBQ0EsU0FBU0gsRUFBUUMsRUFBU0MsR0FFb2hCLEtBQU0sV0FFempCLFlBNEJBLFNBQVNFLEdBQXVCQyxHQUFPLE1BQU9BLElBQU9BLEVBQUlDLFdBQWFELEdBQVFFLFFBQVNGLEdDMUN4RixHQUFBRyxHQUFBTixFQUFBLEdEa0JLTyxFQUFVTCxFQUF1QkksR0NqQnRDRSxFQUFBUixFQUFBLElBQ0FTLEVBQUFULEVBQUEsS0FDQVUsRUFBQVYsRUFBQSxLQUNBVyxHRHNCb0JULEVBQXVCUSxHQ3RCM0NWLEVBQUEsTUQwQktZLEVBQXdCVixFQUF1QlMsR0N6QnBERSxFQUFBYixFQUFBLEtENkJLYyxFQUFVWixFQUF1QlcsRUM1QnRDYixHQUFBLE1BQ0FBLEVBQUEsTUFDQUEsRUFBQSxPQUVBLEVBQUFZLEVBQUFQLFlBaUJBLEVBQUFHLEVBQUFPLFFBQU9SLEVBQUFGLFFBQUFXLGNBQUFGLEVBQUFULFNBQVFZLFFBQUFSLEVBQUFTLGlCQUNmQyxTQUFTQyxlQUFlLFdE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QUNWdVUsTUFBT29ILElBR1h6YixFQUFBRixRQUFBVyxjQUFBeVksRUFBQTJDLFVBQ0l4UixNQUFPLFNBQ1BrTixZQUFZLFVBQ1pHLFNBQVUxWCxFQUFBRixRQUFBVyxjQUFBa1ksRUFBQTdZLFFBQUEsTUFDVnVVLE1BQU9vSCxJQUVYemIsRUFBQUYsUUFBQVcsY0FBQXlZLEVBQUEyQyxVQUNJeFIsTUFBTyxFQUNQa04sWUFBWSxVQUNaRyxTQUFVMVgsRUFBQUYsUUFBQVcsY0FBQW9ZLEVBQUEvWSxRQUFBLE1BQ1Z1VSxNQUFPb0gsSUFFWHpiLEVBQUFGLFFBQUFXLGNBQUF5WSxFQUFBMkMsVUFDSXhSLE1BQU8sRUFDUGtOLFlBQVksVUFDWkcsU0FBVTFYLEVBQUFGLFFBQUFXLGNBQUFzWSxFQUFBalosUUFBQSxNQUNWdVUsTUFBT29ILFM1QjZ6RGpCRSxHQUNQNWIsRUFBT3NRLFVBSVQ3USxHQUFRTSxRNEJuekRNNmIsSTVCcXpEWTdhLEtBQUtDLE1BQVMsV0FJbkMrYSxJQUNBLFNBQVN2YyxFQUFRQyxFQUFTQyxHQUVvaEIsS0FBTSxXQUV6akIsWTZCdjZEREYsR0FBT0MsUUFBVSxTQUFTZ00sR0FDekIvTCxFQUFBc2MsRUFBQSxFQUFtQixTQUFTQyxHQUMzQnhRLEVBQUcvTCxFQUFRLFc3QjY2RGNxQixLQUFLQyxNQUFTLFdBSW5Da2IsS0FDQSxTQUFTMWMsRUFBUUMsRUFBU0MsR0FFb2hCLEtBQU0sV0FFempCLFk4Qng3RERGLEdBQU9DLFFBQVUsU0FBU2dNLEdBQ3pCL0wsRUFBQXNjLEVBQUEsRUFBbUIsU0FBU0MsR0FDM0J4USxFQUFHL0wsRUFBUSxZOUI4N0RjcUIsS0FBS0MsTUFBUyxXQUluQ21iLEtBQ0EsU0FBUzNjLEVBQVFDLEtBTWpCMmMsS0FDQSxTQUFTNWMsRUFBUUMsS0FNakI0YyxLQUNBLFNBQVM3YyxFQUFRQyIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIndlYnBhY2tKc29ucChbMF0se1xuXG4vKioqLyAwOlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0bW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXG5cbi8qKiovIH0sXG5cbi8qKiovIDE6XG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKiBSRUFDVCBIT1QgTE9BREVSICovIGlmIChmYWxzZSkgeyAoZnVuY3Rpb24gKCkgeyB2YXIgUmVhY3RIb3RBUEkgPSByZXF1aXJlKFwiQzpcXFxcSmF5XFxcXFdvcmtzdGF0aW9uXFxcXFBlcnNvbmFsXFxcXGxpdWppZWttLmdpdGh1Yi5pb1xcXFxub2RlX21vZHVsZXNcXFxccmVhY3QtaG90LWFwaVxcXFxtb2R1bGVzXFxcXGluZGV4LmpzXCIpLCBSb290SW5zdGFuY2VQcm92aWRlciA9IHJlcXVpcmUoXCJDOlxcXFxKYXlcXFxcV29ya3N0YXRpb25cXFxcUGVyc29uYWxcXFxcbGl1amlla20uZ2l0aHViLmlvXFxcXG5vZGVfbW9kdWxlc1xcXFxyZWFjdC1ob3QtbG9hZGVyXFxcXFJvb3RJbnN0YW5jZVByb3ZpZGVyLmpzXCIpLCBSZWFjdE1vdW50ID0gcmVxdWlyZShcInJlYWN0LWRvbS9saWIvUmVhY3RNb3VudFwiKSwgUmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIik7IG1vZHVsZS5tYWtlSG90ID0gbW9kdWxlLmhvdC5kYXRhID8gbW9kdWxlLmhvdC5kYXRhLm1ha2VIb3QgOiBSZWFjdEhvdEFQSShmdW5jdGlvbiAoKSB7IHJldHVybiBSb290SW5zdGFuY2VQcm92aWRlci5nZXRSb290SW5zdGFuY2VzKFJlYWN0TW91bnQpOyB9LCBSZWFjdCk7IH0pKCk7IH0gdHJ5IHsgKGZ1bmN0aW9uICgpIHtcblx0XG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdHZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXHRcblx0dmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cdFxuXHR2YXIgX3JlYWN0RG9tID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMyk7XG5cdFxuXHR2YXIgX3JlYWN0Um91dGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNzkpO1xuXHRcblx0dmFyIF9tYXRlcmlhbFVpID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMzQpO1xuXHRcblx0dmFyIF9tYXRlcmlhbFVpMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21hdGVyaWFsVWkpO1xuXHRcblx0dmFyIF9yZWFjdFRhcEV2ZW50UGx1Z2luID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2MDMpO1xuXHRcblx0dmFyIF9yZWFjdFRhcEV2ZW50UGx1Z2luMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0VGFwRXZlbnRQbHVnaW4pO1xuXHRcblx0dmFyIF9pbmRleCA9IF9fd2VicGFja19yZXF1aXJlX18oNjA5KTtcblx0XG5cdHZhciBfaW5kZXgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5kZXgpO1xuXHRcblx0X193ZWJwYWNrX3JlcXVpcmVfXygxMDY3KTtcblx0XG5cdF9fd2VicGFja19yZXF1aXJlX18oMTA3MCk7XG5cdFxuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDEwNzIpO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdCgwLCBfcmVhY3RUYXBFdmVudFBsdWdpbjIuZGVmYXVsdCkoKTtcblx0XG5cdC8vIGNvbnN0IHJvb3RSb3V0ZSA9IHtcblx0Ly8gICBjb21wb25lbnQ6ICdkaXYnLFxuXHQvLyAgIGNoaWxkUm91dGVzOiBbIHtcblx0Ly8gICAgIHBhdGg6ICcvJyxcblx0Ly8gICAgIGNvbXBvbmVudDogcmVxdWlyZSgnLi9zcmMvY29tbW9uL0FwcCcpLFxuXHQvLyAgICAgY2hpbGRSb3V0ZXM6IFtcblx0Ly8gICAgICAgcmVxdWlyZSgnLi9zcmMvcm91dGVzL0hvbWUnKSxcblx0Ly8gICAgICAgcmVxdWlyZSgnLi9zcmMvcm91dGVzL0NvbmZpZycpXG5cdFxuXHQvLyAgICAgXVxuXHQvLyAgIH0gXVxuXHQvLyB9XG5cdFxuXHRcblx0Ly88Um91dGVyIGhpc3Rvcnk9e2Jyb3dzZXJIaXN0b3J5fSByb3V0ZXM9e3Jvb3RSb3V0ZX0gLz5cblx0Ly8gc2NydW1hbi5jbue9keermeWFpeWPo+aWh+S7tlxuXHQoMCwgX3JlYWN0RG9tLnJlbmRlcikoX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2luZGV4Mi5kZWZhdWx0LCB7IGhpc3Rvcnk6IF9yZWFjdFJvdXRlci5icm93c2VySGlzdG9yeSB9KSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jvb3QnKSk7XG5cdFxuXHQvKiBSRUFDVCBIT1QgTE9BREVSICovIH0pLmNhbGwodGhpcyk7IH0gZmluYWxseSB7IGlmIChmYWxzZSkgeyAoZnVuY3Rpb24gKCkgeyB2YXIgZm91bmRSZWFjdENsYXNzZXMgPSBtb2R1bGUuaG90LmRhdGEgJiYgbW9kdWxlLmhvdC5kYXRhLmZvdW5kUmVhY3RDbGFzc2VzIHx8IGZhbHNlOyBpZiAobW9kdWxlLmV4cG9ydHMgJiYgbW9kdWxlLm1ha2VIb3QpIHsgdmFyIG1ha2VFeHBvcnRzSG90ID0gcmVxdWlyZShcIkM6XFxcXEpheVxcXFxXb3Jrc3RhdGlvblxcXFxQZXJzb25hbFxcXFxsaXVqaWVrbS5naXRodWIuaW9cXFxcbm9kZV9tb2R1bGVzXFxcXHJlYWN0LWhvdC1sb2FkZXJcXFxcbWFrZUV4cG9ydHNIb3QuanNcIik7IGlmIChtYWtlRXhwb3J0c0hvdChtb2R1bGUsIHJlcXVpcmUoXCJyZWFjdFwiKSkpIHsgZm91bmRSZWFjdENsYXNzZXMgPSB0cnVlOyB9IHZhciBzaG91bGRBY2NlcHRNb2R1bGUgPSB0cnVlICYmIGZvdW5kUmVhY3RDbGFzc2VzOyBpZiAoc2hvdWxkQWNjZXB0TW9kdWxlKSB7IG1vZHVsZS5ob3QuYWNjZXB0KGZ1bmN0aW9uIChlcnIpIHsgaWYgKGVycikgeyBjb25zb2xlLmVycm9yKFwiQ2Fubm90IGFwcGx5IGhvdCB1cGRhdGUgdG8gXCIgKyBcImluZGV4LmpzXCIgKyBcIjogXCIgKyBlcnIubWVzc2FnZSk7IH0gfSk7IH0gfSBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24gKGRhdGEpIHsgZGF0YS5tYWtlSG90ID0gbW9kdWxlLm1ha2VIb3Q7IGRhdGEuZm91bmRSZWFjdENsYXNzZXMgPSBmb3VuZFJlYWN0Q2xhc3NlczsgfSk7IH0pKCk7IH0gfVxuXG4vKioqLyB9LFxuXG4vKioqLyA2MDM6XG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHR2YXIgaW52YXJpYW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblx0dmFyIGRlZmF1bHRDbGlja1JlamVjdGlvblN0cmF0ZWd5ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2MDQpO1xuXHRcblx0dmFyIGFscmVhZHlJbmplY3RlZCA9IGZhbHNlO1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmplY3RUYXBFdmVudFBsdWdpbiAoc3RyYXRlZ3lPdmVycmlkZXMpIHtcblx0ICBzdHJhdGVneU92ZXJyaWRlcyA9IHN0cmF0ZWd5T3ZlcnJpZGVzIHx8IHt9XG5cdCAgdmFyIHNob3VsZFJlamVjdENsaWNrID0gc3RyYXRlZ3lPdmVycmlkZXMuc2hvdWxkUmVqZWN0Q2xpY2sgfHwgZGVmYXVsdENsaWNrUmVqZWN0aW9uU3RyYXRlZ3k7XG5cdFxuXHQgIGlmICh0cnVlKSB7XG5cdCAgICBpbnZhcmlhbnQoXG5cdCAgICAgICFhbHJlYWR5SW5qZWN0ZWQsXG5cdCAgICAgICdpbmplY3RUYXBFdmVudFBsdWdpbigpOiBDYW4gb25seSBiZSBjYWxsZWQgb25jZSBwZXIgYXBwbGljYXRpb24gbGlmZWN5Y2xlLlxcblxcblxcXG5cdEl0IGlzIHJlY29tbWVuZGVkIHRvIGNhbGwgaW5qZWN0VGFwRXZlbnRQbHVnaW4oKSBqdXN0IGJlZm9yZSB5b3UgY2FsbCBcXFxuXHRSZWFjdERPTS5yZW5kZXIoKS4gSWYgeW91IGFyZSB1c2luZyBhbiBleHRlcm5hbCBsaWJyYXJ5IHdoaWNoIGNhbGxzIGluamVjdFRhcEV2ZW50UGx1Z2luKCkgXFxcblx0aXRzZWxmLCBwbGVhc2UgY29udGFjdCB0aGUgbWFpbnRhaW5lciBhcyBpdCBzaG91bGRuXFwndCBiZSBjYWxsZWQgaW4gbGlicmFyeSBjb2RlIGFuZCBcXFxuXHRzaG91bGQgYmUgaW5qZWN0ZWQgYnkgdGhlIGFwcGxpY2F0aW9uLidcblx0ICAgIClcblx0ICB9XG5cdFxuXHQgIGFscmVhZHlJbmplY3RlZCA9IHRydWU7XG5cdFxuXHQgIF9fd2VicGFja19yZXF1aXJlX18oNDMpLmluamVjdGlvbi5pbmplY3RFdmVudFBsdWdpbnNCeU5hbWUoe1xuXHQgICAgJ1RhcEV2ZW50UGx1Z2luJzogICAgICAgX193ZWJwYWNrX3JlcXVpcmVfXyg2MDUpKHNob3VsZFJlamVjdENsaWNrKVxuXHQgIH0pO1xuXHR9O1xuXG5cbi8qKiovIH0sXG5cbi8qKiovIDYwNDpcbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obGFzdFRvdWNoRXZlbnQsIGNsaWNrVGltZXN0YW1wKSB7XG5cdCAgaWYgKGxhc3RUb3VjaEV2ZW50ICYmIChjbGlja1RpbWVzdGFtcCAtIGxhc3RUb3VjaEV2ZW50KSA8IDc1MCkge1xuXHQgICAgcmV0dXJuIHRydWU7XG5cdCAgfVxuXHR9O1xuXG5cbi8qKiovIH0sXG5cbi8qKiovIDYwNTpcbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qKlxuXHQgKiBDb3B5cmlnaHQgMjAxMy0yMDE0IEZhY2Vib29rLCBJbmMuXG5cdCAqXG5cdCAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG5cdCAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cblx0ICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cdCAqXG5cdCAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXHQgKlxuXHQgKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5cdCAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcblx0ICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5cdCAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcblx0ICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cdCAqXG5cdCAqIEBwcm92aWRlc01vZHVsZSBUYXBFdmVudFBsdWdpblxuXHQgKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuXHQgKi9cblx0XG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0dmFyIEV2ZW50Q29uc3RhbnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2MDYpO1xuXHR2YXIgRXZlbnRQbHVnaW5VdGlscyA9IF9fd2VicGFja19yZXF1aXJlX18oNDUpO1xuXHR2YXIgRXZlbnRQcm9wYWdhdG9ycyA9IF9fd2VicGFja19yZXF1aXJlX18oNDIpO1xuXHR2YXIgU3ludGhldGljVUlFdmVudCA9IF9fd2VicGFja19yZXF1aXJlX18oNzYpO1xuXHR2YXIgVG91Y2hFdmVudFV0aWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2MDcpO1xuXHR2YXIgVmlld3BvcnRNZXRyaWNzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3Nyk7XG5cdFxuXHR2YXIga2V5T2YgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYwOCk7XG5cdHZhciB0b3BMZXZlbFR5cGVzID0gRXZlbnRDb25zdGFudHMudG9wTGV2ZWxUeXBlcztcblx0XG5cdHZhciBpc1N0YXJ0aXNoID0gRXZlbnRQbHVnaW5VdGlscy5pc1N0YXJ0aXNoO1xuXHR2YXIgaXNFbmRpc2ggPSBFdmVudFBsdWdpblV0aWxzLmlzRW5kaXNoO1xuXHRcblx0dmFyIGlzVG91Y2ggPSBmdW5jdGlvbih0b3BMZXZlbFR5cGUpIHtcblx0ICB2YXIgdG91Y2hUeXBlcyA9IFtcblx0ICAgICd0b3BUb3VjaENhbmNlbCcsXG5cdCAgICAndG9wVG91Y2hFbmQnLFxuXHQgICAgJ3RvcFRvdWNoU3RhcnQnLFxuXHQgICAgJ3RvcFRvdWNoTW92ZSdcblx0ICBdO1xuXHQgIHJldHVybiB0b3VjaFR5cGVzLmluZGV4T2YodG9wTGV2ZWxUeXBlKSA+PSAwO1xuXHR9XG5cdFxuXHQvKipcblx0ICogTnVtYmVyIG9mIHBpeGVscyB0aGF0IGFyZSB0b2xlcmF0ZWQgaW4gYmV0d2VlbiBhIGB0b3VjaFN0YXJ0YCBhbmQgYHRvdWNoRW5kYFxuXHQgKiBpbiBvcmRlciB0byBzdGlsbCBiZSBjb25zaWRlcmVkIGEgJ3RhcCcgZXZlbnQuXG5cdCAqL1xuXHR2YXIgdGFwTW92ZVRocmVzaG9sZCA9IDEwO1xuXHR2YXIgaWdub3JlTW91c2VUaHJlc2hvbGQgPSA3NTA7XG5cdHZhciBzdGFydENvb3JkcyA9IHt4OiBudWxsLCB5OiBudWxsfTtcblx0dmFyIGxhc3RUb3VjaEV2ZW50ID0gbnVsbDtcblx0XG5cdHZhciBBeGlzID0ge1xuXHQgIHg6IHtwYWdlOiAncGFnZVgnLCBjbGllbnQ6ICdjbGllbnRYJywgZW52U2Nyb2xsOiAnY3VycmVudFBhZ2VTY3JvbGxMZWZ0J30sXG5cdCAgeToge3BhZ2U6ICdwYWdlWScsIGNsaWVudDogJ2NsaWVudFknLCBlbnZTY3JvbGw6ICdjdXJyZW50UGFnZVNjcm9sbFRvcCd9XG5cdH07XG5cdFxuXHRmdW5jdGlvbiBnZXRBeGlzQ29vcmRPZkV2ZW50KGF4aXMsIG5hdGl2ZUV2ZW50KSB7XG5cdCAgdmFyIHNpbmdsZVRvdWNoID0gVG91Y2hFdmVudFV0aWxzLmV4dHJhY3RTaW5nbGVUb3VjaChuYXRpdmVFdmVudCk7XG5cdCAgaWYgKHNpbmdsZVRvdWNoKSB7XG5cdCAgICByZXR1cm4gc2luZ2xlVG91Y2hbYXhpcy5wYWdlXTtcblx0ICB9XG5cdCAgcmV0dXJuIGF4aXMucGFnZSBpbiBuYXRpdmVFdmVudCA/XG5cdCAgICBuYXRpdmVFdmVudFtheGlzLnBhZ2VdIDpcblx0ICAgIG5hdGl2ZUV2ZW50W2F4aXMuY2xpZW50XSArIFZpZXdwb3J0TWV0cmljc1theGlzLmVudlNjcm9sbF07XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGdldERpc3RhbmNlKGNvb3JkcywgbmF0aXZlRXZlbnQpIHtcblx0ICB2YXIgcGFnZVggPSBnZXRBeGlzQ29vcmRPZkV2ZW50KEF4aXMueCwgbmF0aXZlRXZlbnQpO1xuXHQgIHZhciBwYWdlWSA9IGdldEF4aXNDb29yZE9mRXZlbnQoQXhpcy55LCBuYXRpdmVFdmVudCk7XG5cdCAgcmV0dXJuIE1hdGgucG93KFxuXHQgICAgTWF0aC5wb3cocGFnZVggLSBjb29yZHMueCwgMikgKyBNYXRoLnBvdyhwYWdlWSAtIGNvb3Jkcy55LCAyKSxcblx0ICAgIDAuNVxuXHQgICk7XG5cdH1cblx0XG5cdHZhciB0b3VjaEV2ZW50cyA9IFtcblx0ICAndG9wVG91Y2hTdGFydCcsXG5cdCAgJ3RvcFRvdWNoQ2FuY2VsJyxcblx0ICAndG9wVG91Y2hFbmQnLFxuXHQgICd0b3BUb3VjaE1vdmUnLFxuXHRdO1xuXHRcblx0dmFyIGRlcGVuZGVuY2llcyA9IFtcblx0ICAndG9wTW91c2VEb3duJyxcblx0ICAndG9wTW91c2VNb3ZlJyxcblx0ICAndG9wTW91c2VVcCcsXG5cdF0uY29uY2F0KHRvdWNoRXZlbnRzKTtcblx0XG5cdHZhciBldmVudFR5cGVzID0ge1xuXHQgIHRvdWNoVGFwOiB7XG5cdCAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuXHQgICAgICBidWJibGVkOiBrZXlPZih7b25Ub3VjaFRhcDogbnVsbH0pLFxuXHQgICAgICBjYXB0dXJlZDoga2V5T2Yoe29uVG91Y2hUYXBDYXB0dXJlOiBudWxsfSlcblx0ICAgIH0sXG5cdCAgICBkZXBlbmRlbmNpZXM6IGRlcGVuZGVuY2llc1xuXHQgIH1cblx0fTtcblx0XG5cdHZhciBub3cgPSAoZnVuY3Rpb24oKSB7XG5cdCAgaWYgKERhdGUubm93KSB7XG5cdCAgICByZXR1cm4gRGF0ZS5ub3c7XG5cdCAgfSBlbHNlIHtcblx0ICAgIC8vIElFOCBzdXBwb3J0OiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzk0MzAzNTcvcGxlYXNlLWV4cGxhaW4td2h5LWFuZC1ob3ctbmV3LWRhdGUtd29ya3MtYXMtd29ya2Fyb3VuZC1mb3ItZGF0ZS1ub3ctaW5cblx0ICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgIHJldHVybiArbmV3IERhdGU7XG5cdCAgICB9XG5cdCAgfVxuXHR9KSgpO1xuXHRcblx0ZnVuY3Rpb24gY3JlYXRlVGFwRXZlbnRQbHVnaW4oc2hvdWxkUmVqZWN0Q2xpY2spIHtcblx0ICByZXR1cm4ge1xuXHRcblx0ICAgIHRhcE1vdmVUaHJlc2hvbGQ6IHRhcE1vdmVUaHJlc2hvbGQsXG5cdFxuXHQgICAgaWdub3JlTW91c2VUaHJlc2hvbGQ6IGlnbm9yZU1vdXNlVGhyZXNob2xkLFxuXHRcblx0ICAgIGV2ZW50VHlwZXM6IGV2ZW50VHlwZXMsXG5cdFxuXHQgICAgLyoqXG5cdCAgICAgKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUeXBlIFJlY29yZCBmcm9tIGBFdmVudENvbnN0YW50c2AuXG5cdCAgICAgKiBAcGFyYW0ge0RPTUV2ZW50VGFyZ2V0fSB0YXJnZXRJbnN0IFRoZSBsaXN0ZW5pbmcgY29tcG9uZW50IHJvb3Qgbm9kZS5cblx0ICAgICAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cblx0ICAgICAqIEByZXR1cm4geyp9IEFuIGFjY3VtdWxhdGlvbiBvZiBzeW50aGV0aWMgZXZlbnRzLlxuXHQgICAgICogQHNlZSB7RXZlbnRQbHVnaW5IdWIuZXh0cmFjdEV2ZW50c31cblx0ICAgICAqL1xuXHQgICAgZXh0cmFjdEV2ZW50czogZnVuY3Rpb24oXG5cdCAgICAgIHRvcExldmVsVHlwZSxcblx0ICAgICAgdGFyZ2V0SW5zdCxcblx0ICAgICAgbmF0aXZlRXZlbnQsXG5cdCAgICAgIG5hdGl2ZUV2ZW50VGFyZ2V0XG5cdCAgICApIHtcblx0XG5cdCAgICAgIGlmICghaXNTdGFydGlzaCh0b3BMZXZlbFR5cGUpICYmICFpc0VuZGlzaCh0b3BMZXZlbFR5cGUpKSB7XG5cdCAgICAgICAgcmV0dXJuIG51bGw7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIGlmIChpc1RvdWNoKHRvcExldmVsVHlwZSkpIHtcblx0ICAgICAgICBsYXN0VG91Y2hFdmVudCA9IG5vdygpO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIGlmIChzaG91bGRSZWplY3RDbGljayhsYXN0VG91Y2hFdmVudCwgbm93KCkpKSB7XG5cdCAgICAgICAgICByZXR1cm4gbnVsbDtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIHZhciBldmVudCA9IG51bGw7XG5cdCAgICAgIHZhciBkaXN0YW5jZSA9IGdldERpc3RhbmNlKHN0YXJ0Q29vcmRzLCBuYXRpdmVFdmVudCk7XG5cdCAgICAgIGlmIChpc0VuZGlzaCh0b3BMZXZlbFR5cGUpICYmIGRpc3RhbmNlIDwgdGFwTW92ZVRocmVzaG9sZCkge1xuXHQgICAgICAgIGV2ZW50ID0gU3ludGhldGljVUlFdmVudC5nZXRQb29sZWQoXG5cdCAgICAgICAgICBldmVudFR5cGVzLnRvdWNoVGFwLFxuXHQgICAgICAgICAgdGFyZ2V0SW5zdCxcblx0ICAgICAgICAgIG5hdGl2ZUV2ZW50LFxuXHQgICAgICAgICAgbmF0aXZlRXZlbnRUYXJnZXRcblx0ICAgICAgICApO1xuXHQgICAgICB9XG5cdCAgICAgIGlmIChpc1N0YXJ0aXNoKHRvcExldmVsVHlwZSkpIHtcblx0ICAgICAgICBzdGFydENvb3Jkcy54ID0gZ2V0QXhpc0Nvb3JkT2ZFdmVudChBeGlzLngsIG5hdGl2ZUV2ZW50KTtcblx0ICAgICAgICBzdGFydENvb3Jkcy55ID0gZ2V0QXhpc0Nvb3JkT2ZFdmVudChBeGlzLnksIG5hdGl2ZUV2ZW50KTtcblx0ICAgICAgfSBlbHNlIGlmIChpc0VuZGlzaCh0b3BMZXZlbFR5cGUpKSB7XG5cdCAgICAgICAgc3RhcnRDb29yZHMueCA9IDA7XG5cdCAgICAgICAgc3RhcnRDb29yZHMueSA9IDA7XG5cdCAgICAgIH1cblx0ICAgICAgRXZlbnRQcm9wYWdhdG9ycy5hY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzKGV2ZW50KTtcblx0ICAgICAgcmV0dXJuIGV2ZW50O1xuXHQgICAgfVxuXHRcblx0ICB9O1xuXHR9XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZVRhcEV2ZW50UGx1Z2luO1xuXG5cbi8qKiovIH0sXG5cbi8qKiovIDYwNjpcbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdC8qKlxuXHQgKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuXHQgKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHQgKlxuXHQgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcblx0ICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG5cdCAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuXHQgKlxuXHQgKi9cblx0XG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdC8qKlxuXHQgKiBUeXBlcyBvZiByYXcgc2lnbmFscyBmcm9tIHRoZSBicm93c2VyIGNhdWdodCBhdCB0aGUgdG9wIGxldmVsLlxuXHQgKi9cblx0dmFyIHRvcExldmVsVHlwZXMgPSB7XG5cdCAgdG9wQWJvcnQ6IG51bGwsXG5cdCAgdG9wQW5pbWF0aW9uRW5kOiBudWxsLFxuXHQgIHRvcEFuaW1hdGlvbkl0ZXJhdGlvbjogbnVsbCxcblx0ICB0b3BBbmltYXRpb25TdGFydDogbnVsbCxcblx0ICB0b3BCbHVyOiBudWxsLFxuXHQgIHRvcENhblBsYXk6IG51bGwsXG5cdCAgdG9wQ2FuUGxheVRocm91Z2g6IG51bGwsXG5cdCAgdG9wQ2hhbmdlOiBudWxsLFxuXHQgIHRvcENsaWNrOiBudWxsLFxuXHQgIHRvcENvbXBvc2l0aW9uRW5kOiBudWxsLFxuXHQgIHRvcENvbXBvc2l0aW9uU3RhcnQ6IG51bGwsXG5cdCAgdG9wQ29tcG9zaXRpb25VcGRhdGU6IG51bGwsXG5cdCAgdG9wQ29udGV4dE1lbnU6IG51bGwsXG5cdCAgdG9wQ29weTogbnVsbCxcblx0ICB0b3BDdXQ6IG51bGwsXG5cdCAgdG9wRG91YmxlQ2xpY2s6IG51bGwsXG5cdCAgdG9wRHJhZzogbnVsbCxcblx0ICB0b3BEcmFnRW5kOiBudWxsLFxuXHQgIHRvcERyYWdFbnRlcjogbnVsbCxcblx0ICB0b3BEcmFnRXhpdDogbnVsbCxcblx0ICB0b3BEcmFnTGVhdmU6IG51bGwsXG5cdCAgdG9wRHJhZ092ZXI6IG51bGwsXG5cdCAgdG9wRHJhZ1N0YXJ0OiBudWxsLFxuXHQgIHRvcERyb3A6IG51bGwsXG5cdCAgdG9wRHVyYXRpb25DaGFuZ2U6IG51bGwsXG5cdCAgdG9wRW1wdGllZDogbnVsbCxcblx0ICB0b3BFbmNyeXB0ZWQ6IG51bGwsXG5cdCAgdG9wRW5kZWQ6IG51bGwsXG5cdCAgdG9wRXJyb3I6IG51bGwsXG5cdCAgdG9wRm9jdXM6IG51bGwsXG5cdCAgdG9wSW5wdXQ6IG51bGwsXG5cdCAgdG9wSW52YWxpZDogbnVsbCxcblx0ICB0b3BLZXlEb3duOiBudWxsLFxuXHQgIHRvcEtleVByZXNzOiBudWxsLFxuXHQgIHRvcEtleVVwOiBudWxsLFxuXHQgIHRvcExvYWQ6IG51bGwsXG5cdCAgdG9wTG9hZGVkRGF0YTogbnVsbCxcblx0ICB0b3BMb2FkZWRNZXRhZGF0YTogbnVsbCxcblx0ICB0b3BMb2FkU3RhcnQ6IG51bGwsXG5cdCAgdG9wTW91c2VEb3duOiBudWxsLFxuXHQgIHRvcE1vdXNlTW92ZTogbnVsbCxcblx0ICB0b3BNb3VzZU91dDogbnVsbCxcblx0ICB0b3BNb3VzZU92ZXI6IG51bGwsXG5cdCAgdG9wTW91c2VVcDogbnVsbCxcblx0ICB0b3BQYXN0ZTogbnVsbCxcblx0ICB0b3BQYXVzZTogbnVsbCxcblx0ICB0b3BQbGF5OiBudWxsLFxuXHQgIHRvcFBsYXlpbmc6IG51bGwsXG5cdCAgdG9wUHJvZ3Jlc3M6IG51bGwsXG5cdCAgdG9wUmF0ZUNoYW5nZTogbnVsbCxcblx0ICB0b3BSZXNldDogbnVsbCxcblx0ICB0b3BTY3JvbGw6IG51bGwsXG5cdCAgdG9wU2Vla2VkOiBudWxsLFxuXHQgIHRvcFNlZWtpbmc6IG51bGwsXG5cdCAgdG9wU2VsZWN0aW9uQ2hhbmdlOiBudWxsLFxuXHQgIHRvcFN0YWxsZWQ6IG51bGwsXG5cdCAgdG9wU3VibWl0OiBudWxsLFxuXHQgIHRvcFN1c3BlbmQ6IG51bGwsXG5cdCAgdG9wVGV4dElucHV0OiBudWxsLFxuXHQgIHRvcFRpbWVVcGRhdGU6IG51bGwsXG5cdCAgdG9wVG91Y2hDYW5jZWw6IG51bGwsXG5cdCAgdG9wVG91Y2hFbmQ6IG51bGwsXG5cdCAgdG9wVG91Y2hNb3ZlOiBudWxsLFxuXHQgIHRvcFRvdWNoU3RhcnQ6IG51bGwsXG5cdCAgdG9wVHJhbnNpdGlvbkVuZDogbnVsbCxcblx0ICB0b3BWb2x1bWVDaGFuZ2U6IG51bGwsXG5cdCAgdG9wV2FpdGluZzogbnVsbCxcblx0ICB0b3BXaGVlbDogbnVsbFxuXHR9O1xuXHRcblx0dmFyIEV2ZW50Q29uc3RhbnRzID0ge1xuXHQgIHRvcExldmVsVHlwZXM6IHRvcExldmVsVHlwZXNcblx0fTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gRXZlbnRDb25zdGFudHM7XG5cbi8qKiovIH0sXG5cbi8qKiovIDYwNzpcbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdC8qKlxuXHQgKiBDb3B5cmlnaHQgMjAxMy0yMDE0IEZhY2Vib29rLCBJbmMuXG5cdCAqXG5cdCAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG5cdCAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cblx0ICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cdCAqXG5cdCAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXHQgKlxuXHQgKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5cdCAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcblx0ICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5cdCAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcblx0ICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cdCAqXG5cdCAqIEBwcm92aWRlc01vZHVsZSBUb3VjaEV2ZW50VXRpbHNcblx0ICovXG5cdFxuXHR2YXIgVG91Y2hFdmVudFV0aWxzID0ge1xuXHQgIC8qKlxuXHQgICAqIFV0aWxpdHkgZnVuY3Rpb24gZm9yIGNvbW1vbiBjYXNlIG9mIGV4dHJhY3Rpbmcgb3V0IHRoZSBwcmltYXJ5IHRvdWNoIGZyb20gYVxuXHQgICAqIHRvdWNoIGV2ZW50LlxuXHQgICAqIC0gYHRvdWNoRW5kYCBldmVudHMgdXN1YWxseSBkbyBub3QgaGF2ZSB0aGUgYHRvdWNoZXNgIHByb3BlcnR5LlxuXHQgICAqICAgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8zNjY2OTI5L1xuXHQgICAqICAgbW9iaWxlLXNhcmFpLXRvdWNoZW5kLWV2ZW50LW5vdC1maXJpbmctd2hlbi1sYXN0LXRvdWNoLWlzLXJlbW92ZWRcblx0ICAgKlxuXHQgICAqIEBwYXJhbSB7RXZlbnR9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBldmVudCB0aGF0IG1heSBvciBtYXkgbm90IGJlIGEgdG91Y2guXG5cdCAgICogQHJldHVybiB7VG91Y2hlc09iamVjdD99IGFuIG9iamVjdCB3aXRoIHBhZ2VYIGFuZCBwYWdlWSBvciBudWxsLlxuXHQgICAqL1xuXHQgIGV4dHJhY3RTaW5nbGVUb3VjaDogZnVuY3Rpb24obmF0aXZlRXZlbnQpIHtcblx0ICAgIHZhciB0b3VjaGVzID0gbmF0aXZlRXZlbnQudG91Y2hlcztcblx0ICAgIHZhciBjaGFuZ2VkVG91Y2hlcyA9IG5hdGl2ZUV2ZW50LmNoYW5nZWRUb3VjaGVzO1xuXHQgICAgdmFyIGhhc1RvdWNoZXMgPSB0b3VjaGVzICYmIHRvdWNoZXMubGVuZ3RoID4gMDtcblx0ICAgIHZhciBoYXNDaGFuZ2VkVG91Y2hlcyA9IGNoYW5nZWRUb3VjaGVzICYmIGNoYW5nZWRUb3VjaGVzLmxlbmd0aCA+IDA7XG5cdFxuXHQgICAgcmV0dXJuICFoYXNUb3VjaGVzICYmIGhhc0NoYW5nZWRUb3VjaGVzID8gY2hhbmdlZFRvdWNoZXNbMF0gOlxuXHQgICAgICAgICAgIGhhc1RvdWNoZXMgPyB0b3VjaGVzWzBdIDpcblx0ICAgICAgICAgICBuYXRpdmVFdmVudDtcblx0ICB9XG5cdH07XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IFRvdWNoRXZlbnRVdGlscztcblxuXG4vKioqLyB9LFxuXG4vKioqLyA2MDg6XG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdC8qKlxuXHQgKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cblx0ICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cblx0ICpcblx0ICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG5cdCAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuXHQgKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cblx0ICpcblx0ICovXG5cdFxuXHQvKipcblx0ICogQWxsb3dzIGV4dHJhY3Rpb24gb2YgYSBtaW5pZmllZCBrZXkuIExldCdzIHRoZSBidWlsZCBzeXN0ZW0gbWluaWZ5IGtleXNcblx0ICogd2l0aG91dCBsb3NpbmcgdGhlIGFiaWxpdHkgdG8gZHluYW1pY2FsbHkgdXNlIGtleSBzdHJpbmdzIGFzIHZhbHVlc1xuXHQgKiB0aGVtc2VsdmVzLiBQYXNzIGluIGFuIG9iamVjdCB3aXRoIGEgc2luZ2xlIGtleS92YWwgcGFpciBhbmQgaXQgd2lsbCByZXR1cm5cblx0ICogeW91IHRoZSBzdHJpbmcga2V5IG9mIHRoYXQgc2luZ2xlIHJlY29yZC4gU3VwcG9zZSB5b3Ugd2FudCB0byBncmFiIHRoZVxuXHQgKiB2YWx1ZSBmb3IgYSBrZXkgJ2NsYXNzTmFtZScgaW5zaWRlIG9mIGFuIG9iamVjdC4gS2V5L3ZhbCBtaW5pZmljYXRpb24gbWF5XG5cdCAqIGhhdmUgYWxpYXNlZCB0aGF0IGtleSB0byBiZSAneGExMicuIGtleU9mKHtjbGFzc05hbWU6IG51bGx9KSB3aWxsIHJldHVyblxuXHQgKiAneGExMicgaW4gdGhhdCBjYXNlLiBSZXNvbHZlIGtleXMgeW91IHdhbnQgdG8gdXNlIG9uY2UgYXQgc3RhcnR1cCB0aW1lLCB0aGVuXG5cdCAqIHJldXNlIHRob3NlIHJlc29sdXRpb25zLlxuXHQgKi9cblx0dmFyIGtleU9mID0gZnVuY3Rpb24ga2V5T2Yob25lS2V5T2JqKSB7XG5cdCAgdmFyIGtleTtcblx0ICBmb3IgKGtleSBpbiBvbmVLZXlPYmopIHtcblx0ICAgIGlmICghb25lS2V5T2JqLmhhc093blByb3BlcnR5KGtleSkpIHtcblx0ICAgICAgY29udGludWU7XG5cdCAgICB9XG5cdCAgICByZXR1cm4ga2V5O1xuXHQgIH1cblx0ICByZXR1cm4gbnVsbDtcblx0fTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0ga2V5T2Y7XG5cbi8qKiovIH0sXG5cbi8qKiovIDYwOTpcbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qIFJFQUNUIEhPVCBMT0FERVIgKi8gaWYgKGZhbHNlKSB7IChmdW5jdGlvbiAoKSB7IHZhciBSZWFjdEhvdEFQSSA9IHJlcXVpcmUoXCJDOlxcXFxKYXlcXFxcV29ya3N0YXRpb25cXFxcUGVyc29uYWxcXFxcbGl1amlla20uZ2l0aHViLmlvXFxcXG5vZGVfbW9kdWxlc1xcXFxyZWFjdC1ob3QtYXBpXFxcXG1vZHVsZXNcXFxcaW5kZXguanNcIiksIFJvb3RJbnN0YW5jZVByb3ZpZGVyID0gcmVxdWlyZShcIkM6XFxcXEpheVxcXFxXb3Jrc3RhdGlvblxcXFxQZXJzb25hbFxcXFxsaXVqaWVrbS5naXRodWIuaW9cXFxcbm9kZV9tb2R1bGVzXFxcXHJlYWN0LWhvdC1sb2FkZXJcXFxcUm9vdEluc3RhbmNlUHJvdmlkZXIuanNcIiksIFJlYWN0TW91bnQgPSByZXF1aXJlKFwicmVhY3QtZG9tL2xpYi9SZWFjdE1vdW50XCIpLCBSZWFjdCA9IHJlcXVpcmUoXCJyZWFjdFwiKTsgbW9kdWxlLm1ha2VIb3QgPSBtb2R1bGUuaG90LmRhdGEgPyBtb2R1bGUuaG90LmRhdGEubWFrZUhvdCA6IFJlYWN0SG90QVBJKGZ1bmN0aW9uICgpIHsgcmV0dXJuIFJvb3RJbnN0YW5jZVByb3ZpZGVyLmdldFJvb3RJbnN0YW5jZXMoUmVhY3RNb3VudCk7IH0sIFJlYWN0KTsgfSkoKTsgfSB0cnkgeyAoZnVuY3Rpb24gKCkge1xuXHRcblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgdmFsdWU6IHRydWVcblx0fSk7XG5cdFxuXHR2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXHRcblx0dmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cdFxuXHR2YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblx0XG5cdHZhciBfcmVhY3RSb3V0ZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE3OSk7XG5cdFxuXHR2YXIgX0FwcCA9IF9fd2VicGFja19yZXF1aXJlX18oNjEwKTtcblx0XG5cdHZhciBfQXBwMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0FwcCk7XG5cdFxuXHR2YXIgX0hvbWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYzOSk7XG5cdFxuXHR2YXIgX0hvbWUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfSG9tZSk7XG5cdFxuXHR2YXIgX0NvbmZpZyA9IF9fd2VicGFja19yZXF1aXJlX18oMTA2NSk7XG5cdFxuXHR2YXIgX0NvbmZpZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Db25maWcpO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdC8vIGZ1bmN0aW9uIGxhenlMb2FkQ29tcG9uZW50KGxhenlNb2R1bGUpIHsgIFxuXHQvLyAgIHJldHVybiAobG9jYXRpb24sIGNiKSA9PiB7XG5cdC8vICAgICBsYXp5TW9kdWxlKG1vZHVsZSA9PiBjYihudWxsLCBtb2R1bGUpKVxuXHQvLyAgIH1cblx0Ly8gfVxuXHRcblx0Ly8gZnVuY3Rpb24gbGF6eUxvYWRDb21wb25lbnRzKGxhenlNb2R1bGVzKSB7ICBcblx0Ly8gICByZXR1cm4gKGxvY2F0aW9uLCBjYikgPT4ge1xuXHQvLyAgICAgY29uc3QgbW9kdWxlS2V5cyA9IE9iamVjdC5rZXlzKGxhenlNb2R1bGVzKTtcblx0Ly8gICAgIGNvbnN0IHByb21pc2VzID0gbW9kdWxlS2V5cy5tYXAoa2V5ID0+XG5cdC8vICAgICAgIG5ldyBQcm9taXNlKHJlc29sdmUgPT4gbGF6eU1vZHVsZXNba2V5XShyZXNvbHZlKSlcblx0Ly8gICAgIClcblx0XG5cdC8vICAgICBQcm9taXNlLmFsbChwcm9taXNlcykudGhlbihtb2R1bGVzID0+IHtcblx0Ly8gICAgICAgY2IobnVsbCwgbW9kdWxlcy5yZWR1Y2UoKG9iaiwgbW9kdWxlLCBpKSA9PiB7XG5cdC8vICAgICAgICAgb2JqW21vZHVsZUtleXNbaV1dID0gbW9kdWxlO1xuXHQvLyAgICAgICAgIHJldHVybiBvYmo7XG5cdC8vICAgICAgIH0sIHt9KSlcblx0Ly8gICAgIH0pXG5cdC8vICAgfVxuXHQvLyB9XG5cdFxuXHR2YXIgaXNSZWFjdENvbXBvbmVudCA9IGZ1bmN0aW9uIGlzUmVhY3RDb21wb25lbnQob2JqKSB7XG5cdCAgcmV0dXJuIEJvb2xlYW4ob2JqICYmIG9iai5wcm90b3R5cGUgJiYgQm9vbGVhbihvYmoucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQpKTtcblx0fTtcblx0XG5cdHZhciBjb21wb25lbnQgPSBmdW5jdGlvbiBjb21wb25lbnQoX2NvbXBvbmVudCkge1xuXHQgIHJldHVybiBpc1JlYWN0Q29tcG9uZW50KF9jb21wb25lbnQpID8geyBjb21wb25lbnQ6IF9jb21wb25lbnQgfSA6IHsgZ2V0Q29tcG9uZW50OiBmdW5jdGlvbiBnZXRDb21wb25lbnQobG9jLCBjYikge1xuXHQgICAgICByZXR1cm4gX2NvbXBvbmVudChmdW5jdGlvbiAoY29tcCkge1xuXHQgICAgICAgIHJldHVybiBjYihudWxsLCBjb21wLmRlZmF1bHQgfHwgY29tcCk7XG5cdCAgICAgIH0pO1xuXHQgICAgfSB9O1xuXHR9O1xuXHRcblx0dmFyIFJvdXRlcyA9IGZ1bmN0aW9uIFJvdXRlcyhfcmVmKSB7XG5cdCAgdmFyIGhpc3RvcnkgPSBfcmVmLmhpc3Rvcnk7XG5cdCAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuXHQgICAgX3JlYWN0Um91dGVyLlJvdXRlcixcblx0ICAgIHsgaGlzdG9yeTogaGlzdG9yeSB9LFxuXHQgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG5cdCAgICAgIF9yZWFjdFJvdXRlci5Sb3V0ZSxcblx0ICAgICAgeyBwYXRoOiAnLycsIGNvbXBvbmVudDogX0FwcDIuZGVmYXVsdCB9LFxuXHQgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3RSb3V0ZXIuSW5kZXhSb3V0ZSwgY29tcG9uZW50KF9Ib21lMi5kZWZhdWx0KSksXG5cdCAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdFJvdXRlci5Sb3V0ZSwgX2V4dGVuZHMoeyBwYXRoOiAnSG9tZScgfSwgY29tcG9uZW50KF9Ib21lMi5kZWZhdWx0KSkpLFxuXHQgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3RSb3V0ZXIuUm91dGUsIF9leHRlbmRzKHsgcGF0aDogJ0NvbmZpZycgfSwgY29tcG9uZW50KF9Db25maWcyLmRlZmF1bHQpKSlcblx0ICAgIClcblx0ICApO1xuXHR9O1xuXHRcblx0Um91dGVzLnByb3BUeXBlcyA9IHtcblx0ICBoaXN0b3J5OiBfcmVhY3QuUHJvcFR5cGVzLmFueVxuXHR9O1xuXHRcblx0ZXhwb3J0cy5kZWZhdWx0ID0gUm91dGVzO1xuXHRcblx0LyogUkVBQ1QgSE9UIExPQURFUiAqLyB9KS5jYWxsKHRoaXMpOyB9IGZpbmFsbHkgeyBpZiAoZmFsc2UpIHsgKGZ1bmN0aW9uICgpIHsgdmFyIGZvdW5kUmVhY3RDbGFzc2VzID0gbW9kdWxlLmhvdC5kYXRhICYmIG1vZHVsZS5ob3QuZGF0YS5mb3VuZFJlYWN0Q2xhc3NlcyB8fCBmYWxzZTsgaWYgKG1vZHVsZS5leHBvcnRzICYmIG1vZHVsZS5tYWtlSG90KSB7IHZhciBtYWtlRXhwb3J0c0hvdCA9IHJlcXVpcmUoXCJDOlxcXFxKYXlcXFxcV29ya3N0YXRpb25cXFxcUGVyc29uYWxcXFxcbGl1amlla20uZ2l0aHViLmlvXFxcXG5vZGVfbW9kdWxlc1xcXFxyZWFjdC1ob3QtbG9hZGVyXFxcXG1ha2VFeHBvcnRzSG90LmpzXCIpOyBpZiAobWFrZUV4cG9ydHNIb3QobW9kdWxlLCByZXF1aXJlKFwicmVhY3RcIikpKSB7IGZvdW5kUmVhY3RDbGFzc2VzID0gdHJ1ZTsgfSB2YXIgc2hvdWxkQWNjZXB0TW9kdWxlID0gdHJ1ZSAmJiBmb3VuZFJlYWN0Q2xhc3NlczsgaWYgKHNob3VsZEFjY2VwdE1vZHVsZSkgeyBtb2R1bGUuaG90LmFjY2VwdChmdW5jdGlvbiAoZXJyKSB7IGlmIChlcnIpIHsgY29uc29sZS5lcnJvcihcIkNhbm5vdCBhcHBseSBob3QgdXBkYXRlIHRvIFwiICsgXCJpbmRleC5qc1wiICsgXCI6IFwiICsgZXJyLm1lc3NhZ2UpOyB9IH0pOyB9IH0gbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uIChkYXRhKSB7IGRhdGEubWFrZUhvdCA9IG1vZHVsZS5tYWtlSG90OyBkYXRhLmZvdW5kUmVhY3RDbGFzc2VzID0gZm91bmRSZWFjdENsYXNzZXM7IH0pOyB9KSgpOyB9IH1cblxuLyoqKi8gfSxcblxuLyoqKi8gNjEwOlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyogUkVBQ1QgSE9UIExPQURFUiAqLyBpZiAoZmFsc2UpIHsgKGZ1bmN0aW9uICgpIHsgdmFyIFJlYWN0SG90QVBJID0gcmVxdWlyZShcIkM6XFxcXEpheVxcXFxXb3Jrc3RhdGlvblxcXFxQZXJzb25hbFxcXFxsaXVqaWVrbS5naXRodWIuaW9cXFxcbm9kZV9tb2R1bGVzXFxcXHJlYWN0LWhvdC1hcGlcXFxcbW9kdWxlc1xcXFxpbmRleC5qc1wiKSwgUm9vdEluc3RhbmNlUHJvdmlkZXIgPSByZXF1aXJlKFwiQzpcXFxcSmF5XFxcXFdvcmtzdGF0aW9uXFxcXFBlcnNvbmFsXFxcXGxpdWppZWttLmdpdGh1Yi5pb1xcXFxub2RlX21vZHVsZXNcXFxccmVhY3QtaG90LWxvYWRlclxcXFxSb290SW5zdGFuY2VQcm92aWRlci5qc1wiKSwgUmVhY3RNb3VudCA9IHJlcXVpcmUoXCJyZWFjdC1kb20vbGliL1JlYWN0TW91bnRcIiksIFJlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpOyBtb2R1bGUubWFrZUhvdCA9IG1vZHVsZS5ob3QuZGF0YSA/IG1vZHVsZS5ob3QuZGF0YS5tYWtlSG90IDogUmVhY3RIb3RBUEkoZnVuY3Rpb24gKCkgeyByZXR1cm4gUm9vdEluc3RhbmNlUHJvdmlkZXIuZ2V0Um9vdEluc3RhbmNlcyhSZWFjdE1vdW50KTsgfSwgUmVhY3QpOyB9KSgpOyB9IHRyeSB7IChmdW5jdGlvbiAoKSB7XG5cdFxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cdFxuXHR2YXIgX3JlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblx0XG5cdHZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXHRcblx0dmFyIF9NdWlUaGVtZVByb3ZpZGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0OTApO1xuXHRcblx0dmFyIF9NdWlUaGVtZVByb3ZpZGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX011aVRoZW1lUHJvdmlkZXIpO1xuXHRcblx0dmFyIF9kYXJrQmFzZVRoZW1lID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2MTEpO1xuXHRcblx0dmFyIF9kYXJrQmFzZVRoZW1lMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RhcmtCYXNlVGhlbWUpO1xuXHRcblx0dmFyIF9NYWluTGF5b3V0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2MTIpO1xuXHRcblx0dmFyIF9NYWluTGF5b3V0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX01haW5MYXlvdXQpO1xuXHRcblx0dmFyIF9jb2xvcnMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ5NSk7XG5cdFxuXHR2YXIgX2dldE11aVRoZW1lID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0OTEpO1xuXHRcblx0dmFyIF9nZXRNdWlUaGVtZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRNdWlUaGVtZSk7XG5cdFxuXHR2YXIgX2NvbG9yTWFuaXB1bGF0b3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQxNCk7XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXHRcblx0ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblx0XG5cdGZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXHRcblx0ZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cdFxuXHR2YXIgbXVpVGhlbWUgPSAoMCwgX2dldE11aVRoZW1lMi5kZWZhdWx0KSh7XG5cdCAgcGFsZXR0ZToge1xuXHQgICAgYWNjZW50MUNvbG9yOiBfY29sb3JzLmRlZXBPcmFuZ2U1MDAsXG5cdCAgICB0ZXh0Q29sb3I6IF9jb2xvcnMuZ3JleTUwMCxcblx0ICAgIHNoYWRvd0NvbG9yOiBfY29sb3JzLmdyZXk1MCxcblx0ICAgIGRpc2FibGVkQ29sb3I6ICgwLCBfY29sb3JNYW5pcHVsYXRvci5mYWRlKShfY29sb3JzLmRhcmtCbGFjaywgMC4zKSxcblx0ICAgIHBpY2tlckhlYWRlckNvbG9yOiBfY29sb3JzLmN5YW41MDAsXG5cdCAgICBjbG9ja0NpcmNsZUNvbG9yOiAoMCwgX2NvbG9yTWFuaXB1bGF0b3IuZmFkZSkoX2NvbG9ycy5kYXJrQmxhY2ssIDAuMDcpLFxuXHRcblx0ICAgIHByaW1hcnkxQ29sb3I6IF9jb2xvcnMuY3lhbjUwMCxcblx0ICAgIHByaW1hcnkyQ29sb3I6IF9jb2xvcnMuY3lhbjcwMCxcblx0ICAgIHByaW1hcnkzQ29sb3I6IF9jb2xvcnMuZ3JleTQwMCxcblx0XG5cdCAgICBhY2NlbnQyQ29sb3I6IF9jb2xvcnMuZ3JleTEwMCxcblx0ICAgIGFjY2VudDNDb2xvcjogX2NvbG9ycy5ncmV5NTAwLFxuXHRcblx0ICAgIGFsdGVybmF0ZVRleHRDb2xvcjogX2NvbG9ycy53aGl0ZSxcblx0ICAgIGNhbnZhc0NvbG9yOiBfY29sb3JzLndoaXRlLFxuXHQgICAgYm9yZGVyQ29sb3I6IF9jb2xvcnMuZ3JleTMwMFxuXHRcblx0ICB9LFxuXHQgIG1lbnU6IHtcblx0ICAgIGJhY2tncm91bmRDb2xvcjogX2NvbG9ycy53aGl0ZSxcblx0ICAgIGNvbnRhaW5lckJhY2tncm91bmRDb2xvcjogX2NvbG9ycy53aGl0ZVxuXHQgIH0sXG5cdCAgbWVudUl0ZW06IHtcblx0ICAgIGRhdGFIZWlnaHQ6IDQ4LFxuXHQgICAgaGVpZ2h0OiA1Mixcblx0ICAgIGhvdmVyQ29sb3I6ICgwLCBfY29sb3JNYW5pcHVsYXRvci5mYWRlKShfY29sb3JzLnJlZEEyMDAsIDAuMDM1KSxcblx0ICAgIHNlbGVjdGVkVGV4dENvbG9yOiBfY29sb3JzLnJlZEEyMDAsXG5cdFxuXHQgICAgcmlnaHRJY29uRGVza3RvcEZpbGw6IF9jb2xvcnMucmVkQTIwMFxuXHQgIH1cblx0fSk7XG5cdFxuXHR2YXIgQXBwID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcblx0ICBfaW5oZXJpdHMoQXBwLCBfQ29tcG9uZW50KTtcblx0XG5cdCAgZnVuY3Rpb24gQXBwKCkge1xuXHQgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEFwcCk7XG5cdFxuXHQgICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChBcHAuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihBcHApKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcblx0ICB9XG5cdFxuXHQgIF9jcmVhdGVDbGFzcyhBcHAsIFt7XG5cdCAgICBrZXk6ICdyZW5kZXInLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcblx0ICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuXHQgICAgICAgIF9NdWlUaGVtZVByb3ZpZGVyMi5kZWZhdWx0LFxuXHQgICAgICAgIHsgbXVpVGhlbWU6IG11aVRoZW1lIH0sXG5cdCAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG5cdCAgICAgICAgICBfTWFpbkxheW91dDIuZGVmYXVsdCxcblx0ICAgICAgICAgIG51bGwsXG5cdCAgICAgICAgICB0aGlzLnByb3BzLmNoaWxkcmVuXG5cdCAgICAgICAgKVxuXHQgICAgICApO1xuXHQgICAgfVxuXHQgIH1dKTtcblx0XG5cdCAgcmV0dXJuIEFwcDtcblx0fShfcmVhY3QuQ29tcG9uZW50KTtcblx0XG5cdGV4cG9ydHMuZGVmYXVsdCA9IEFwcDtcblx0XG5cdFxuXHRBcHAucHJvcFR5cGVzID0ge307XG5cdFxuXHQvKiBSRUFDVCBIT1QgTE9BREVSICovIH0pLmNhbGwodGhpcyk7IH0gZmluYWxseSB7IGlmIChmYWxzZSkgeyAoZnVuY3Rpb24gKCkgeyB2YXIgZm91bmRSZWFjdENsYXNzZXMgPSBtb2R1bGUuaG90LmRhdGEgJiYgbW9kdWxlLmhvdC5kYXRhLmZvdW5kUmVhY3RDbGFzc2VzIHx8IGZhbHNlOyBpZiAobW9kdWxlLmV4cG9ydHMgJiYgbW9kdWxlLm1ha2VIb3QpIHsgdmFyIG1ha2VFeHBvcnRzSG90ID0gcmVxdWlyZShcIkM6XFxcXEpheVxcXFxXb3Jrc3RhdGlvblxcXFxQZXJzb25hbFxcXFxsaXVqaWVrbS5naXRodWIuaW9cXFxcbm9kZV9tb2R1bGVzXFxcXHJlYWN0LWhvdC1sb2FkZXJcXFxcbWFrZUV4cG9ydHNIb3QuanNcIik7IGlmIChtYWtlRXhwb3J0c0hvdChtb2R1bGUsIHJlcXVpcmUoXCJyZWFjdFwiKSkpIHsgZm91bmRSZWFjdENsYXNzZXMgPSB0cnVlOyB9IHZhciBzaG91bGRBY2NlcHRNb2R1bGUgPSB0cnVlICYmIGZvdW5kUmVhY3RDbGFzc2VzOyBpZiAoc2hvdWxkQWNjZXB0TW9kdWxlKSB7IG1vZHVsZS5ob3QuYWNjZXB0KGZ1bmN0aW9uIChlcnIpIHsgaWYgKGVycikgeyBjb25zb2xlLmVycm9yKFwiQ2Fubm90IGFwcGx5IGhvdCB1cGRhdGUgdG8gXCIgKyBcIkFwcC5qc1wiICsgXCI6IFwiICsgZXJyLm1lc3NhZ2UpOyB9IH0pOyB9IH0gbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uIChkYXRhKSB7IGRhdGEubWFrZUhvdCA9IG1vZHVsZS5tYWtlSG90OyBkYXRhLmZvdW5kUmVhY3RDbGFzc2VzID0gZm91bmRSZWFjdENsYXNzZXM7IH0pOyB9KSgpOyB9IH1cblxuLyoqKi8gfSxcblxuLyoqKi8gNjExOlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgdmFsdWU6IHRydWVcblx0fSk7XG5cdFxuXHR2YXIgX2NvbG9ycyA9IF9fd2VicGFja19yZXF1aXJlX18oNDk1KTtcblx0XG5cdHZhciBfY29sb3JNYW5pcHVsYXRvciA9IF9fd2VicGFja19yZXF1aXJlX18oNDE0KTtcblx0XG5cdHZhciBfc3BhY2luZyA9IF9fd2VicGFja19yZXF1aXJlX18oNDk2KTtcblx0XG5cdHZhciBfc3BhY2luZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zcGFjaW5nKTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHRleHBvcnRzLmRlZmF1bHQgPSB7XG5cdCAgc3BhY2luZzogX3NwYWNpbmcyLmRlZmF1bHQsXG5cdCAgZm9udEZhbWlseTogJ1JvYm90bywgc2Fucy1zZXJpZicsXG5cdCAgcGFsZXR0ZToge1xuXHQgICAgcHJpbWFyeTFDb2xvcjogX2NvbG9ycy5jeWFuNzAwLFxuXHQgICAgcHJpbWFyeTJDb2xvcjogX2NvbG9ycy5jeWFuNzAwLFxuXHQgICAgcHJpbWFyeTNDb2xvcjogX2NvbG9ycy5ncmV5NjAwLFxuXHQgICAgYWNjZW50MUNvbG9yOiBfY29sb3JzLnBpbmtBMjAwLFxuXHQgICAgYWNjZW50MkNvbG9yOiBfY29sb3JzLnBpbmtBNDAwLFxuXHQgICAgYWNjZW50M0NvbG9yOiBfY29sb3JzLnBpbmtBMTAwLFxuXHQgICAgdGV4dENvbG9yOiBfY29sb3JzLmZ1bGxXaGl0ZSxcblx0ICAgIHNlY29uZGFyeVRleHRDb2xvcjogKDAsIF9jb2xvck1hbmlwdWxhdG9yLmZhZGUpKF9jb2xvcnMuZnVsbFdoaXRlLCAwLjcpLFxuXHQgICAgYWx0ZXJuYXRlVGV4dENvbG9yOiAnIzMwMzAzMCcsXG5cdCAgICBjYW52YXNDb2xvcjogJyMzMDMwMzAnLFxuXHQgICAgYm9yZGVyQ29sb3I6ICgwLCBfY29sb3JNYW5pcHVsYXRvci5mYWRlKShfY29sb3JzLmZ1bGxXaGl0ZSwgMC4zKSxcblx0ICAgIGRpc2FibGVkQ29sb3I6ICgwLCBfY29sb3JNYW5pcHVsYXRvci5mYWRlKShfY29sb3JzLmZ1bGxXaGl0ZSwgMC4zKSxcblx0ICAgIHBpY2tlckhlYWRlckNvbG9yOiAoMCwgX2NvbG9yTWFuaXB1bGF0b3IuZmFkZSkoX2NvbG9ycy5mdWxsV2hpdGUsIDAuMTIpLFxuXHQgICAgY2xvY2tDaXJjbGVDb2xvcjogKDAsIF9jb2xvck1hbmlwdWxhdG9yLmZhZGUpKF9jb2xvcnMuZnVsbFdoaXRlLCAwLjEyKVxuXHQgIH1cblx0fTtcblxuLyoqKi8gfSxcblxuLyoqKi8gNjEyOlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyogUkVBQ1QgSE9UIExPQURFUiAqLyBpZiAoZmFsc2UpIHsgKGZ1bmN0aW9uICgpIHsgdmFyIFJlYWN0SG90QVBJID0gcmVxdWlyZShcIkM6XFxcXEpheVxcXFxXb3Jrc3RhdGlvblxcXFxQZXJzb25hbFxcXFxsaXVqaWVrbS5naXRodWIuaW9cXFxcbm9kZV9tb2R1bGVzXFxcXHJlYWN0LWhvdC1hcGlcXFxcbW9kdWxlc1xcXFxpbmRleC5qc1wiKSwgUm9vdEluc3RhbmNlUHJvdmlkZXIgPSByZXF1aXJlKFwiQzpcXFxcSmF5XFxcXFdvcmtzdGF0aW9uXFxcXFBlcnNvbmFsXFxcXGxpdWppZWttLmdpdGh1Yi5pb1xcXFxub2RlX21vZHVsZXNcXFxccmVhY3QtaG90LWxvYWRlclxcXFxSb290SW5zdGFuY2VQcm92aWRlci5qc1wiKSwgUmVhY3RNb3VudCA9IHJlcXVpcmUoXCJyZWFjdC1kb20vbGliL1JlYWN0TW91bnRcIiksIFJlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpOyBtb2R1bGUubWFrZUhvdCA9IG1vZHVsZS5ob3QuZGF0YSA/IG1vZHVsZS5ob3QuZGF0YS5tYWtlSG90IDogUmVhY3RIb3RBUEkoZnVuY3Rpb24gKCkgeyByZXR1cm4gUm9vdEluc3RhbmNlUHJvdmlkZXIuZ2V0Um9vdEluc3RhbmNlcyhSZWFjdE1vdW50KTsgfSwgUmVhY3QpOyB9KSgpOyB9IHRyeSB7IChmdW5jdGlvbiAoKSB7XG5cdFxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICAgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0dmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblx0XG5cdHZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXHRcblx0dmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cdFxuXHR2YXIgX3JlYWN0Um91dGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNzkpO1xuXHRcblx0dmFyIF9Ub3BOYXYgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYxMyk7XG5cdFxuXHR2YXIgX1RvcE5hdjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Ub3BOYXYpO1xuXHRcblx0dmFyIF9Db250ZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2MzEpO1xuXHRcblx0dmFyIF9Db250ZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0NvbnRlbnQpO1xuXHRcblx0dmFyIF9EcmF3ZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ3MSk7XG5cdFxuXHR2YXIgX0RyYXdlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9EcmF3ZXIpO1xuXHRcblx0dmFyIF9BcHBCYXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIzNSk7XG5cdFxuXHR2YXIgX0FwcEJhcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9BcHBCYXIpO1xuXHRcblx0dmFyIF9MZWZ0TmF2ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2MzIpO1xuXHRcblx0dmFyIF9MZWZ0TmF2MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0xlZnROYXYpO1xuXHRcblx0dmFyIF9TZWxlY3RhYmxlTGlzdCA9IF9fd2VicGFja19yZXF1aXJlX18oNjM4KTtcblx0XG5cdHZhciBfU2VsZWN0YWJsZUxpc3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU2VsZWN0YWJsZUxpc3QpO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cdFxuXHRmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblx0XG5cdGZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXHRcblx0dmFyIE1haW5MYXlvdXQgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuXHQgICAgX2luaGVyaXRzKE1haW5MYXlvdXQsIF9Db21wb25lbnQpO1xuXHRcblx0ICAgIGZ1bmN0aW9uIE1haW5MYXlvdXQocHJvcHMpIHtcblx0ICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTWFpbkxheW91dCk7XG5cdFxuXHQgICAgICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChNYWluTGF5b3V0Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTWFpbkxheW91dCkpLmNhbGwodGhpcywgcHJvcHMpKTtcblx0XG5cdCAgICAgICAgX3RoaXMuc3RhdGUgPSB7IG9wZW46IHRydWUgfTtcblx0ICAgICAgICByZXR1cm4gX3RoaXM7XG5cdCAgICB9XG5cdFxuXHQgICAgX2NyZWF0ZUNsYXNzKE1haW5MYXlvdXQsIFt7XG5cdCAgICAgICAga2V5OiAncmVuZGVyJyxcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuXHRcblx0ICAgICAgICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuXHQgICAgICAgICAgICAgICAgJ2RpdicsXG5cdCAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogJ2FwcC1yb290JyB9LFxuXHQgICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG5cdCAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG5cdCAgICAgICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICd0b3AtbmF2LWFyZWEnIH0sXG5cdCAgICAgICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1RvcE5hdjIuZGVmYXVsdCwgbnVsbClcblx0ICAgICAgICAgICAgICAgICksXG5cdCAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcblx0ICAgICAgICAgICAgICAgICAgICAnZGl2Jyxcblx0ICAgICAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogJ2xlZnQtbmF2LWFyZWEnIH0sXG5cdCAgICAgICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1NlbGVjdGFibGVMaXN0Mi5kZWZhdWx0LCBudWxsKVxuXHQgICAgICAgICAgICAgICAgKSxcblx0ICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuXHQgICAgICAgICAgICAgICAgICAgIF9Db250ZW50Mi5kZWZhdWx0LFxuXHQgICAgICAgICAgICAgICAgICAgIG51bGwsXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5jaGlsZHJlblxuXHQgICAgICAgICAgICAgICAgKVxuXHQgICAgICAgICAgICApO1xuXHQgICAgICAgIH1cblx0ICAgIH1dKTtcblx0XG5cdCAgICByZXR1cm4gTWFpbkxheW91dDtcblx0fShfcmVhY3QuQ29tcG9uZW50KTtcblx0XG5cdGV4cG9ydHMuZGVmYXVsdCA9IE1haW5MYXlvdXQ7XG5cdFxuXHRcblx0TWFpbkxheW91dC5wcm9wVHlwZXMgPSB7fTtcblx0XG5cdC8qIFJFQUNUIEhPVCBMT0FERVIgKi8gfSkuY2FsbCh0aGlzKTsgfSBmaW5hbGx5IHsgaWYgKGZhbHNlKSB7IChmdW5jdGlvbiAoKSB7IHZhciBmb3VuZFJlYWN0Q2xhc3NlcyA9IG1vZHVsZS5ob3QuZGF0YSAmJiBtb2R1bGUuaG90LmRhdGEuZm91bmRSZWFjdENsYXNzZXMgfHwgZmFsc2U7IGlmIChtb2R1bGUuZXhwb3J0cyAmJiBtb2R1bGUubWFrZUhvdCkgeyB2YXIgbWFrZUV4cG9ydHNIb3QgPSByZXF1aXJlKFwiQzpcXFxcSmF5XFxcXFdvcmtzdGF0aW9uXFxcXFBlcnNvbmFsXFxcXGxpdWppZWttLmdpdGh1Yi5pb1xcXFxub2RlX21vZHVsZXNcXFxccmVhY3QtaG90LWxvYWRlclxcXFxtYWtlRXhwb3J0c0hvdC5qc1wiKTsgaWYgKG1ha2VFeHBvcnRzSG90KG1vZHVsZSwgcmVxdWlyZShcInJlYWN0XCIpKSkgeyBmb3VuZFJlYWN0Q2xhc3NlcyA9IHRydWU7IH0gdmFyIHNob3VsZEFjY2VwdE1vZHVsZSA9IHRydWUgJiYgZm91bmRSZWFjdENsYXNzZXM7IGlmIChzaG91bGRBY2NlcHRNb2R1bGUpIHsgbW9kdWxlLmhvdC5hY2NlcHQoZnVuY3Rpb24gKGVycikgeyBpZiAoZXJyKSB7IGNvbnNvbGUuZXJyb3IoXCJDYW5ub3QgYXBwbHkgaG90IHVwZGF0ZSB0byBcIiArIFwiTWFpbkxheW91dC5qc1wiICsgXCI6IFwiICsgZXJyLm1lc3NhZ2UpOyB9IH0pOyB9IH0gbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uIChkYXRhKSB7IGRhdGEubWFrZUhvdCA9IG1vZHVsZS5tYWtlSG90OyBkYXRhLmZvdW5kUmVhY3RDbGFzc2VzID0gZm91bmRSZWFjdENsYXNzZXM7IH0pOyB9KSgpOyB9IH1cblxuLyoqKi8gfSxcblxuLyoqKi8gNjEzOlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyogUkVBQ1QgSE9UIExPQURFUiAqLyBpZiAoZmFsc2UpIHsgKGZ1bmN0aW9uICgpIHsgdmFyIFJlYWN0SG90QVBJID0gcmVxdWlyZShcIkM6XFxcXEpheVxcXFxXb3Jrc3RhdGlvblxcXFxQZXJzb25hbFxcXFxsaXVqaWVrbS5naXRodWIuaW9cXFxcbm9kZV9tb2R1bGVzXFxcXHJlYWN0LWhvdC1hcGlcXFxcbW9kdWxlc1xcXFxpbmRleC5qc1wiKSwgUm9vdEluc3RhbmNlUHJvdmlkZXIgPSByZXF1aXJlKFwiQzpcXFxcSmF5XFxcXFdvcmtzdGF0aW9uXFxcXFBlcnNvbmFsXFxcXGxpdWppZWttLmdpdGh1Yi5pb1xcXFxub2RlX21vZHVsZXNcXFxccmVhY3QtaG90LWxvYWRlclxcXFxSb290SW5zdGFuY2VQcm92aWRlci5qc1wiKSwgUmVhY3RNb3VudCA9IHJlcXVpcmUoXCJyZWFjdC1kb20vbGliL1JlYWN0TW91bnRcIiksIFJlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpOyBtb2R1bGUubWFrZUhvdCA9IG1vZHVsZS5ob3QuZGF0YSA/IG1vZHVsZS5ob3QuZGF0YS5tYWtlSG90IDogUmVhY3RIb3RBUEkoZnVuY3Rpb24gKCkgeyByZXR1cm4gUm9vdEluc3RhbmNlUHJvdmlkZXIuZ2V0Um9vdEluc3RhbmNlcyhSZWFjdE1vdW50KTsgfSwgUmVhY3QpOyB9KSgpOyB9IHRyeSB7IChmdW5jdGlvbiAoKSB7XG5cdFxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cdFxuXHR2YXIgX3JlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblx0XG5cdHZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXHRcblx0dmFyIF9yZWFjdFJvdXRlciA9IF9fd2VicGFja19yZXF1aXJlX18oMTc5KTtcblx0XG5cdHZhciBfQXZhdGFyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MjApO1xuXHRcblx0dmFyIF9BdmF0YXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQXZhdGFyKTtcblx0XG5cdHZhciBfTXVpVGhlbWVQcm92aWRlciA9IF9fd2VicGFja19yZXF1aXJlX18oNDkwKTtcblx0XG5cdHZhciBfTXVpVGhlbWVQcm92aWRlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9NdWlUaGVtZVByb3ZpZGVyKTtcblx0XG5cdHZhciBfSWNvbk1lbnUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ4NCk7XG5cdFxuXHR2YXIgX0ljb25NZW51MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0ljb25NZW51KTtcblx0XG5cdHZhciBfSWNvbkJ1dHRvbiA9IF9fd2VicGFja19yZXF1aXJlX18oMzMzKTtcblx0XG5cdHZhciBfSWNvbkJ1dHRvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9JY29uQnV0dG9uKTtcblx0XG5cdHZhciBfRm9udEljb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM2Nik7XG5cdFxuXHR2YXIgX0ZvbnRJY29uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0ZvbnRJY29uKTtcblx0XG5cdHZhciBfZXhwYW5kTW9yZSA9IF9fd2VicGFja19yZXF1aXJlX18oNDE2KTtcblx0XG5cdHZhciBfZXhwYW5kTW9yZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leHBhbmRNb3JlKTtcblx0XG5cdHZhciBfTWVudUl0ZW0gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQwNSk7XG5cdFxuXHR2YXIgX01lbnVJdGVtMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX01lbnVJdGVtKTtcblx0XG5cdHZhciBfRHJvcERvd25NZW51ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0NzMpO1xuXHRcblx0dmFyIF9Ecm9wRG93bk1lbnUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfRHJvcERvd25NZW51KTtcblx0XG5cdHZhciBfUmFpc2VkQnV0dG9uID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1NDQpO1xuXHRcblx0dmFyIF9SYWlzZWRCdXR0b24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUmFpc2VkQnV0dG9uKTtcblx0XG5cdHZhciBfVG9vbGJhciA9IF9fd2VicGFja19yZXF1aXJlX18oNTk4KTtcblx0XG5cdHZhciBfZm9sZGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2MTQpO1xuXHRcblx0dmFyIF9mb2xkZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZm9sZGVyKTtcblx0XG5cdHZhciBfQmFkZ2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQyMik7XG5cdFxuXHR2YXIgX0JhZGdlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0JhZGdlKTtcblx0XG5cdHZhciBfRmxhdEJ1dHRvbiA9IF9fd2VicGFja19yZXF1aXJlX18oNDUzKTtcblx0XG5cdHZhciBfRmxhdEJ1dHRvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9GbGF0QnV0dG9uKTtcblx0XG5cdHZhciBfY2xvdWRVcGxvYWQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYxNSk7XG5cdFxuXHR2YXIgX2Nsb3VkVXBsb2FkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Nsb3VkVXBsb2FkKTtcblx0XG5cdHZhciBfZm9sZGVyT3BlbiA9IF9fd2VicGFja19yZXF1aXJlX18oNjE2KTtcblx0XG5cdHZhciBfZm9sZGVyT3BlbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9mb2xkZXJPcGVuKTtcblx0XG5cdHZhciBfbm90aWZpY2F0aW9ucyA9IF9fd2VicGFja19yZXF1aXJlX18oNjE3KTtcblx0XG5cdHZhciBfbm90aWZpY2F0aW9uczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9ub3RpZmljYXRpb25zKTtcblx0XG5cdHZhciBfVGV4dEZpZWxkID0gX193ZWJwYWNrX3JlcXVpcmVfXygzODYpO1xuXHRcblx0dmFyIF9UZXh0RmllbGQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfVGV4dEZpZWxkKTtcblx0XG5cdHZhciBfY29sb3JzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0OTUpO1xuXHRcblx0X193ZWJwYWNrX3JlcXVpcmVfXyg2MTgpO1xuXHRcblx0dmFyIF9Vc2VyQ29udHJvbCA9IF9fd2VicGFja19yZXF1aXJlX18oNjI3KTtcblx0XG5cdHZhciBfVXNlckNvbnRyb2wyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfVXNlckNvbnRyb2wpO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cdFxuXHRmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblx0XG5cdGZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXHRcblx0dmFyIHN0eWxlcyA9IHtcblx0ICBlcnJvclN0eWxlOiB7XG5cdCAgICBjb2xvcjogX2NvbG9ycy5vcmFuZ2U1MDBcblx0ICB9LFxuXHQgIHVuZGVybGluZVN0eWxlOiB7XG5cdCAgICBib3JkZXJDb2xvcjogX2NvbG9ycy5vcmFuZ2U1MDBcblx0ICB9LFxuXHQgIGZsb2F0aW5nTGFiZWxTdHlsZToge1xuXHQgICAgY29sb3I6IF9jb2xvcnMub3JhbmdlNTAwXG5cdCAgfSxcblx0ICBmbG9hdGluZ0xhYmVsRm9jdXNTdHlsZToge1xuXHQgICAgY29sb3I6IF9jb2xvcnMuYmx1ZTUwMFxuXHQgIH1cblx0fTtcblx0XG5cdHZhciBUb3BOYXYgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuXHQgIF9pbmhlcml0cyhUb3BOYXYsIF9SZWFjdCRDb21wb25lbnQpO1xuXHRcblx0ICBmdW5jdGlvbiBUb3BOYXYocHJvcHMpIHtcblx0ICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUb3BOYXYpO1xuXHRcblx0ICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChUb3BOYXYuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihUb3BOYXYpKS5jYWxsKHRoaXMsIHByb3BzKSk7XG5cdFxuXHQgICAgX3RoaXMuc3RhdGUgPSB7XG5cdCAgICAgIHZhbHVlOiAzXG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIF90aGlzO1xuXHQgIH1cblx0XG5cdCAgX2NyZWF0ZUNsYXNzKFRvcE5hdiwgW3tcblx0ICAgIGtleTogJ3JlbmRlcicsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuXHQgICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG5cdCAgICAgICAgX1Rvb2xiYXIuVG9vbGJhcixcblx0ICAgICAgICB7IHN0eWxlOiB7ICdiYWNrZ3JvdW5kQ29sb3InOiAnd2hpdGUnIH0gfSxcblx0ICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcblx0ICAgICAgICAgIF9Ub29sYmFyLlRvb2xiYXJHcm91cCxcblx0ICAgICAgICAgIHsgZmlyc3RDaGlsZDogdHJ1ZSB9LFxuXHQgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0ZsYXRCdXR0b24yLmRlZmF1bHQsIHtcblx0ICAgICAgICAgICAgbGFiZWw6ICdTY3J1bWFuIEh1YicsXG5cdCAgICAgICAgICAgIGhyZWY6ICcjJyxcblx0ICAgICAgICAgICAgc2Vjb25kYXJ5OiB0cnVlLFxuXHQgICAgICAgICAgICBpY29uOiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnaScsIHsgY2xhc3NOYW1lOiAnaWNvbi10aW1lIGljb24tMngnIH0pXG5cdCAgICAgICAgICB9KVxuXHQgICAgICAgICksXG5cdCAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG5cdCAgICAgICAgICBfVG9vbGJhci5Ub29sYmFyR3JvdXAsXG5cdCAgICAgICAgICBudWxsLFxuXHQgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG5cdCAgICAgICAgICAgICdkaXYnLFxuXHQgICAgICAgICAgICBudWxsLFxuXHQgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcblx0ICAgICAgICAgICAgICBfQmFkZ2UyLmRlZmF1bHQsXG5cdCAgICAgICAgICAgICAgeyBzdHlsZTogeyAnbWFyZ2luVG9wJzogJy0xNXB4JyB9LFxuXHQgICAgICAgICAgICAgICAgYmFkZ2VDb250ZW50OiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcblx0ICAgICAgICAgICAgICAgICAgX0ljb25CdXR0b24yLmRlZmF1bHQsXG5cdCAgICAgICAgICAgICAgICAgIHsgdG9vbHRpcDogJ0JhY2t1cCcgfSxcblx0ICAgICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2Nsb3VkVXBsb2FkMi5kZWZhdWx0LCBudWxsKVxuXHQgICAgICAgICAgICAgICAgKSxcblx0ICAgICAgICAgICAgICAgIGJhZGdlU3R5bGU6IHsgdG9wOiA4LCByaWdodDogOCB9XG5cdFxuXHQgICAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2ZvbGRlck9wZW4yLmRlZmF1bHQsIG51bGwpXG5cdCAgICAgICAgICAgICksXG5cdCAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuXHQgICAgICAgICAgICAgIF9CYWRnZTIuZGVmYXVsdCxcblx0ICAgICAgICAgICAgICB7IHN0eWxlOiB7ICdtYXJnaW5Ub3AnOiAnLTE1cHgnIH0sXG5cdCAgICAgICAgICAgICAgICBiYWRnZUNvbnRlbnQ6IDEwLFxuXHQgICAgICAgICAgICAgICAgc2Vjb25kYXJ5OiB0cnVlLFxuXHQgICAgICAgICAgICAgICAgYmFkZ2VTdHlsZTogeyB0b3A6IDI0LCByaWdodDogMjQsICd3aWR0aCc6ICcyMHB4JywgJ2hlaWdodCc6ICcyMHB4JyB9XG5cdCAgICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcblx0ICAgICAgICAgICAgICAgIF9JY29uQnV0dG9uMi5kZWZhdWx0LFxuXHQgICAgICAgICAgICAgICAgeyB0b29sdGlwOiAnTm90aWZpY2F0aW9ucycgfSxcblx0ICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ub3RpZmljYXRpb25zMi5kZWZhdWx0LCBudWxsKVxuXHQgICAgICAgICAgICAgIClcblx0ICAgICAgICAgICAgKVxuXHQgICAgICAgICAgKVxuXHQgICAgICAgICksXG5cdCAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG5cdCAgICAgICAgICBfVG9vbGJhci5Ub29sYmFyR3JvdXAsXG5cdCAgICAgICAgICB7IGxhc3RDaGlsZDogdHJ1ZSB9LFxuXHQgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1RleHRGaWVsZDIuZGVmYXVsdCwgeyBzdHlsZTogeyAnbWFyZ2luVG9wJzogJy0xNXB4JywgJ3dpZHRoJzogJzE1MHB4JyB9LFxuXHQgICAgICAgICAgICBmbG9hdGluZ0xhYmVsVGV4dDogJ1NlYXJjaCcsXG5cdCAgICAgICAgICAgIGZsb2F0aW5nTGFiZWxTdHlsZTogc3R5bGVzLmZsb2F0aW5nTGFiZWxTdHlsZSxcblx0ICAgICAgICAgICAgZmxvYXRpbmdMYWJlbEZvY3VzU3R5bGU6IHN0eWxlcy5mbG9hdGluZ0xhYmVsRm9jdXNTdHlsZVxuXHQgICAgICAgICAgfSksXG5cdCAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfQXZhdGFyMi5kZWZhdWx0LCB7IHNyYzogJy9zcmMvY29udGVudC9pbWcvdXNlci5qcGcnLCBzdHlsZTogeyBtYXJnaW5Ub3A6ICc3cHgnIH0gfSksXG5cdCAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfVXNlckNvbnRyb2wyLmRlZmF1bHQsIG51bGwpXG5cdCAgICAgICAgKVxuXHQgICAgICApO1xuXHQgICAgfVxuXHQgIH1dKTtcblx0XG5cdCAgcmV0dXJuIFRvcE5hdjtcblx0fShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTtcblx0XG5cdGV4cG9ydHMuZGVmYXVsdCA9IFRvcE5hdjtcblx0XG5cdC8qIFJFQUNUIEhPVCBMT0FERVIgKi8gfSkuY2FsbCh0aGlzKTsgfSBmaW5hbGx5IHsgaWYgKGZhbHNlKSB7IChmdW5jdGlvbiAoKSB7IHZhciBmb3VuZFJlYWN0Q2xhc3NlcyA9IG1vZHVsZS5ob3QuZGF0YSAmJiBtb2R1bGUuaG90LmRhdGEuZm91bmRSZWFjdENsYXNzZXMgfHwgZmFsc2U7IGlmIChtb2R1bGUuZXhwb3J0cyAmJiBtb2R1bGUubWFrZUhvdCkgeyB2YXIgbWFrZUV4cG9ydHNIb3QgPSByZXF1aXJlKFwiQzpcXFxcSmF5XFxcXFdvcmtzdGF0aW9uXFxcXFBlcnNvbmFsXFxcXGxpdWppZWttLmdpdGh1Yi5pb1xcXFxub2RlX21vZHVsZXNcXFxccmVhY3QtaG90LWxvYWRlclxcXFxtYWtlRXhwb3J0c0hvdC5qc1wiKTsgaWYgKG1ha2VFeHBvcnRzSG90KG1vZHVsZSwgcmVxdWlyZShcInJlYWN0XCIpKSkgeyBmb3VuZFJlYWN0Q2xhc3NlcyA9IHRydWU7IH0gdmFyIHNob3VsZEFjY2VwdE1vZHVsZSA9IHRydWUgJiYgZm91bmRSZWFjdENsYXNzZXM7IGlmIChzaG91bGRBY2NlcHRNb2R1bGUpIHsgbW9kdWxlLmhvdC5hY2NlcHQoZnVuY3Rpb24gKGVycikgeyBpZiAoZXJyKSB7IGNvbnNvbGUuZXJyb3IoXCJDYW5ub3QgYXBwbHkgaG90IHVwZGF0ZSB0byBcIiArIFwiVG9wTmF2LmpzXCIgKyBcIjogXCIgKyBlcnIubWVzc2FnZSk7IH0gfSk7IH0gfSBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24gKGRhdGEpIHsgZGF0YS5tYWtlSG90ID0gbW9kdWxlLm1ha2VIb3Q7IGRhdGEuZm91bmRSZWFjdENsYXNzZXMgPSBmb3VuZFJlYWN0Q2xhc3NlczsgfSk7IH0pKCk7IH0gfVxuXG4vKioqLyB9LFxuXG4vKioqLyA2MTQ6XG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXHRcblx0dmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cdFxuXHR2YXIgX3B1cmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM3MCk7XG5cdFxuXHR2YXIgX3B1cmUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHVyZSk7XG5cdFxuXHR2YXIgX1N2Z0ljb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM3OSk7XG5cdFxuXHR2YXIgX1N2Z0ljb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU3ZnSWNvbik7XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXHRcblx0dmFyIEZpbGVGb2xkZXIgPSBmdW5jdGlvbiBGaWxlRm9sZGVyKHByb3BzKSB7XG5cdCAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuXHQgICAgX1N2Z0ljb24yLmRlZmF1bHQsXG5cdCAgICBwcm9wcyxcblx0ICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdwYXRoJywgeyBkOiAnTTEwIDRINGMtMS4xIDAtMS45OS45LTEuOTkgMkwyIDE4YzAgMS4xLjkgMiAyIDJoMTZjMS4xIDAgMi0uOSAyLTJWOGMwLTEuMS0uOS0yLTItMmgtOGwtMi0yeicgfSlcblx0ICApO1xuXHR9O1xuXHRGaWxlRm9sZGVyID0gKDAsIF9wdXJlMi5kZWZhdWx0KShGaWxlRm9sZGVyKTtcblx0RmlsZUZvbGRlci5kaXNwbGF5TmFtZSA9ICdGaWxlRm9sZGVyJztcblx0RmlsZUZvbGRlci5tdWlOYW1lID0gJ1N2Z0ljb24nO1xuXHRcblx0ZXhwb3J0cy5kZWZhdWx0ID0gRmlsZUZvbGRlcjtcblxuLyoqKi8gfSxcblxuLyoqKi8gNjE1OlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgdmFsdWU6IHRydWVcblx0fSk7XG5cdFxuXHR2YXIgX3JlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblx0XG5cdHZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXHRcblx0dmFyIF9wdXJlID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNzApO1xuXHRcblx0dmFyIF9wdXJlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3B1cmUpO1xuXHRcblx0dmFyIF9TdmdJY29uID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNzkpO1xuXHRcblx0dmFyIF9TdmdJY29uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1N2Z0ljb24pO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdHZhciBGaWxlQ2xvdWRVcGxvYWQgPSBmdW5jdGlvbiBGaWxlQ2xvdWRVcGxvYWQocHJvcHMpIHtcblx0ICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG5cdCAgICBfU3ZnSWNvbjIuZGVmYXVsdCxcblx0ICAgIHByb3BzLFxuXHQgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ3BhdGgnLCB7IGQ6ICdNMTkuMzUgMTAuMDRDMTguNjcgNi41OSAxNS42NCA0IDEyIDQgOS4xMSA0IDYuNiA1LjY0IDUuMzUgOC4wNCAyLjM0IDguMzYgMCAxMC45MSAwIDE0YzAgMy4zMSAyLjY5IDYgNiA2aDEzYzIuNzYgMCA1LTIuMjQgNS01IDAtMi42NC0yLjA1LTQuNzgtNC42NS00Ljk2ek0xNCAxM3Y0aC00di00SDdsNS01IDUgNWgtM3onIH0pXG5cdCAgKTtcblx0fTtcblx0RmlsZUNsb3VkVXBsb2FkID0gKDAsIF9wdXJlMi5kZWZhdWx0KShGaWxlQ2xvdWRVcGxvYWQpO1xuXHRGaWxlQ2xvdWRVcGxvYWQuZGlzcGxheU5hbWUgPSAnRmlsZUNsb3VkVXBsb2FkJztcblx0RmlsZUNsb3VkVXBsb2FkLm11aU5hbWUgPSAnU3ZnSWNvbic7XG5cdFxuXHRleHBvcnRzLmRlZmF1bHQgPSBGaWxlQ2xvdWRVcGxvYWQ7XG5cbi8qKiovIH0sXG5cbi8qKiovIDYxNjpcbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0dmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cdFxuXHR2YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblx0XG5cdHZhciBfcHVyZSA9IF9fd2VicGFja19yZXF1aXJlX18oMzcwKTtcblx0XG5cdHZhciBfcHVyZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wdXJlKTtcblx0XG5cdHZhciBfU3ZnSWNvbiA9IF9fd2VicGFja19yZXF1aXJlX18oMzc5KTtcblx0XG5cdHZhciBfU3ZnSWNvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TdmdJY29uKTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHR2YXIgRmlsZUZvbGRlck9wZW4gPSBmdW5jdGlvbiBGaWxlRm9sZGVyT3Blbihwcm9wcykge1xuXHQgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcblx0ICAgIF9TdmdJY29uMi5kZWZhdWx0LFxuXHQgICAgcHJvcHMsXG5cdCAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgncGF0aCcsIHsgZDogJ00yMCA2aC04bC0yLTJINGMtMS4xIDAtMS45OS45LTEuOTkgMkwyIDE4YzAgMS4xLjkgMiAyIDJoMTZjMS4xIDAgMi0uOSAyLTJWOGMwLTEuMS0uOS0yLTItMnptMCAxMkg0VjhoMTZ2MTB6JyB9KVxuXHQgICk7XG5cdH07XG5cdEZpbGVGb2xkZXJPcGVuID0gKDAsIF9wdXJlMi5kZWZhdWx0KShGaWxlRm9sZGVyT3Blbik7XG5cdEZpbGVGb2xkZXJPcGVuLmRpc3BsYXlOYW1lID0gJ0ZpbGVGb2xkZXJPcGVuJztcblx0RmlsZUZvbGRlck9wZW4ubXVpTmFtZSA9ICdTdmdJY29uJztcblx0XG5cdGV4cG9ydHMuZGVmYXVsdCA9IEZpbGVGb2xkZXJPcGVuO1xuXG4vKioqLyB9LFxuXG4vKioqLyA2MTc6XG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXHRcblx0dmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cdFxuXHR2YXIgX3B1cmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM3MCk7XG5cdFxuXHR2YXIgX3B1cmUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHVyZSk7XG5cdFxuXHR2YXIgX1N2Z0ljb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM3OSk7XG5cdFxuXHR2YXIgX1N2Z0ljb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU3ZnSWNvbik7XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXHRcblx0dmFyIFNvY2lhbE5vdGlmaWNhdGlvbnMgPSBmdW5jdGlvbiBTb2NpYWxOb3RpZmljYXRpb25zKHByb3BzKSB7XG5cdCAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuXHQgICAgX1N2Z0ljb24yLmRlZmF1bHQsXG5cdCAgICBwcm9wcyxcblx0ICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdwYXRoJywgeyBkOiAnTTEyIDIyYzEuMSAwIDItLjkgMi0yaC00YzAgMS4xLjg5IDIgMiAyem02LTZ2LTVjMC0zLjA3LTEuNjQtNS42NC00LjUtNi4zMlY0YzAtLjgzLS42Ny0xLjUtMS41LTEuNXMtMS41LjY3LTEuNSAxLjV2LjY4QzcuNjMgNS4zNiA2IDcuOTIgNiAxMXY1bC0yIDJ2MWgxNnYtMWwtMi0yeicgfSlcblx0ICApO1xuXHR9O1xuXHRTb2NpYWxOb3RpZmljYXRpb25zID0gKDAsIF9wdXJlMi5kZWZhdWx0KShTb2NpYWxOb3RpZmljYXRpb25zKTtcblx0U29jaWFsTm90aWZpY2F0aW9ucy5kaXNwbGF5TmFtZSA9ICdTb2NpYWxOb3RpZmljYXRpb25zJztcblx0U29jaWFsTm90aWZpY2F0aW9ucy5tdWlOYW1lID0gJ1N2Z0ljb24nO1xuXHRcblx0ZXhwb3J0cy5kZWZhdWx0ID0gU29jaWFsTm90aWZpY2F0aW9ucztcblxuLyoqKi8gfSxcblxuLyoqKi8gNjE4OlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0Ly8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW5cblxuLyoqKi8gfSxcblxuLyoqKi8gNjI3OlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyogUkVBQ1QgSE9UIExPQURFUiAqLyBpZiAoZmFsc2UpIHsgKGZ1bmN0aW9uICgpIHsgdmFyIFJlYWN0SG90QVBJID0gcmVxdWlyZShcIkM6XFxcXEpheVxcXFxXb3Jrc3RhdGlvblxcXFxQZXJzb25hbFxcXFxsaXVqaWVrbS5naXRodWIuaW9cXFxcbm9kZV9tb2R1bGVzXFxcXHJlYWN0LWhvdC1hcGlcXFxcbW9kdWxlc1xcXFxpbmRleC5qc1wiKSwgUm9vdEluc3RhbmNlUHJvdmlkZXIgPSByZXF1aXJlKFwiQzpcXFxcSmF5XFxcXFdvcmtzdGF0aW9uXFxcXFBlcnNvbmFsXFxcXGxpdWppZWttLmdpdGh1Yi5pb1xcXFxub2RlX21vZHVsZXNcXFxccmVhY3QtaG90LWxvYWRlclxcXFxSb290SW5zdGFuY2VQcm92aWRlci5qc1wiKSwgUmVhY3RNb3VudCA9IHJlcXVpcmUoXCJyZWFjdC1kb20vbGliL1JlYWN0TW91bnRcIiksIFJlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpOyBtb2R1bGUubWFrZUhvdCA9IG1vZHVsZS5ob3QuZGF0YSA/IG1vZHVsZS5ob3QuZGF0YS5tYWtlSG90IDogUmVhY3RIb3RBUEkoZnVuY3Rpb24gKCkgeyByZXR1cm4gUm9vdEluc3RhbmNlUHJvdmlkZXIuZ2V0Um9vdEluc3RhbmNlcyhSZWFjdE1vdW50KTsgfSwgUmVhY3QpOyB9KSgpOyB9IHRyeSB7IChmdW5jdGlvbiAoKSB7XG5cdFxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXHRcblx0dmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cdFxuXHR2YXIgX0ljb25NZW51ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0ODQpO1xuXHRcblx0dmFyIF9JY29uTWVudTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9JY29uTWVudSk7XG5cdFxuXHR2YXIgX01lbnVJdGVtID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MDUpO1xuXHRcblx0dmFyIF9NZW51SXRlbTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9NZW51SXRlbSk7XG5cdFxuXHR2YXIgX0ljb25CdXR0b24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMzMyk7XG5cdFxuXHR2YXIgX0ljb25CdXR0b24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfSWNvbkJ1dHRvbik7XG5cdFxuXHR2YXIgX0RpdmlkZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQxOCk7XG5cdFxuXHR2YXIgX0RpdmlkZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfRGl2aWRlcik7XG5cdFxuXHR2YXIgX2ZpbGVEb3dubG9hZCA9IF9fd2VicGFja19yZXF1aXJlX18oNjI4KTtcblx0XG5cdHZhciBfZmlsZURvd25sb2FkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ZpbGVEb3dubG9hZCk7XG5cdFxuXHR2YXIgX25hdmlnYXRpb25BcnJvd0Ryb3BSaWdodCA9IF9fd2VicGFja19yZXF1aXJlX18oNjI5KTtcblx0XG5cdHZhciBfbmF2aWdhdGlvbkFycm93RHJvcFJpZ2h0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX25hdmlnYXRpb25BcnJvd0Ryb3BSaWdodCk7XG5cdFxuXHR2YXIgX21vcmVWZXJ0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2MzApO1xuXHRcblx0dmFyIF9tb3JlVmVydDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9tb3JlVmVydCk7XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXHRcblx0dmFyIFVzZXJDb250cm9sID0gZnVuY3Rpb24gVXNlckNvbnRyb2woKSB7XG5cdCAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuXHQgICAgJ2RpdicsXG5cdCAgICBudWxsLFxuXHQgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG5cdCAgICAgIF9JY29uTWVudTIuZGVmYXVsdCxcblx0ICAgICAge1xuXHQgICAgICAgIGljb25CdXR0b25FbGVtZW50OiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcblx0ICAgICAgICAgIF9JY29uQnV0dG9uMi5kZWZhdWx0LFxuXHQgICAgICAgICAgbnVsbCxcblx0ICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9tb3JlVmVydDIuZGVmYXVsdCwgbnVsbClcblx0ICAgICAgICApLFxuXHQgICAgICAgIGFuY2hvck9yaWdpbjogeyBob3Jpem9udGFsOiAnbGVmdCcsIHZlcnRpY2FsOiAndG9wJyB9LFxuXHQgICAgICAgIHRhcmdldE9yaWdpbjogeyBob3Jpem9udGFsOiAnbGVmdCcsIHZlcnRpY2FsOiAndG9wJyB9XG5cdCAgICAgIH0sXG5cdCAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9NZW51SXRlbTIuZGVmYXVsdCwge1xuXHQgICAgICAgIHByaW1hcnlUZXh0OiAnQ29weSAmIFBhc3RlJyxcblx0ICAgICAgICByaWdodEljb246IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9uYXZpZ2F0aW9uQXJyb3dEcm9wUmlnaHQyLmRlZmF1bHQsIG51bGwpLFxuXHQgICAgICAgIG1lbnVJdGVtczogW19yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9NZW51SXRlbTIuZGVmYXVsdCwgeyBwcmltYXJ5VGV4dDogJ0N1dCcgfSksIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9NZW51SXRlbTIuZGVmYXVsdCwgeyBwcmltYXJ5VGV4dDogJ0NvcHknIH0pLCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfRGl2aWRlcjIuZGVmYXVsdCwgbnVsbCksIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9NZW51SXRlbTIuZGVmYXVsdCwgeyBwcmltYXJ5VGV4dDogJ1Bhc3RlJyB9KV1cblx0ICAgICAgfSksXG5cdCAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9NZW51SXRlbTIuZGVmYXVsdCwge1xuXHQgICAgICAgIHByaW1hcnlUZXh0OiAnQ2FzZSBUb29scycsXG5cdCAgICAgICAgcmlnaHRJY29uOiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfbmF2aWdhdGlvbkFycm93RHJvcFJpZ2h0Mi5kZWZhdWx0LCBudWxsKSxcblx0ICAgICAgICBtZW51SXRlbXM6IFtfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfTWVudUl0ZW0yLmRlZmF1bHQsIHsgcHJpbWFyeVRleHQ6ICdVUFBFUkNBU0UnIH0pLCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfTWVudUl0ZW0yLmRlZmF1bHQsIHsgcHJpbWFyeVRleHQ6ICdsb3dlcmNhc2UnIH0pLCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfTWVudUl0ZW0yLmRlZmF1bHQsIHsgcHJpbWFyeVRleHQ6ICdDYW1lbENhc2UnIH0pLCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfTWVudUl0ZW0yLmRlZmF1bHQsIHsgcHJpbWFyeVRleHQ6ICdQcm9wZXJjYXNlJyB9KV1cblx0ICAgICAgfSksXG5cdCAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9EaXZpZGVyMi5kZWZhdWx0LCBudWxsKSxcblx0ICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX01lbnVJdGVtMi5kZWZhdWx0LCB7IHByaW1hcnlUZXh0OiAnRG93bmxvYWQnLCBsZWZ0SWNvbjogX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2ZpbGVEb3dubG9hZDIuZGVmYXVsdCwgbnVsbCkgfSksXG5cdCAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9EaXZpZGVyMi5kZWZhdWx0LCBudWxsKSxcblx0ICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX01lbnVJdGVtMi5kZWZhdWx0LCB7IHZhbHVlOiAnRGVsJywgcHJpbWFyeVRleHQ6ICdEZWxldGUnIH0pXG5cdCAgICApXG5cdCAgKTtcblx0fTtcblx0XG5cdGV4cG9ydHMuZGVmYXVsdCA9IFVzZXJDb250cm9sO1xuXHRcblx0LyogUkVBQ1QgSE9UIExPQURFUiAqLyB9KS5jYWxsKHRoaXMpOyB9IGZpbmFsbHkgeyBpZiAoZmFsc2UpIHsgKGZ1bmN0aW9uICgpIHsgdmFyIGZvdW5kUmVhY3RDbGFzc2VzID0gbW9kdWxlLmhvdC5kYXRhICYmIG1vZHVsZS5ob3QuZGF0YS5mb3VuZFJlYWN0Q2xhc3NlcyB8fCBmYWxzZTsgaWYgKG1vZHVsZS5leHBvcnRzICYmIG1vZHVsZS5tYWtlSG90KSB7IHZhciBtYWtlRXhwb3J0c0hvdCA9IHJlcXVpcmUoXCJDOlxcXFxKYXlcXFxcV29ya3N0YXRpb25cXFxcUGVyc29uYWxcXFxcbGl1amlla20uZ2l0aHViLmlvXFxcXG5vZGVfbW9kdWxlc1xcXFxyZWFjdC1ob3QtbG9hZGVyXFxcXG1ha2VFeHBvcnRzSG90LmpzXCIpOyBpZiAobWFrZUV4cG9ydHNIb3QobW9kdWxlLCByZXF1aXJlKFwicmVhY3RcIikpKSB7IGZvdW5kUmVhY3RDbGFzc2VzID0gdHJ1ZTsgfSB2YXIgc2hvdWxkQWNjZXB0TW9kdWxlID0gdHJ1ZSAmJiBmb3VuZFJlYWN0Q2xhc3NlczsgaWYgKHNob3VsZEFjY2VwdE1vZHVsZSkgeyBtb2R1bGUuaG90LmFjY2VwdChmdW5jdGlvbiAoZXJyKSB7IGlmIChlcnIpIHsgY29uc29sZS5lcnJvcihcIkNhbm5vdCBhcHBseSBob3QgdXBkYXRlIHRvIFwiICsgXCJVc2VyQ29udHJvbC5qc1wiICsgXCI6IFwiICsgZXJyLm1lc3NhZ2UpOyB9IH0pOyB9IH0gbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uIChkYXRhKSB7IGRhdGEubWFrZUhvdCA9IG1vZHVsZS5tYWtlSG90OyBkYXRhLmZvdW5kUmVhY3RDbGFzc2VzID0gZm91bmRSZWFjdENsYXNzZXM7IH0pOyB9KSgpOyB9IH1cblxuLyoqKi8gfSxcblxuLyoqKi8gNjI4OlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgdmFsdWU6IHRydWVcblx0fSk7XG5cdFxuXHR2YXIgX3JlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblx0XG5cdHZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXHRcblx0dmFyIF9wdXJlID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNzApO1xuXHRcblx0dmFyIF9wdXJlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3B1cmUpO1xuXHRcblx0dmFyIF9TdmdJY29uID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNzkpO1xuXHRcblx0dmFyIF9TdmdJY29uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1N2Z0ljb24pO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdHZhciBGaWxlRmlsZURvd25sb2FkID0gZnVuY3Rpb24gRmlsZUZpbGVEb3dubG9hZChwcm9wcykge1xuXHQgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcblx0ICAgIF9TdmdJY29uMi5kZWZhdWx0LFxuXHQgICAgcHJvcHMsXG5cdCAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgncGF0aCcsIHsgZDogJ00xOSA5aC00VjNIOXY2SDVsNyA3IDctN3pNNSAxOHYyaDE0di0ySDV6JyB9KVxuXHQgICk7XG5cdH07XG5cdEZpbGVGaWxlRG93bmxvYWQgPSAoMCwgX3B1cmUyLmRlZmF1bHQpKEZpbGVGaWxlRG93bmxvYWQpO1xuXHRGaWxlRmlsZURvd25sb2FkLmRpc3BsYXlOYW1lID0gJ0ZpbGVGaWxlRG93bmxvYWQnO1xuXHRGaWxlRmlsZURvd25sb2FkLm11aU5hbWUgPSAnU3ZnSWNvbic7XG5cdFxuXHRleHBvcnRzLmRlZmF1bHQgPSBGaWxlRmlsZURvd25sb2FkO1xuXG4vKioqLyB9LFxuXG4vKioqLyA2Mjk6XG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXHRcblx0dmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cdFxuXHR2YXIgX3B1cmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM3MCk7XG5cdFxuXHR2YXIgX3B1cmUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHVyZSk7XG5cdFxuXHR2YXIgX1N2Z0ljb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM3OSk7XG5cdFxuXHR2YXIgX1N2Z0ljb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU3ZnSWNvbik7XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXHRcblx0dmFyIE5hdmlnYXRpb25BcnJvd0Ryb3BSaWdodCA9IGZ1bmN0aW9uIE5hdmlnYXRpb25BcnJvd0Ryb3BSaWdodChwcm9wcykge1xuXHQgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcblx0ICAgIF9TdmdJY29uMi5kZWZhdWx0LFxuXHQgICAgcHJvcHMsXG5cdCAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgncGF0aCcsIHsgZDogJ005LjUsN2w1LDVsLTUsNVY3eicgfSlcblx0ICApO1xuXHR9O1xuXHRcblx0TmF2aWdhdGlvbkFycm93RHJvcFJpZ2h0ID0gKDAsIF9wdXJlMi5kZWZhdWx0KShOYXZpZ2F0aW9uQXJyb3dEcm9wUmlnaHQpO1xuXHROYXZpZ2F0aW9uQXJyb3dEcm9wUmlnaHQuZGlzcGxheU5hbWUgPSAnTmF2aWdhdGlvbkFycm93RHJvcFJpZ2h0Jztcblx0TmF2aWdhdGlvbkFycm93RHJvcFJpZ2h0Lm11aU5hbWUgPSAnU3ZnSWNvbic7XG5cdFxuXHRleHBvcnRzLmRlZmF1bHQgPSBOYXZpZ2F0aW9uQXJyb3dEcm9wUmlnaHQ7XG5cbi8qKiovIH0sXG5cbi8qKiovIDYzMDpcbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0dmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cdFxuXHR2YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblx0XG5cdHZhciBfcHVyZSA9IF9fd2VicGFja19yZXF1aXJlX18oMzcwKTtcblx0XG5cdHZhciBfcHVyZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wdXJlKTtcblx0XG5cdHZhciBfU3ZnSWNvbiA9IF9fd2VicGFja19yZXF1aXJlX18oMzc5KTtcblx0XG5cdHZhciBfU3ZnSWNvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TdmdJY29uKTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHR2YXIgTmF2aWdhdGlvbk1vcmVWZXJ0ID0gZnVuY3Rpb24gTmF2aWdhdGlvbk1vcmVWZXJ0KHByb3BzKSB7XG5cdCAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuXHQgICAgX1N2Z0ljb24yLmRlZmF1bHQsXG5cdCAgICBwcm9wcyxcblx0ICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdwYXRoJywgeyBkOiAnTTEyIDhjMS4xIDAgMi0uOSAyLTJzLS45LTItMi0yLTIgLjktMiAyIC45IDIgMiAyem0wIDJjLTEuMSAwLTIgLjktMiAycy45IDIgMiAyIDItLjkgMi0yLS45LTItMi0yem0wIDZjLTEuMSAwLTIgLjktMiAycy45IDIgMiAyIDItLjkgMi0yLS45LTItMi0yeicgfSlcblx0ICApO1xuXHR9O1xuXHROYXZpZ2F0aW9uTW9yZVZlcnQgPSAoMCwgX3B1cmUyLmRlZmF1bHQpKE5hdmlnYXRpb25Nb3JlVmVydCk7XG5cdE5hdmlnYXRpb25Nb3JlVmVydC5kaXNwbGF5TmFtZSA9ICdOYXZpZ2F0aW9uTW9yZVZlcnQnO1xuXHROYXZpZ2F0aW9uTW9yZVZlcnQubXVpTmFtZSA9ICdTdmdJY29uJztcblx0XG5cdGV4cG9ydHMuZGVmYXVsdCA9IE5hdmlnYXRpb25Nb3JlVmVydDtcblxuLyoqKi8gfSxcblxuLyoqKi8gNjMxOlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyogUkVBQ1QgSE9UIExPQURFUiAqLyBpZiAoZmFsc2UpIHsgKGZ1bmN0aW9uICgpIHsgdmFyIFJlYWN0SG90QVBJID0gcmVxdWlyZShcIkM6XFxcXEpheVxcXFxXb3Jrc3RhdGlvblxcXFxQZXJzb25hbFxcXFxsaXVqaWVrbS5naXRodWIuaW9cXFxcbm9kZV9tb2R1bGVzXFxcXHJlYWN0LWhvdC1hcGlcXFxcbW9kdWxlc1xcXFxpbmRleC5qc1wiKSwgUm9vdEluc3RhbmNlUHJvdmlkZXIgPSByZXF1aXJlKFwiQzpcXFxcSmF5XFxcXFdvcmtzdGF0aW9uXFxcXFBlcnNvbmFsXFxcXGxpdWppZWttLmdpdGh1Yi5pb1xcXFxub2RlX21vZHVsZXNcXFxccmVhY3QtaG90LWxvYWRlclxcXFxSb290SW5zdGFuY2VQcm92aWRlci5qc1wiKSwgUmVhY3RNb3VudCA9IHJlcXVpcmUoXCJyZWFjdC1kb20vbGliL1JlYWN0TW91bnRcIiksIFJlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpOyBtb2R1bGUubWFrZUhvdCA9IG1vZHVsZS5ob3QuZGF0YSA/IG1vZHVsZS5ob3QuZGF0YS5tYWtlSG90IDogUmVhY3RIb3RBUEkoZnVuY3Rpb24gKCkgeyByZXR1cm4gUm9vdEluc3RhbmNlUHJvdmlkZXIuZ2V0Um9vdEluc3RhbmNlcyhSZWFjdE1vdW50KTsgfSwgUmVhY3QpOyB9KSgpOyB9IHRyeSB7IChmdW5jdGlvbiAoKSB7XG5cdFxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICAgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0dmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblx0XG5cdHZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXHRcblx0dmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXHRcblx0ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblx0XG5cdGZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXHRcblx0ZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cdFxuXHR2YXIgQ29udGVudCA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG5cdCAgICBfaW5oZXJpdHMoQ29udGVudCwgX0NvbXBvbmVudCk7XG5cdFxuXHQgICAgZnVuY3Rpb24gQ29udGVudCgpIHtcblx0ICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ29udGVudCk7XG5cdFxuXHQgICAgICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoQ29udGVudC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKENvbnRlbnQpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcblx0ICAgIH1cblx0XG5cdCAgICBfY3JlYXRlQ2xhc3MoQ29udGVudCwgW3tcblx0ICAgICAgICBrZXk6ICdyZW5kZXInLFxuXHQgICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcblx0ICAgICAgICAgICAgICAgICdkaXYnLFxuXHQgICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdjb250ZW50JyB9LFxuXHQgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5jaGlsZHJlblxuXHQgICAgICAgICAgICApO1xuXHQgICAgICAgIH1cblx0ICAgIH1dKTtcblx0XG5cdCAgICByZXR1cm4gQ29udGVudDtcblx0fShfcmVhY3QuQ29tcG9uZW50KTtcblx0XG5cdENvbnRlbnQucHJvcFR5cGVzID0ge307XG5cdFxuXHRleHBvcnRzLmRlZmF1bHQgPSBDb250ZW50O1xuXHRcblx0LyogUkVBQ1QgSE9UIExPQURFUiAqLyB9KS5jYWxsKHRoaXMpOyB9IGZpbmFsbHkgeyBpZiAoZmFsc2UpIHsgKGZ1bmN0aW9uICgpIHsgdmFyIGZvdW5kUmVhY3RDbGFzc2VzID0gbW9kdWxlLmhvdC5kYXRhICYmIG1vZHVsZS5ob3QuZGF0YS5mb3VuZFJlYWN0Q2xhc3NlcyB8fCBmYWxzZTsgaWYgKG1vZHVsZS5leHBvcnRzICYmIG1vZHVsZS5tYWtlSG90KSB7IHZhciBtYWtlRXhwb3J0c0hvdCA9IHJlcXVpcmUoXCJDOlxcXFxKYXlcXFxcV29ya3N0YXRpb25cXFxcUGVyc29uYWxcXFxcbGl1amlla20uZ2l0aHViLmlvXFxcXG5vZGVfbW9kdWxlc1xcXFxyZWFjdC1ob3QtbG9hZGVyXFxcXG1ha2VFeHBvcnRzSG90LmpzXCIpOyBpZiAobWFrZUV4cG9ydHNIb3QobW9kdWxlLCByZXF1aXJlKFwicmVhY3RcIikpKSB7IGZvdW5kUmVhY3RDbGFzc2VzID0gdHJ1ZTsgfSB2YXIgc2hvdWxkQWNjZXB0TW9kdWxlID0gdHJ1ZSAmJiBmb3VuZFJlYWN0Q2xhc3NlczsgaWYgKHNob3VsZEFjY2VwdE1vZHVsZSkgeyBtb2R1bGUuaG90LmFjY2VwdChmdW5jdGlvbiAoZXJyKSB7IGlmIChlcnIpIHsgY29uc29sZS5lcnJvcihcIkNhbm5vdCBhcHBseSBob3QgdXBkYXRlIHRvIFwiICsgXCJDb250ZW50LmpzXCIgKyBcIjogXCIgKyBlcnIubWVzc2FnZSk7IH0gfSk7IH0gfSBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24gKGRhdGEpIHsgZGF0YS5tYWtlSG90ID0gbW9kdWxlLm1ha2VIb3Q7IGRhdGEuZm91bmRSZWFjdENsYXNzZXMgPSBmb3VuZFJlYWN0Q2xhc3NlczsgfSk7IH0pKCk7IH0gfVxuXG4vKioqLyB9LFxuXG4vKioqLyA2MzI6XG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKiBSRUFDVCBIT1QgTE9BREVSICovIGlmIChmYWxzZSkgeyAoZnVuY3Rpb24gKCkgeyB2YXIgUmVhY3RIb3RBUEkgPSByZXF1aXJlKFwiQzpcXFxcSmF5XFxcXFdvcmtzdGF0aW9uXFxcXFBlcnNvbmFsXFxcXGxpdWppZWttLmdpdGh1Yi5pb1xcXFxub2RlX21vZHVsZXNcXFxccmVhY3QtaG90LWFwaVxcXFxtb2R1bGVzXFxcXGluZGV4LmpzXCIpLCBSb290SW5zdGFuY2VQcm92aWRlciA9IHJlcXVpcmUoXCJDOlxcXFxKYXlcXFxcV29ya3N0YXRpb25cXFxcUGVyc29uYWxcXFxcbGl1amlla20uZ2l0aHViLmlvXFxcXG5vZGVfbW9kdWxlc1xcXFxyZWFjdC1ob3QtbG9hZGVyXFxcXFJvb3RJbnN0YW5jZVByb3ZpZGVyLmpzXCIpLCBSZWFjdE1vdW50ID0gcmVxdWlyZShcInJlYWN0LWRvbS9saWIvUmVhY3RNb3VudFwiKSwgUmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIik7IG1vZHVsZS5tYWtlSG90ID0gbW9kdWxlLmhvdC5kYXRhID8gbW9kdWxlLmhvdC5kYXRhLm1ha2VIb3QgOiBSZWFjdEhvdEFQSShmdW5jdGlvbiAoKSB7IHJldHVybiBSb290SW5zdGFuY2VQcm92aWRlci5nZXRSb290SW5zdGFuY2VzKFJlYWN0TW91bnQpOyB9LCBSZWFjdCk7IH0pKCk7IH0gdHJ5IHsgKGZ1bmN0aW9uICgpIHtcblx0XG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0dmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblx0XG5cdHZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXHRcblx0dmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cdFxuXHR2YXIgX1BhcGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXygzODEpO1xuXHRcblx0dmFyIF9QYXBlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9QYXBlcik7XG5cdFxuXHR2YXIgX01lbnUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM5OCk7XG5cdFxuXHR2YXIgX01lbnUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTWVudSk7XG5cdFxuXHR2YXIgX01lbnVJdGVtID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MDUpO1xuXHRcblx0dmFyIF9NZW51SXRlbTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9NZW51SXRlbSk7XG5cdFxuXHR2YXIgX3JlbW92ZVJlZEV5ZSA9IF9fd2VicGFja19yZXF1aXJlX18oNjMzKTtcblx0XG5cdHZhciBfcmVtb3ZlUmVkRXllMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlbW92ZVJlZEV5ZSk7XG5cdFxuXHR2YXIgX3BlcnNvbkFkZCA9IF9fd2VicGFja19yZXF1aXJlX18oNjM0KTtcblx0XG5cdHZhciBfcGVyc29uQWRkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3BlcnNvbkFkZCk7XG5cdFxuXHR2YXIgX2xpbmsgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYzNSk7XG5cdFxuXHR2YXIgX2xpbmsyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbGluayk7XG5cdFxuXHR2YXIgX0RpdmlkZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQxOCk7XG5cdFxuXHR2YXIgX0RpdmlkZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfRGl2aWRlcik7XG5cdFxuXHR2YXIgX2NvbnRlbnRDb3B5ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2MzYpO1xuXHRcblx0dmFyIF9jb250ZW50Q29weTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jb250ZW50Q29weSk7XG5cdFxuXHR2YXIgX2ZpbGVEb3dubG9hZCA9IF9fd2VicGFja19yZXF1aXJlX18oNjI4KTtcblx0XG5cdHZhciBfZmlsZURvd25sb2FkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ZpbGVEb3dubG9hZCk7XG5cdFxuXHR2YXIgX2RlbGV0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oNjM3KTtcblx0XG5cdHZhciBfZGVsZXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RlbGV0ZSk7XG5cdFxuXHR2YXIgX0ZvbnRJY29uID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNjYpO1xuXHRcblx0dmFyIF9Gb250SWNvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Gb250SWNvbik7XG5cdFxuXHR2YXIgX0xpc3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ4OCk7XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXHRcblx0ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblx0XG5cdGZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXHRcblx0ZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cdFxuXHR2YXIgc3R5bGUgPSB7XG5cdCAgcGFwZXI6IHtcblx0ICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuXHQgICAgZmxvYXQ6ICdsZWZ0Jyxcblx0ICAgIG1hcmdpbjogJzhweCAzMnB4IDE2cHggMTBweCcsXG5cdCAgICBiYWNrZ3JvdW5kQ29sb3I6ICdyZ2IoNDMsIDUzLCA2NSknXG5cdCAgfVxuXHR9O1xuXHRcblx0dmFyIGl0ZW1TdHlsZSA9IHsgJ2NvbG9yJzogJ3JnYigxMTcsIDExNywgMTE3KScgfTtcblx0XG5cdHZhciBMZWZ0TmF2ID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcblx0ICBfaW5oZXJpdHMoTGVmdE5hdiwgX0NvbXBvbmVudCk7XG5cdFxuXHQgIGZ1bmN0aW9uIExlZnROYXYoKSB7XG5cdCAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTGVmdE5hdik7XG5cdFxuXHQgICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChMZWZ0TmF2Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTGVmdE5hdikpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuXHQgIH1cblx0XG5cdCAgX2NyZWF0ZUNsYXNzKExlZnROYXYsIFt7XG5cdCAgICBrZXk6ICdoYW5kbGVOYXZpZ2F0b3InLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZU5hdmlnYXRvcihldmVudCwgdmFsdWUpIHtcblx0XG5cdCAgICAgIHRoaXMuY29udGV4dC5yb3V0ZXIucHVzaCh2YWx1ZSk7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnaGFuZGxlSXRlbVRvdWNoJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVJdGVtVG91Y2goZXZlbnQsIG1lbnVJdGVtLCBpbmRleCkge1xuXHRcblx0ICAgICAgLy9tZW51SXRlbS5wcm9wcy5zdHlsZT17J2JhY2tncm91bmRDb2xvcic6J3JnYig1NCw2NCw3NiknfTtcblx0XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAncmVuZGVyJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG5cdFxuXHQgICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG5cdCAgICAgICAgX1BhcGVyMi5kZWZhdWx0LFxuXHQgICAgICAgIHsgc3R5bGU6IHN0eWxlLnBhcGVyIH0sXG5cdCAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG5cdCAgICAgICAgICBfTWVudTIuZGVmYXVsdCxcblx0ICAgICAgICAgIHsgb25DaGFuZ2U6IHRoaXMuaGFuZGxlTmF2aWdhdG9yLmJpbmQodGhpcyksIG9uSXRlbVRvdWNoVGFwOiB0aGlzLmhhbmRsZUl0ZW1Ub3VjaC5iaW5kKHRoaXMpIH0sXG5cdCAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfTWVudUl0ZW0yLmRlZmF1bHQsIHsgdmFsdWU6ICdIb21lJywgcHJpbWFyeVRleHQ6ICdQcmV2aWV3JywgbGVmdEljb246IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZW1vdmVSZWRFeWUyLmRlZmF1bHQsIG51bGwpIH0pLFxuXHQgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX01lbnVJdGVtMi5kZWZhdWx0LCB7IHZhbHVlOiAnQ29uZmlnJywgcHJpbWFyeVRleHQ6ICdTaGFyZScsIGxlZnRJY29uOiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcGVyc29uQWRkMi5kZWZhdWx0LCBudWxsKSB9KSxcblx0ICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9NZW51SXRlbTIuZGVmYXVsdCwgeyB2YWx1ZTogMywgcHJpbWFyeVRleHQ6ICdHZXQgbGlua3MnLCBsZWZ0SWNvbjogX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2xpbmsyLmRlZmF1bHQsIG51bGwpIH0pLFxuXHQgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX01lbnVJdGVtMi5kZWZhdWx0LCB7IHZhbHVlOiA0LCBwcmltYXJ5VGV4dDogJ01ha2UgYSBjb3B5JywgbGVmdEljb246IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9jb250ZW50Q29weTIuZGVmYXVsdCwgbnVsbCkgfSksXG5cdCAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfTWVudUl0ZW0yLmRlZmF1bHQsIHsgdmFsdWU6IDUsIHByaW1hcnlUZXh0OiAnRG93bmxvYWQnLCBsZWZ0SWNvbjogX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2ZpbGVEb3dubG9hZDIuZGVmYXVsdCwgbnVsbCkgfSksXG5cdCAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfTWVudUl0ZW0yLmRlZmF1bHQsIHsgdmFsdWU6IDYsIHByaW1hcnlUZXh0OiAnUmVtb3ZlJywgbGVmdEljb246IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9kZWxldGUyLmRlZmF1bHQsIG51bGwpIH0pXG5cdCAgICAgICAgKVxuXHQgICAgICApO1xuXHQgICAgfVxuXHQgIH1dKTtcblx0XG5cdCAgcmV0dXJuIExlZnROYXY7XG5cdH0oX3JlYWN0LkNvbXBvbmVudCk7XG5cdFxuXHRMZWZ0TmF2LmNvbnRleHRUeXBlcyA9IHtcblx0ICByb3V0ZXI6IF9yZWFjdDIuZGVmYXVsdC5Qcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWRcblx0XG5cdH07XG5cdFxuXHRleHBvcnRzLmRlZmF1bHQgPSAoMCwgX0xpc3QubWFrZVNlbGVjdGFibGUpKExlZnROYXYpO1xuXHRcblx0LyogUkVBQ1QgSE9UIExPQURFUiAqLyB9KS5jYWxsKHRoaXMpOyB9IGZpbmFsbHkgeyBpZiAoZmFsc2UpIHsgKGZ1bmN0aW9uICgpIHsgdmFyIGZvdW5kUmVhY3RDbGFzc2VzID0gbW9kdWxlLmhvdC5kYXRhICYmIG1vZHVsZS5ob3QuZGF0YS5mb3VuZFJlYWN0Q2xhc3NlcyB8fCBmYWxzZTsgaWYgKG1vZHVsZS5leHBvcnRzICYmIG1vZHVsZS5tYWtlSG90KSB7IHZhciBtYWtlRXhwb3J0c0hvdCA9IHJlcXVpcmUoXCJDOlxcXFxKYXlcXFxcV29ya3N0YXRpb25cXFxcUGVyc29uYWxcXFxcbGl1amlla20uZ2l0aHViLmlvXFxcXG5vZGVfbW9kdWxlc1xcXFxyZWFjdC1ob3QtbG9hZGVyXFxcXG1ha2VFeHBvcnRzSG90LmpzXCIpOyBpZiAobWFrZUV4cG9ydHNIb3QobW9kdWxlLCByZXF1aXJlKFwicmVhY3RcIikpKSB7IGZvdW5kUmVhY3RDbGFzc2VzID0gdHJ1ZTsgfSB2YXIgc2hvdWxkQWNjZXB0TW9kdWxlID0gdHJ1ZSAmJiBmb3VuZFJlYWN0Q2xhc3NlczsgaWYgKHNob3VsZEFjY2VwdE1vZHVsZSkgeyBtb2R1bGUuaG90LmFjY2VwdChmdW5jdGlvbiAoZXJyKSB7IGlmIChlcnIpIHsgY29uc29sZS5lcnJvcihcIkNhbm5vdCBhcHBseSBob3QgdXBkYXRlIHRvIFwiICsgXCJMZWZ0TmF2LmpzXCIgKyBcIjogXCIgKyBlcnIubWVzc2FnZSk7IH0gfSk7IH0gfSBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24gKGRhdGEpIHsgZGF0YS5tYWtlSG90ID0gbW9kdWxlLm1ha2VIb3Q7IGRhdGEuZm91bmRSZWFjdENsYXNzZXMgPSBmb3VuZFJlYWN0Q2xhc3NlczsgfSk7IH0pKCk7IH0gfVxuXG4vKioqLyB9LFxuXG4vKioqLyA2MzM6XG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXHRcblx0dmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cdFxuXHR2YXIgX3B1cmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM3MCk7XG5cdFxuXHR2YXIgX3B1cmUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHVyZSk7XG5cdFxuXHR2YXIgX1N2Z0ljb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM3OSk7XG5cdFxuXHR2YXIgX1N2Z0ljb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU3ZnSWNvbik7XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXHRcblx0dmFyIEltYWdlUmVtb3ZlUmVkRXllID0gZnVuY3Rpb24gSW1hZ2VSZW1vdmVSZWRFeWUocHJvcHMpIHtcblx0ICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG5cdCAgICBfU3ZnSWNvbjIuZGVmYXVsdCxcblx0ICAgIHByb3BzLFxuXHQgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ3BhdGgnLCB7IGQ6ICdNMTIgNC41QzcgNC41IDIuNzMgNy42MSAxIDEyYzEuNzMgNC4zOSA2IDcuNSAxMSA3LjVzOS4yNy0zLjExIDExLTcuNWMtMS43My00LjM5LTYtNy41LTExLTcuNXpNMTIgMTdjLTIuNzYgMC01LTIuMjQtNS01czIuMjQtNSA1LTUgNSAyLjI0IDUgNS0yLjI0IDUtNSA1em0wLThjLTEuNjYgMC0zIDEuMzQtMyAzczEuMzQgMyAzIDMgMy0xLjM0IDMtMy0xLjM0LTMtMy0zeicgfSlcblx0ICApO1xuXHR9O1xuXHRJbWFnZVJlbW92ZVJlZEV5ZSA9ICgwLCBfcHVyZTIuZGVmYXVsdCkoSW1hZ2VSZW1vdmVSZWRFeWUpO1xuXHRJbWFnZVJlbW92ZVJlZEV5ZS5kaXNwbGF5TmFtZSA9ICdJbWFnZVJlbW92ZVJlZEV5ZSc7XG5cdEltYWdlUmVtb3ZlUmVkRXllLm11aU5hbWUgPSAnU3ZnSWNvbic7XG5cdFxuXHRleHBvcnRzLmRlZmF1bHQgPSBJbWFnZVJlbW92ZVJlZEV5ZTtcblxuLyoqKi8gfSxcblxuLyoqKi8gNjM0OlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgdmFsdWU6IHRydWVcblx0fSk7XG5cdFxuXHR2YXIgX3JlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblx0XG5cdHZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXHRcblx0dmFyIF9wdXJlID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNzApO1xuXHRcblx0dmFyIF9wdXJlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3B1cmUpO1xuXHRcblx0dmFyIF9TdmdJY29uID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNzkpO1xuXHRcblx0dmFyIF9TdmdJY29uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1N2Z0ljb24pO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdHZhciBTb2NpYWxQZXJzb25BZGQgPSBmdW5jdGlvbiBTb2NpYWxQZXJzb25BZGQocHJvcHMpIHtcblx0ICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG5cdCAgICBfU3ZnSWNvbjIuZGVmYXVsdCxcblx0ICAgIHByb3BzLFxuXHQgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ3BhdGgnLCB7IGQ6ICdNMTUgMTJjMi4yMSAwIDQtMS43OSA0LTRzLTEuNzktNC00LTQtNCAxLjc5LTQgNCAxLjc5IDQgNCA0em0tOS0yVjdINHYzSDF2MmgzdjNoMnYtM2gzdi0ySDZ6bTkgNGMtMi42NyAwLTggMS4zNC04IDR2MmgxNnYtMmMwLTIuNjYtNS4zMy00LTgtNHonIH0pXG5cdCAgKTtcblx0fTtcblx0U29jaWFsUGVyc29uQWRkID0gKDAsIF9wdXJlMi5kZWZhdWx0KShTb2NpYWxQZXJzb25BZGQpO1xuXHRTb2NpYWxQZXJzb25BZGQuZGlzcGxheU5hbWUgPSAnU29jaWFsUGVyc29uQWRkJztcblx0U29jaWFsUGVyc29uQWRkLm11aU5hbWUgPSAnU3ZnSWNvbic7XG5cdFxuXHRleHBvcnRzLmRlZmF1bHQgPSBTb2NpYWxQZXJzb25BZGQ7XG5cbi8qKiovIH0sXG5cbi8qKiovIDYzNTpcbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0dmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cdFxuXHR2YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblx0XG5cdHZhciBfcHVyZSA9IF9fd2VicGFja19yZXF1aXJlX18oMzcwKTtcblx0XG5cdHZhciBfcHVyZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wdXJlKTtcblx0XG5cdHZhciBfU3ZnSWNvbiA9IF9fd2VicGFja19yZXF1aXJlX18oMzc5KTtcblx0XG5cdHZhciBfU3ZnSWNvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TdmdJY29uKTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHR2YXIgQ29udGVudExpbmsgPSBmdW5jdGlvbiBDb250ZW50TGluayhwcm9wcykge1xuXHQgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcblx0ICAgIF9TdmdJY29uMi5kZWZhdWx0LFxuXHQgICAgcHJvcHMsXG5cdCAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgncGF0aCcsIHsgZDogJ00zLjkgMTJjMC0xLjcxIDEuMzktMy4xIDMuMS0zLjFoNFY3SDdjLTIuNzYgMC01IDIuMjQtNSA1czIuMjQgNSA1IDVoNHYtMS45SDdjLTEuNzEgMC0zLjEtMS4zOS0zLjEtMy4xek04IDEzaDh2LTJIOHYyem05LTZoLTR2MS45aDRjMS43MSAwIDMuMSAxLjM5IDMuMSAzLjFzLTEuMzkgMy4xLTMuMSAzLjFoLTRWMTdoNGMyLjc2IDAgNS0yLjI0IDUtNXMtMi4yNC01LTUtNXonIH0pXG5cdCAgKTtcblx0fTtcblx0Q29udGVudExpbmsgPSAoMCwgX3B1cmUyLmRlZmF1bHQpKENvbnRlbnRMaW5rKTtcblx0Q29udGVudExpbmsuZGlzcGxheU5hbWUgPSAnQ29udGVudExpbmsnO1xuXHRDb250ZW50TGluay5tdWlOYW1lID0gJ1N2Z0ljb24nO1xuXHRcblx0ZXhwb3J0cy5kZWZhdWx0ID0gQ29udGVudExpbms7XG5cbi8qKiovIH0sXG5cbi8qKiovIDYzNjpcbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0dmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cdFxuXHR2YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblx0XG5cdHZhciBfcHVyZSA9IF9fd2VicGFja19yZXF1aXJlX18oMzcwKTtcblx0XG5cdHZhciBfcHVyZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wdXJlKTtcblx0XG5cdHZhciBfU3ZnSWNvbiA9IF9fd2VicGFja19yZXF1aXJlX18oMzc5KTtcblx0XG5cdHZhciBfU3ZnSWNvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TdmdJY29uKTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHR2YXIgQ29udGVudENvbnRlbnRDb3B5ID0gZnVuY3Rpb24gQ29udGVudENvbnRlbnRDb3B5KHByb3BzKSB7XG5cdCAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuXHQgICAgX1N2Z0ljb24yLmRlZmF1bHQsXG5cdCAgICBwcm9wcyxcblx0ICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdwYXRoJywgeyBkOiAnTTE2IDFINGMtMS4xIDAtMiAuOS0yIDJ2MTRoMlYzaDEyVjF6bTMgNEg4Yy0xLjEgMC0yIC45LTIgMnYxNGMwIDEuMS45IDIgMiAyaDExYzEuMSAwIDItLjkgMi0yVjdjMC0xLjEtLjktMi0yLTJ6bTAgMTZIOFY3aDExdjE0eicgfSlcblx0ICApO1xuXHR9O1xuXHRDb250ZW50Q29udGVudENvcHkgPSAoMCwgX3B1cmUyLmRlZmF1bHQpKENvbnRlbnRDb250ZW50Q29weSk7XG5cdENvbnRlbnRDb250ZW50Q29weS5kaXNwbGF5TmFtZSA9ICdDb250ZW50Q29udGVudENvcHknO1xuXHRDb250ZW50Q29udGVudENvcHkubXVpTmFtZSA9ICdTdmdJY29uJztcblx0XG5cdGV4cG9ydHMuZGVmYXVsdCA9IENvbnRlbnRDb250ZW50Q29weTtcblxuLyoqKi8gfSxcblxuLyoqKi8gNjM3OlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgdmFsdWU6IHRydWVcblx0fSk7XG5cdFxuXHR2YXIgX3JlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblx0XG5cdHZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXHRcblx0dmFyIF9wdXJlID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNzApO1xuXHRcblx0dmFyIF9wdXJlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3B1cmUpO1xuXHRcblx0dmFyIF9TdmdJY29uID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNzkpO1xuXHRcblx0dmFyIF9TdmdJY29uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1N2Z0ljb24pO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdHZhciBBY3Rpb25EZWxldGUgPSBmdW5jdGlvbiBBY3Rpb25EZWxldGUocHJvcHMpIHtcblx0ICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG5cdCAgICBfU3ZnSWNvbjIuZGVmYXVsdCxcblx0ICAgIHByb3BzLFxuXHQgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ3BhdGgnLCB7IGQ6ICdNNiAxOWMwIDEuMS45IDIgMiAyaDhjMS4xIDAgMi0uOSAyLTJWN0g2djEyek0xOSA0aC0zLjVsLTEtMWgtNWwtMSAxSDV2MmgxNFY0eicgfSlcblx0ICApO1xuXHR9O1xuXHRBY3Rpb25EZWxldGUgPSAoMCwgX3B1cmUyLmRlZmF1bHQpKEFjdGlvbkRlbGV0ZSk7XG5cdEFjdGlvbkRlbGV0ZS5kaXNwbGF5TmFtZSA9ICdBY3Rpb25EZWxldGUnO1xuXHRBY3Rpb25EZWxldGUubXVpTmFtZSA9ICdTdmdJY29uJztcblx0XG5cdGV4cG9ydHMuZGVmYXVsdCA9IEFjdGlvbkRlbGV0ZTtcblxuLyoqKi8gfSxcblxuLyoqKi8gNjM4OlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyogUkVBQ1QgSE9UIExPQURFUiAqLyBpZiAoZmFsc2UpIHsgKGZ1bmN0aW9uICgpIHsgdmFyIFJlYWN0SG90QVBJID0gcmVxdWlyZShcIkM6XFxcXEpheVxcXFxXb3Jrc3RhdGlvblxcXFxQZXJzb25hbFxcXFxsaXVqaWVrbS5naXRodWIuaW9cXFxcbm9kZV9tb2R1bGVzXFxcXHJlYWN0LWhvdC1hcGlcXFxcbW9kdWxlc1xcXFxpbmRleC5qc1wiKSwgUm9vdEluc3RhbmNlUHJvdmlkZXIgPSByZXF1aXJlKFwiQzpcXFxcSmF5XFxcXFdvcmtzdGF0aW9uXFxcXFBlcnNvbmFsXFxcXGxpdWppZWttLmdpdGh1Yi5pb1xcXFxub2RlX21vZHVsZXNcXFxccmVhY3QtaG90LWxvYWRlclxcXFxSb290SW5zdGFuY2VQcm92aWRlci5qc1wiKSwgUmVhY3RNb3VudCA9IHJlcXVpcmUoXCJyZWFjdC1kb20vbGliL1JlYWN0TW91bnRcIiksIFJlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpOyBtb2R1bGUubWFrZUhvdCA9IG1vZHVsZS5ob3QuZGF0YSA/IG1vZHVsZS5ob3QuZGF0YS5tYWtlSG90IDogUmVhY3RIb3RBUEkoZnVuY3Rpb24gKCkgeyByZXR1cm4gUm9vdEluc3RhbmNlUHJvdmlkZXIuZ2V0Um9vdEluc3RhbmNlcyhSZWFjdE1vdW50KTsgfSwgUmVhY3QpOyB9KSgpOyB9IHRyeSB7IChmdW5jdGlvbiAoKSB7XG5cdFxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cdFxuXHR2YXIgX3JlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblx0XG5cdHZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXHRcblx0dmFyIF9MaXN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0ODgpO1xuXHRcblx0dmFyIF9BdmF0YXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQyMCk7XG5cdFxuXHR2YXIgX0F2YXRhcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9BdmF0YXIpO1xuXHRcblx0dmFyIF9TdWJoZWFkZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQwMik7XG5cdFxuXHR2YXIgX1N1YmhlYWRlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TdWJoZWFkZXIpO1xuXHRcblx0dmFyIF9jb250ZW50Q29weSA9IF9fd2VicGFja19yZXF1aXJlX18oNjM2KTtcblx0XG5cdHZhciBfY29udGVudENvcHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY29udGVudENvcHkpO1xuXHRcblx0dmFyIF9maWxlRG93bmxvYWQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYyOCk7XG5cdFxuXHR2YXIgX2ZpbGVEb3dubG9hZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9maWxlRG93bmxvYWQpO1xuXHRcblx0dmFyIF9kZWxldGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYzNyk7XG5cdFxuXHR2YXIgX2RlbGV0ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZWxldGUpO1xuXHRcblx0dmFyIF9Gb250SWNvbiA9IF9fd2VicGFja19yZXF1aXJlX18oMzY2KTtcblx0XG5cdHZhciBfRm9udEljb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfRm9udEljb24pO1xuXHRcblx0dmFyIF9yZW1vdmVSZWRFeWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYzMyk7XG5cdFxuXHR2YXIgX3JlbW92ZVJlZEV5ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZW1vdmVSZWRFeWUpO1xuXHRcblx0dmFyIF9wZXJzb25BZGQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYzNCk7XG5cdFxuXHR2YXIgX3BlcnNvbkFkZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wZXJzb25BZGQpO1xuXHRcblx0dmFyIF9saW5rID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2MzUpO1xuXHRcblx0dmFyIF9saW5rMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2xpbmspO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cdFxuXHRmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblx0XG5cdGZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXHRcblx0dmFyIGl0ZW1TdHlsZSA9IHsgJ2NvbG9yJzogJ3JnYigxMTcsIDExNywgMTE3KScgfTtcblx0XG5cdHZhciBTZWxlY3RhYmxlTGlzdCA9ICgwLCBfTGlzdC5tYWtlU2VsZWN0YWJsZSkoX0xpc3QuTGlzdCk7XG5cdFxuXHRmdW5jdGlvbiB3cmFwU3RhdGUoQ29tcG9zZWRDb21wb25lbnQpIHtcblx0ICByZXR1cm4gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcblx0ICAgIF9pbmhlcml0cyhTZWxlY3RhYmxlTGlzdCwgX0NvbXBvbmVudCk7XG5cdFxuXHQgICAgZnVuY3Rpb24gU2VsZWN0YWJsZUxpc3QoKSB7XG5cdCAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTZWxlY3RhYmxlTGlzdCk7XG5cdFxuXHQgICAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFNlbGVjdGFibGVMaXN0Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoU2VsZWN0YWJsZUxpc3QpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcblx0ICAgIH1cblx0XG5cdCAgICBfY3JlYXRlQ2xhc3MoU2VsZWN0YWJsZUxpc3QsIFt7XG5cdCAgICAgIGtleTogJ2NvbXBvbmVudFdpbGxNb3VudCcsXG5cdCAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG5cdCAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG5cdCAgICAgICAgICBzZWxlY3RlZEluZGV4OiB0aGlzLnByb3BzLmRlZmF1bHRWYWx1ZVxuXHQgICAgICAgIH0pO1xuXHQgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgIGtleTogJ2hhbmRsZVJlcXVlc3RDaGFuZ2UnLFxuXHQgICAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlUmVxdWVzdENoYW5nZShldmVudCwgaW5kZXgpIHtcblx0ICAgICAgICB0aGlzLnNldFN0YXRlKHtcblx0ICAgICAgICAgIHNlbGVjdGVkSW5kZXg6IGluZGV4XG5cdCAgICAgICAgfSk7XG5cdFxuXHQgICAgICAgIC8vJChldmVudC50YXJnZXQpLmNzcyh7J2NvbG9yJzoncmVkJ30pO1xuXHQgICAgICAgIHRoaXMuY29udGV4dC5yb3V0ZXIucHVzaChpbmRleCk7XG5cdCAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAga2V5OiAncmVuZGVyJyxcblx0ICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcblx0ICAgICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG5cdCAgICAgICAgICBDb21wb3NlZENvbXBvbmVudCxcblx0ICAgICAgICAgIHtcblx0ICAgICAgICAgICAgdmFsdWU6IHRoaXMuc3RhdGUuc2VsZWN0ZWRJbmRleCxcblx0ICAgICAgICAgICAgb25DaGFuZ2U6IHRoaXMuaGFuZGxlUmVxdWVzdENoYW5nZS5iaW5kKHRoaXMpXG5cdCAgICAgICAgICB9LFxuXHQgICAgICAgICAgdGhpcy5wcm9wcy5jaGlsZHJlblxuXHQgICAgICAgICk7XG5cdCAgICAgIH1cblx0ICAgIH1dKTtcblx0XG5cdCAgICByZXR1cm4gU2VsZWN0YWJsZUxpc3Q7XG5cdCAgfShfcmVhY3QuQ29tcG9uZW50KTtcblx0fVxuXHRcblx0U2VsZWN0YWJsZUxpc3QgPSB3cmFwU3RhdGUoU2VsZWN0YWJsZUxpc3QpO1xuXHRcblx0U2VsZWN0YWJsZUxpc3QuY29udGV4dFR5cGVzID0ge1xuXHQgIHJvdXRlcjogX3JlYWN0Mi5kZWZhdWx0LlByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZFxuXHR9O1xuXHRcblx0dmFyIExpc3RFeGFtcGxlU2VsZWN0YWJsZSA9IGZ1bmN0aW9uIChfQ29tcG9uZW50Mikge1xuXHQgIF9pbmhlcml0cyhMaXN0RXhhbXBsZVNlbGVjdGFibGUsIF9Db21wb25lbnQyKTtcblx0XG5cdCAgZnVuY3Rpb24gTGlzdEV4YW1wbGVTZWxlY3RhYmxlKCkge1xuXHQgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExpc3RFeGFtcGxlU2VsZWN0YWJsZSk7XG5cdFxuXHQgICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChMaXN0RXhhbXBsZVNlbGVjdGFibGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihMaXN0RXhhbXBsZVNlbGVjdGFibGUpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcblx0ICB9XG5cdFxuXHQgIF9jcmVhdGVDbGFzcyhMaXN0RXhhbXBsZVNlbGVjdGFibGUsIFt7XG5cdCAgICBrZXk6ICdyZW5kZXInLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcblx0ICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuXHQgICAgICAgIFNlbGVjdGFibGVMaXN0LFxuXHQgICAgICAgIHsgZGVmYXVsdFZhbHVlOiAnSG9tZScgfSxcblx0ICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcblx0ICAgICAgICAgIF9TdWJoZWFkZXIyLmRlZmF1bHQsXG5cdCAgICAgICAgICBudWxsLFxuXHQgICAgICAgICAgJyAgJ1xuXHQgICAgICAgICksXG5cdCAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0xpc3QuTGlzdEl0ZW0sIHtcblx0ICAgICAgICAgIHZhbHVlOiAnSG9tZScsXG5cdCAgICAgICAgICBwcmltYXJ5VGV4dDogJ1dpZGdldFxcdTkxNERcXHU3RjZFXFx1OTg3NVxcdTk3NjInLFxuXHQgICAgICAgICAgbGVmdEljb246IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZW1vdmVSZWRFeWUyLmRlZmF1bHQsIG51bGwpLFxuXHQgICAgICAgICAgc3R5bGU6IGl0ZW1TdHlsZVxuXHRcblx0ICAgICAgICB9KSxcblx0ICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfTGlzdC5MaXN0SXRlbSwge1xuXHQgICAgICAgICAgdmFsdWU6ICdDb25maWcnLFxuXHQgICAgICAgICAgcHJpbWFyeVRleHQ6ICdcXHU4MUVBXFx1NUI5QVxcdTRFNDlcXHU4ODY4XFx1NTM1NVxcdTk4NzVcXHU5NzYyJyxcblx0ICAgICAgICAgIGxlZnRJY29uOiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcGVyc29uQWRkMi5kZWZhdWx0LCBudWxsKSxcblx0ICAgICAgICAgIHN0eWxlOiBpdGVtU3R5bGVcblx0ICAgICAgICB9KSxcblx0ICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfTGlzdC5MaXN0SXRlbSwge1xuXHQgICAgICAgICAgdmFsdWU6IDQsXG5cdCAgICAgICAgICBwcmltYXJ5VGV4dDogJ05vdGhpbmcnLFxuXHQgICAgICAgICAgbGVmdEljb246IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9saW5rMi5kZWZhdWx0LCBudWxsKSxcblx0ICAgICAgICAgIHN0eWxlOiBpdGVtU3R5bGVcblx0ICAgICAgICB9KSxcblx0ICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfTGlzdC5MaXN0SXRlbSwge1xuXHQgICAgICAgICAgdmFsdWU6IDUsXG5cdCAgICAgICAgICBwcmltYXJ5VGV4dDogJ05vdGhpbmcnLFxuXHQgICAgICAgICAgbGVmdEljb246IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9jb250ZW50Q29weTIuZGVmYXVsdCwgbnVsbCksXG5cdCAgICAgICAgICBzdHlsZTogaXRlbVN0eWxlXG5cdCAgICAgICAgfSlcblx0ICAgICAgKTtcblx0ICAgIH1cblx0ICB9XSk7XG5cdFxuXHQgIHJldHVybiBMaXN0RXhhbXBsZVNlbGVjdGFibGU7XG5cdH0oX3JlYWN0LkNvbXBvbmVudCk7XG5cdFxuXHQ7XG5cdFxuXHRleHBvcnRzLmRlZmF1bHQgPSBMaXN0RXhhbXBsZVNlbGVjdGFibGU7XG5cdFxuXHQvKiBSRUFDVCBIT1QgTE9BREVSICovIH0pLmNhbGwodGhpcyk7IH0gZmluYWxseSB7IGlmIChmYWxzZSkgeyAoZnVuY3Rpb24gKCkgeyB2YXIgZm91bmRSZWFjdENsYXNzZXMgPSBtb2R1bGUuaG90LmRhdGEgJiYgbW9kdWxlLmhvdC5kYXRhLmZvdW5kUmVhY3RDbGFzc2VzIHx8IGZhbHNlOyBpZiAobW9kdWxlLmV4cG9ydHMgJiYgbW9kdWxlLm1ha2VIb3QpIHsgdmFyIG1ha2VFeHBvcnRzSG90ID0gcmVxdWlyZShcIkM6XFxcXEpheVxcXFxXb3Jrc3RhdGlvblxcXFxQZXJzb25hbFxcXFxsaXVqaWVrbS5naXRodWIuaW9cXFxcbm9kZV9tb2R1bGVzXFxcXHJlYWN0LWhvdC1sb2FkZXJcXFxcbWFrZUV4cG9ydHNIb3QuanNcIik7IGlmIChtYWtlRXhwb3J0c0hvdChtb2R1bGUsIHJlcXVpcmUoXCJyZWFjdFwiKSkpIHsgZm91bmRSZWFjdENsYXNzZXMgPSB0cnVlOyB9IHZhciBzaG91bGRBY2NlcHRNb2R1bGUgPSB0cnVlICYmIGZvdW5kUmVhY3RDbGFzc2VzOyBpZiAoc2hvdWxkQWNjZXB0TW9kdWxlKSB7IG1vZHVsZS5ob3QuYWNjZXB0KGZ1bmN0aW9uIChlcnIpIHsgaWYgKGVycikgeyBjb25zb2xlLmVycm9yKFwiQ2Fubm90IGFwcGx5IGhvdCB1cGRhdGUgdG8gXCIgKyBcIlNlbGVjdGFibGVMaXN0LmpzXCIgKyBcIjogXCIgKyBlcnIubWVzc2FnZSk7IH0gfSk7IH0gfSBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24gKGRhdGEpIHsgZGF0YS5tYWtlSG90ID0gbW9kdWxlLm1ha2VIb3Q7IGRhdGEuZm91bmRSZWFjdENsYXNzZXMgPSBmb3VuZFJlYWN0Q2xhc3NlczsgfSk7IH0pKCk7IH0gfVxuXG4vKioqLyB9LFxuXG4vKioqLyA2Mzk6XG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKiBSRUFDVCBIT1QgTE9BREVSICovIGlmIChmYWxzZSkgeyAoZnVuY3Rpb24gKCkgeyB2YXIgUmVhY3RIb3RBUEkgPSByZXF1aXJlKFwiQzpcXFxcSmF5XFxcXFdvcmtzdGF0aW9uXFxcXFBlcnNvbmFsXFxcXGxpdWppZWttLmdpdGh1Yi5pb1xcXFxub2RlX21vZHVsZXNcXFxccmVhY3QtaG90LWFwaVxcXFxtb2R1bGVzXFxcXGluZGV4LmpzXCIpLCBSb290SW5zdGFuY2VQcm92aWRlciA9IHJlcXVpcmUoXCJDOlxcXFxKYXlcXFxcV29ya3N0YXRpb25cXFxcUGVyc29uYWxcXFxcbGl1amlla20uZ2l0aHViLmlvXFxcXG5vZGVfbW9kdWxlc1xcXFxyZWFjdC1ob3QtbG9hZGVyXFxcXFJvb3RJbnN0YW5jZVByb3ZpZGVyLmpzXCIpLCBSZWFjdE1vdW50ID0gcmVxdWlyZShcInJlYWN0LWRvbS9saWIvUmVhY3RNb3VudFwiKSwgUmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIik7IG1vZHVsZS5tYWtlSG90ID0gbW9kdWxlLmhvdC5kYXRhID8gbW9kdWxlLmhvdC5kYXRhLm1ha2VIb3QgOiBSZWFjdEhvdEFQSShmdW5jdGlvbiAoKSB7IHJldHVybiBSb290SW5zdGFuY2VQcm92aWRlci5nZXRSb290SW5zdGFuY2VzKFJlYWN0TW91bnQpOyB9LCBSZWFjdCk7IH0pKCk7IH0gdHJ5IHsgKGZ1bmN0aW9uICgpIHtcblx0XG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY2IpIHtcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmUvKiBuc3VyZSAqLygxLCBmdW5jdGlvbiAocmVxdWlyZSkge1xuXHRcdFx0Y2IoX193ZWJwYWNrX3JlcXVpcmVfXyg2NDApKTtcblx0XHR9KTtcblx0fTtcblx0XG5cdC8qIFJFQUNUIEhPVCBMT0FERVIgKi8gfSkuY2FsbCh0aGlzKTsgfSBmaW5hbGx5IHsgaWYgKGZhbHNlKSB7IChmdW5jdGlvbiAoKSB7IHZhciBmb3VuZFJlYWN0Q2xhc3NlcyA9IG1vZHVsZS5ob3QuZGF0YSAmJiBtb2R1bGUuaG90LmRhdGEuZm91bmRSZWFjdENsYXNzZXMgfHwgZmFsc2U7IGlmIChtb2R1bGUuZXhwb3J0cyAmJiBtb2R1bGUubWFrZUhvdCkgeyB2YXIgbWFrZUV4cG9ydHNIb3QgPSByZXF1aXJlKFwiQzpcXFxcSmF5XFxcXFdvcmtzdGF0aW9uXFxcXFBlcnNvbmFsXFxcXGxpdWppZWttLmdpdGh1Yi5pb1xcXFxub2RlX21vZHVsZXNcXFxccmVhY3QtaG90LWxvYWRlclxcXFxtYWtlRXhwb3J0c0hvdC5qc1wiKTsgaWYgKG1ha2VFeHBvcnRzSG90KG1vZHVsZSwgcmVxdWlyZShcInJlYWN0XCIpKSkgeyBmb3VuZFJlYWN0Q2xhc3NlcyA9IHRydWU7IH0gdmFyIHNob3VsZEFjY2VwdE1vZHVsZSA9IHRydWUgJiYgZm91bmRSZWFjdENsYXNzZXM7IGlmIChzaG91bGRBY2NlcHRNb2R1bGUpIHsgbW9kdWxlLmhvdC5hY2NlcHQoZnVuY3Rpb24gKGVycikgeyBpZiAoZXJyKSB7IGNvbnNvbGUuZXJyb3IoXCJDYW5ub3QgYXBwbHkgaG90IHVwZGF0ZSB0byBcIiArIFwiSG9tZS5qc1wiICsgXCI6IFwiICsgZXJyLm1lc3NhZ2UpOyB9IH0pOyB9IH0gbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uIChkYXRhKSB7IGRhdGEubWFrZUhvdCA9IG1vZHVsZS5tYWtlSG90OyBkYXRhLmZvdW5kUmVhY3RDbGFzc2VzID0gZm91bmRSZWFjdENsYXNzZXM7IH0pOyB9KSgpOyB9IH1cblxuLyoqKi8gfSxcblxuLyoqKi8gMTA2NTpcbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qIFJFQUNUIEhPVCBMT0FERVIgKi8gaWYgKGZhbHNlKSB7IChmdW5jdGlvbiAoKSB7IHZhciBSZWFjdEhvdEFQSSA9IHJlcXVpcmUoXCJDOlxcXFxKYXlcXFxcV29ya3N0YXRpb25cXFxcUGVyc29uYWxcXFxcbGl1amlla20uZ2l0aHViLmlvXFxcXG5vZGVfbW9kdWxlc1xcXFxyZWFjdC1ob3QtYXBpXFxcXG1vZHVsZXNcXFxcaW5kZXguanNcIiksIFJvb3RJbnN0YW5jZVByb3ZpZGVyID0gcmVxdWlyZShcIkM6XFxcXEpheVxcXFxXb3Jrc3RhdGlvblxcXFxQZXJzb25hbFxcXFxsaXVqaWVrbS5naXRodWIuaW9cXFxcbm9kZV9tb2R1bGVzXFxcXHJlYWN0LWhvdC1sb2FkZXJcXFxcUm9vdEluc3RhbmNlUHJvdmlkZXIuanNcIiksIFJlYWN0TW91bnQgPSByZXF1aXJlKFwicmVhY3QtZG9tL2xpYi9SZWFjdE1vdW50XCIpLCBSZWFjdCA9IHJlcXVpcmUoXCJyZWFjdFwiKTsgbW9kdWxlLm1ha2VIb3QgPSBtb2R1bGUuaG90LmRhdGEgPyBtb2R1bGUuaG90LmRhdGEubWFrZUhvdCA6IFJlYWN0SG90QVBJKGZ1bmN0aW9uICgpIHsgcmV0dXJuIFJvb3RJbnN0YW5jZVByb3ZpZGVyLmdldFJvb3RJbnN0YW5jZXMoUmVhY3RNb3VudCk7IH0sIFJlYWN0KTsgfSkoKTsgfSB0cnkgeyAoZnVuY3Rpb24gKCkge1xuXHRcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjYikge1xuXHRcdF9fd2VicGFja19yZXF1aXJlX18uZS8qIG5zdXJlICovKDIsIGZ1bmN0aW9uIChyZXF1aXJlKSB7XG5cdFx0XHRjYihfX3dlYnBhY2tfcmVxdWlyZV9fKDEwNjYpKTtcblx0XHR9KTtcblx0fTtcblx0XG5cdC8qIFJFQUNUIEhPVCBMT0FERVIgKi8gfSkuY2FsbCh0aGlzKTsgfSBmaW5hbGx5IHsgaWYgKGZhbHNlKSB7IChmdW5jdGlvbiAoKSB7IHZhciBmb3VuZFJlYWN0Q2xhc3NlcyA9IG1vZHVsZS5ob3QuZGF0YSAmJiBtb2R1bGUuaG90LmRhdGEuZm91bmRSZWFjdENsYXNzZXMgfHwgZmFsc2U7IGlmIChtb2R1bGUuZXhwb3J0cyAmJiBtb2R1bGUubWFrZUhvdCkgeyB2YXIgbWFrZUV4cG9ydHNIb3QgPSByZXF1aXJlKFwiQzpcXFxcSmF5XFxcXFdvcmtzdGF0aW9uXFxcXFBlcnNvbmFsXFxcXGxpdWppZWttLmdpdGh1Yi5pb1xcXFxub2RlX21vZHVsZXNcXFxccmVhY3QtaG90LWxvYWRlclxcXFxtYWtlRXhwb3J0c0hvdC5qc1wiKTsgaWYgKG1ha2VFeHBvcnRzSG90KG1vZHVsZSwgcmVxdWlyZShcInJlYWN0XCIpKSkgeyBmb3VuZFJlYWN0Q2xhc3NlcyA9IHRydWU7IH0gdmFyIHNob3VsZEFjY2VwdE1vZHVsZSA9IHRydWUgJiYgZm91bmRSZWFjdENsYXNzZXM7IGlmIChzaG91bGRBY2NlcHRNb2R1bGUpIHsgbW9kdWxlLmhvdC5hY2NlcHQoZnVuY3Rpb24gKGVycikgeyBpZiAoZXJyKSB7IGNvbnNvbGUuZXJyb3IoXCJDYW5ub3QgYXBwbHkgaG90IHVwZGF0ZSB0byBcIiArIFwiQ29uZmlnLmpzXCIgKyBcIjogXCIgKyBlcnIubWVzc2FnZSk7IH0gfSk7IH0gfSBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24gKGRhdGEpIHsgZGF0YS5tYWtlSG90ID0gbW9kdWxlLm1ha2VIb3Q7IGRhdGEuZm91bmRSZWFjdENsYXNzZXMgPSBmb3VuZFJlYWN0Q2xhc3NlczsgfSk7IH0pKCk7IH0gfVxuXG4vKioqLyB9LFxuXG4vKioqLyAxMDY3OlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0Ly8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW5cblxuLyoqKi8gfSxcblxuLyoqKi8gMTA3MDpcbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdC8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5cbi8qKiovIH0sXG5cbi8qKiovIDEwNzI6XG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG4vKioqLyB9XG5cbn0pO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBpbmRleC5qcyIsIi8vIHNjcnVtYW4uY27nvZHnq5nlhaXlj6Pmlofku7ZcclxuaW1wb3J0IFJlYWN0LCB7IFByb3BUeXBlcyB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSAncmVhY3QtZG9tJ1xyXG5pbXBvcnQgeyBSb3V0ZXIsIGJyb3dzZXJIaXN0b3J5IH0gZnJvbSAncmVhY3Qtcm91dGVyJ1xyXG5pbXBvcnQgbXVpIGZyb20gJ21hdGVyaWFsLXVpJztcclxuaW1wb3J0IGluamVjdFRhcEV2ZW50UGx1Z2luIGZyb20gJ3JlYWN0LXRhcC1ldmVudC1wbHVnaW4nO1xyXG5pbXBvcnQgUm91dGVzIGZyb20gJy4vc3JjL3JvdXRlL2luZGV4J1xyXG5pbXBvcnQgJy4vc3JjL2NvbnRlbnQvY3NzL21haW4uY3NzJ1xyXG5pbXBvcnQgJ3JlYWN0LWdyaWQtbGF5b3V0L2Nzcy9zdHlsZXMuY3NzJ1xyXG5pbXBvcnQgJ3JlYWN0LXJlc2l6YWJsZS9jc3Mvc3R5bGVzLmNzcydcclxuXHJcbmluamVjdFRhcEV2ZW50UGx1Z2luKCk7XHJcblxyXG4vLyBjb25zdCByb290Um91dGUgPSB7XHJcbi8vICAgY29tcG9uZW50OiAnZGl2JyxcclxuLy8gICBjaGlsZFJvdXRlczogWyB7XHJcbi8vICAgICBwYXRoOiAnLycsXHJcbi8vICAgICBjb21wb25lbnQ6IHJlcXVpcmUoJy4vc3JjL2NvbW1vbi9BcHAnKSxcclxuLy8gICAgIGNoaWxkUm91dGVzOiBbXHJcbi8vICAgICAgIHJlcXVpcmUoJy4vc3JjL3JvdXRlcy9Ib21lJyksXHJcbi8vICAgICAgIHJlcXVpcmUoJy4vc3JjL3JvdXRlcy9Db25maWcnKVxyXG4gICBcclxuLy8gICAgIF1cclxuLy8gICB9IF1cclxuLy8gfVxyXG5cclxuXHJcbi8vPFJvdXRlciBoaXN0b3J5PXticm93c2VySGlzdG9yeX0gcm91dGVzPXtyb290Um91dGV9IC8+XHJcbnJlbmRlcig8Um91dGVzIGhpc3Rvcnk9e2Jyb3dzZXJIaXN0b3J5fSAvPixcclxuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jvb3QnKSk7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vaW5kZXguanMiLCJ2YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG52YXIgZGVmYXVsdENsaWNrUmVqZWN0aW9uU3RyYXRlZ3kgPSByZXF1aXJlKCcuL2RlZmF1bHRDbGlja1JlamVjdGlvblN0cmF0ZWd5Jyk7XG5cbnZhciBhbHJlYWR5SW5qZWN0ZWQgPSBmYWxzZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmplY3RUYXBFdmVudFBsdWdpbiAoc3RyYXRlZ3lPdmVycmlkZXMpIHtcbiAgc3RyYXRlZ3lPdmVycmlkZXMgPSBzdHJhdGVneU92ZXJyaWRlcyB8fCB7fVxuICB2YXIgc2hvdWxkUmVqZWN0Q2xpY2sgPSBzdHJhdGVneU92ZXJyaWRlcy5zaG91bGRSZWplY3RDbGljayB8fCBkZWZhdWx0Q2xpY2tSZWplY3Rpb25TdHJhdGVneTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGludmFyaWFudChcbiAgICAgICFhbHJlYWR5SW5qZWN0ZWQsXG4gICAgICAnaW5qZWN0VGFwRXZlbnRQbHVnaW4oKTogQ2FuIG9ubHkgYmUgY2FsbGVkIG9uY2UgcGVyIGFwcGxpY2F0aW9uIGxpZmVjeWNsZS5cXG5cXG5cXFxuSXQgaXMgcmVjb21tZW5kZWQgdG8gY2FsbCBpbmplY3RUYXBFdmVudFBsdWdpbigpIGp1c3QgYmVmb3JlIHlvdSBjYWxsIFxcXG5SZWFjdERPTS5yZW5kZXIoKS4gSWYgeW91IGFyZSB1c2luZyBhbiBleHRlcm5hbCBsaWJyYXJ5IHdoaWNoIGNhbGxzIGluamVjdFRhcEV2ZW50UGx1Z2luKCkgXFxcbml0c2VsZiwgcGxlYXNlIGNvbnRhY3QgdGhlIG1haW50YWluZXIgYXMgaXQgc2hvdWxkblxcJ3QgYmUgY2FsbGVkIGluIGxpYnJhcnkgY29kZSBhbmQgXFxcbnNob3VsZCBiZSBpbmplY3RlZCBieSB0aGUgYXBwbGljYXRpb24uJ1xuICAgIClcbiAgfVxuXG4gIGFscmVhZHlJbmplY3RlZCA9IHRydWU7XG5cbiAgcmVxdWlyZSgncmVhY3QtZG9tL2xpYi9FdmVudFBsdWdpbkh1YicpLmluamVjdGlvbi5pbmplY3RFdmVudFBsdWdpbnNCeU5hbWUoe1xuICAgICdUYXBFdmVudFBsdWdpbic6ICAgICAgIHJlcXVpcmUoJy4vVGFwRXZlbnRQbHVnaW4uanMnKShzaG91bGRSZWplY3RDbGljaylcbiAgfSk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0LXRhcC1ldmVudC1wbHVnaW4vc3JjL2luamVjdFRhcEV2ZW50UGx1Z2luLmpzXG4vLyBtb2R1bGUgaWQgPSA2MDNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihsYXN0VG91Y2hFdmVudCwgY2xpY2tUaW1lc3RhbXApIHtcbiAgaWYgKGxhc3RUb3VjaEV2ZW50ICYmIChjbGlja1RpbWVzdGFtcCAtIGxhc3RUb3VjaEV2ZW50KSA8IDc1MCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0LXRhcC1ldmVudC1wbHVnaW4vc3JjL2RlZmF1bHRDbGlja1JlamVjdGlvblN0cmF0ZWd5LmpzXG4vLyBtb2R1bGUgaWQgPSA2MDRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0IEZhY2Vib29rLCBJbmMuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFRhcEV2ZW50UGx1Z2luXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgRXZlbnRDb25zdGFudHMgPSByZXF1aXJlKCdyZWFjdC1kb20vbGliL0V2ZW50Q29uc3RhbnRzJyk7XG52YXIgRXZlbnRQbHVnaW5VdGlscyA9IHJlcXVpcmUoJ3JlYWN0LWRvbS9saWIvRXZlbnRQbHVnaW5VdGlscycpO1xudmFyIEV2ZW50UHJvcGFnYXRvcnMgPSByZXF1aXJlKCdyZWFjdC1kb20vbGliL0V2ZW50UHJvcGFnYXRvcnMnKTtcbnZhciBTeW50aGV0aWNVSUV2ZW50ID0gcmVxdWlyZSgncmVhY3QtZG9tL2xpYi9TeW50aGV0aWNVSUV2ZW50Jyk7XG52YXIgVG91Y2hFdmVudFV0aWxzID0gcmVxdWlyZSgnLi9Ub3VjaEV2ZW50VXRpbHMnKTtcbnZhciBWaWV3cG9ydE1ldHJpY3MgPSByZXF1aXJlKCdyZWFjdC1kb20vbGliL1ZpZXdwb3J0TWV0cmljcycpO1xuXG52YXIga2V5T2YgPSByZXF1aXJlKCdmYmpzL2xpYi9rZXlPZicpO1xudmFyIHRvcExldmVsVHlwZXMgPSBFdmVudENvbnN0YW50cy50b3BMZXZlbFR5cGVzO1xuXG52YXIgaXNTdGFydGlzaCA9IEV2ZW50UGx1Z2luVXRpbHMuaXNTdGFydGlzaDtcbnZhciBpc0VuZGlzaCA9IEV2ZW50UGx1Z2luVXRpbHMuaXNFbmRpc2g7XG5cbnZhciBpc1RvdWNoID0gZnVuY3Rpb24odG9wTGV2ZWxUeXBlKSB7XG4gIHZhciB0b3VjaFR5cGVzID0gW1xuICAgICd0b3BUb3VjaENhbmNlbCcsXG4gICAgJ3RvcFRvdWNoRW5kJyxcbiAgICAndG9wVG91Y2hTdGFydCcsXG4gICAgJ3RvcFRvdWNoTW92ZSdcbiAgXTtcbiAgcmV0dXJuIHRvdWNoVHlwZXMuaW5kZXhPZih0b3BMZXZlbFR5cGUpID49IDA7XG59XG5cbi8qKlxuICogTnVtYmVyIG9mIHBpeGVscyB0aGF0IGFyZSB0b2xlcmF0ZWQgaW4gYmV0d2VlbiBhIGB0b3VjaFN0YXJ0YCBhbmQgYHRvdWNoRW5kYFxuICogaW4gb3JkZXIgdG8gc3RpbGwgYmUgY29uc2lkZXJlZCBhICd0YXAnIGV2ZW50LlxuICovXG52YXIgdGFwTW92ZVRocmVzaG9sZCA9IDEwO1xudmFyIGlnbm9yZU1vdXNlVGhyZXNob2xkID0gNzUwO1xudmFyIHN0YXJ0Q29vcmRzID0ge3g6IG51bGwsIHk6IG51bGx9O1xudmFyIGxhc3RUb3VjaEV2ZW50ID0gbnVsbDtcblxudmFyIEF4aXMgPSB7XG4gIHg6IHtwYWdlOiAncGFnZVgnLCBjbGllbnQ6ICdjbGllbnRYJywgZW52U2Nyb2xsOiAnY3VycmVudFBhZ2VTY3JvbGxMZWZ0J30sXG4gIHk6IHtwYWdlOiAncGFnZVknLCBjbGllbnQ6ICdjbGllbnRZJywgZW52U2Nyb2xsOiAnY3VycmVudFBhZ2VTY3JvbGxUb3AnfVxufTtcblxuZnVuY3Rpb24gZ2V0QXhpc0Nvb3JkT2ZFdmVudChheGlzLCBuYXRpdmVFdmVudCkge1xuICB2YXIgc2luZ2xlVG91Y2ggPSBUb3VjaEV2ZW50VXRpbHMuZXh0cmFjdFNpbmdsZVRvdWNoKG5hdGl2ZUV2ZW50KTtcbiAgaWYgKHNpbmdsZVRvdWNoKSB7XG4gICAgcmV0dXJuIHNpbmdsZVRvdWNoW2F4aXMucGFnZV07XG4gIH1cbiAgcmV0dXJuIGF4aXMucGFnZSBpbiBuYXRpdmVFdmVudCA/XG4gICAgbmF0aXZlRXZlbnRbYXhpcy5wYWdlXSA6XG4gICAgbmF0aXZlRXZlbnRbYXhpcy5jbGllbnRdICsgVmlld3BvcnRNZXRyaWNzW2F4aXMuZW52U2Nyb2xsXTtcbn1cblxuZnVuY3Rpb24gZ2V0RGlzdGFuY2UoY29vcmRzLCBuYXRpdmVFdmVudCkge1xuICB2YXIgcGFnZVggPSBnZXRBeGlzQ29vcmRPZkV2ZW50KEF4aXMueCwgbmF0aXZlRXZlbnQpO1xuICB2YXIgcGFnZVkgPSBnZXRBeGlzQ29vcmRPZkV2ZW50KEF4aXMueSwgbmF0aXZlRXZlbnQpO1xuICByZXR1cm4gTWF0aC5wb3coXG4gICAgTWF0aC5wb3cocGFnZVggLSBjb29yZHMueCwgMikgKyBNYXRoLnBvdyhwYWdlWSAtIGNvb3Jkcy55LCAyKSxcbiAgICAwLjVcbiAgKTtcbn1cblxudmFyIHRvdWNoRXZlbnRzID0gW1xuICAndG9wVG91Y2hTdGFydCcsXG4gICd0b3BUb3VjaENhbmNlbCcsXG4gICd0b3BUb3VjaEVuZCcsXG4gICd0b3BUb3VjaE1vdmUnLFxuXTtcblxudmFyIGRlcGVuZGVuY2llcyA9IFtcbiAgJ3RvcE1vdXNlRG93bicsXG4gICd0b3BNb3VzZU1vdmUnLFxuICAndG9wTW91c2VVcCcsXG5dLmNvbmNhdCh0b3VjaEV2ZW50cyk7XG5cbnZhciBldmVudFR5cGVzID0ge1xuICB0b3VjaFRhcDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7b25Ub3VjaFRhcDogbnVsbH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvblRvdWNoVGFwQ2FwdHVyZTogbnVsbH0pXG4gICAgfSxcbiAgICBkZXBlbmRlbmNpZXM6IGRlcGVuZGVuY2llc1xuICB9XG59O1xuXG52YXIgbm93ID0gKGZ1bmN0aW9uKCkge1xuICBpZiAoRGF0ZS5ub3cpIHtcbiAgICByZXR1cm4gRGF0ZS5ub3c7XG4gIH0gZWxzZSB7XG4gICAgLy8gSUU4IHN1cHBvcnQ6IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvOTQzMDM1Ny9wbGVhc2UtZXhwbGFpbi13aHktYW5kLWhvdy1uZXctZGF0ZS13b3Jrcy1hcy13b3JrYXJvdW5kLWZvci1kYXRlLW5vdy1pblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gK25ldyBEYXRlO1xuICAgIH1cbiAgfVxufSkoKTtcblxuZnVuY3Rpb24gY3JlYXRlVGFwRXZlbnRQbHVnaW4oc2hvdWxkUmVqZWN0Q2xpY2spIHtcbiAgcmV0dXJuIHtcblxuICAgIHRhcE1vdmVUaHJlc2hvbGQ6IHRhcE1vdmVUaHJlc2hvbGQsXG5cbiAgICBpZ25vcmVNb3VzZVRocmVzaG9sZDogaWdub3JlTW91c2VUaHJlc2hvbGQsXG5cbiAgICBldmVudFR5cGVzOiBldmVudFR5cGVzLFxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZSBSZWNvcmQgZnJvbSBgRXZlbnRDb25zdGFudHNgLlxuICAgICAqIEBwYXJhbSB7RE9NRXZlbnRUYXJnZXR9IHRhcmdldEluc3QgVGhlIGxpc3RlbmluZyBjb21wb25lbnQgcm9vdCBub2RlLlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAgICAgKiBAcmV0dXJuIHsqfSBBbiBhY2N1bXVsYXRpb24gb2Ygc3ludGhldGljIGV2ZW50cy5cbiAgICAgKiBAc2VlIHtFdmVudFBsdWdpbkh1Yi5leHRyYWN0RXZlbnRzfVxuICAgICAqL1xuICAgIGV4dHJhY3RFdmVudHM6IGZ1bmN0aW9uKFxuICAgICAgdG9wTGV2ZWxUeXBlLFxuICAgICAgdGFyZ2V0SW5zdCxcbiAgICAgIG5hdGl2ZUV2ZW50LFxuICAgICAgbmF0aXZlRXZlbnRUYXJnZXRcbiAgICApIHtcblxuICAgICAgaWYgKCFpc1N0YXJ0aXNoKHRvcExldmVsVHlwZSkgJiYgIWlzRW5kaXNoKHRvcExldmVsVHlwZSkpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc1RvdWNoKHRvcExldmVsVHlwZSkpIHtcbiAgICAgICAgbGFzdFRvdWNoRXZlbnQgPSBub3coKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChzaG91bGRSZWplY3RDbGljayhsYXN0VG91Y2hFdmVudCwgbm93KCkpKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIGV2ZW50ID0gbnVsbDtcbiAgICAgIHZhciBkaXN0YW5jZSA9IGdldERpc3RhbmNlKHN0YXJ0Q29vcmRzLCBuYXRpdmVFdmVudCk7XG4gICAgICBpZiAoaXNFbmRpc2godG9wTGV2ZWxUeXBlKSAmJiBkaXN0YW5jZSA8IHRhcE1vdmVUaHJlc2hvbGQpIHtcbiAgICAgICAgZXZlbnQgPSBTeW50aGV0aWNVSUV2ZW50LmdldFBvb2xlZChcbiAgICAgICAgICBldmVudFR5cGVzLnRvdWNoVGFwLFxuICAgICAgICAgIHRhcmdldEluc3QsXG4gICAgICAgICAgbmF0aXZlRXZlbnQsXG4gICAgICAgICAgbmF0aXZlRXZlbnRUYXJnZXRcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1N0YXJ0aXNoKHRvcExldmVsVHlwZSkpIHtcbiAgICAgICAgc3RhcnRDb29yZHMueCA9IGdldEF4aXNDb29yZE9mRXZlbnQoQXhpcy54LCBuYXRpdmVFdmVudCk7XG4gICAgICAgIHN0YXJ0Q29vcmRzLnkgPSBnZXRBeGlzQ29vcmRPZkV2ZW50KEF4aXMueSwgbmF0aXZlRXZlbnQpO1xuICAgICAgfSBlbHNlIGlmIChpc0VuZGlzaCh0b3BMZXZlbFR5cGUpKSB7XG4gICAgICAgIHN0YXJ0Q29vcmRzLnggPSAwO1xuICAgICAgICBzdGFydENvb3Jkcy55ID0gMDtcbiAgICAgIH1cbiAgICAgIEV2ZW50UHJvcGFnYXRvcnMuYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlcyhldmVudCk7XG4gICAgICByZXR1cm4gZXZlbnQ7XG4gICAgfVxuXG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlVGFwRXZlbnRQbHVnaW47XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3QtdGFwLWV2ZW50LXBsdWdpbi9zcmMvVGFwRXZlbnRQbHVnaW4uanNcbi8vIG1vZHVsZSBpZCA9IDYwNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFR5cGVzIG9mIHJhdyBzaWduYWxzIGZyb20gdGhlIGJyb3dzZXIgY2F1Z2h0IGF0IHRoZSB0b3AgbGV2ZWwuXG4gKi9cbnZhciB0b3BMZXZlbFR5cGVzID0ge1xuICB0b3BBYm9ydDogbnVsbCxcbiAgdG9wQW5pbWF0aW9uRW5kOiBudWxsLFxuICB0b3BBbmltYXRpb25JdGVyYXRpb246IG51bGwsXG4gIHRvcEFuaW1hdGlvblN0YXJ0OiBudWxsLFxuICB0b3BCbHVyOiBudWxsLFxuICB0b3BDYW5QbGF5OiBudWxsLFxuICB0b3BDYW5QbGF5VGhyb3VnaDogbnVsbCxcbiAgdG9wQ2hhbmdlOiBudWxsLFxuICB0b3BDbGljazogbnVsbCxcbiAgdG9wQ29tcG9zaXRpb25FbmQ6IG51bGwsXG4gIHRvcENvbXBvc2l0aW9uU3RhcnQ6IG51bGwsXG4gIHRvcENvbXBvc2l0aW9uVXBkYXRlOiBudWxsLFxuICB0b3BDb250ZXh0TWVudTogbnVsbCxcbiAgdG9wQ29weTogbnVsbCxcbiAgdG9wQ3V0OiBudWxsLFxuICB0b3BEb3VibGVDbGljazogbnVsbCxcbiAgdG9wRHJhZzogbnVsbCxcbiAgdG9wRHJhZ0VuZDogbnVsbCxcbiAgdG9wRHJhZ0VudGVyOiBudWxsLFxuICB0b3BEcmFnRXhpdDogbnVsbCxcbiAgdG9wRHJhZ0xlYXZlOiBudWxsLFxuICB0b3BEcmFnT3ZlcjogbnVsbCxcbiAgdG9wRHJhZ1N0YXJ0OiBudWxsLFxuICB0b3BEcm9wOiBudWxsLFxuICB0b3BEdXJhdGlvbkNoYW5nZTogbnVsbCxcbiAgdG9wRW1wdGllZDogbnVsbCxcbiAgdG9wRW5jcnlwdGVkOiBudWxsLFxuICB0b3BFbmRlZDogbnVsbCxcbiAgdG9wRXJyb3I6IG51bGwsXG4gIHRvcEZvY3VzOiBudWxsLFxuICB0b3BJbnB1dDogbnVsbCxcbiAgdG9wSW52YWxpZDogbnVsbCxcbiAgdG9wS2V5RG93bjogbnVsbCxcbiAgdG9wS2V5UHJlc3M6IG51bGwsXG4gIHRvcEtleVVwOiBudWxsLFxuICB0b3BMb2FkOiBudWxsLFxuICB0b3BMb2FkZWREYXRhOiBudWxsLFxuICB0b3BMb2FkZWRNZXRhZGF0YTogbnVsbCxcbiAgdG9wTG9hZFN0YXJ0OiBudWxsLFxuICB0b3BNb3VzZURvd246IG51bGwsXG4gIHRvcE1vdXNlTW92ZTogbnVsbCxcbiAgdG9wTW91c2VPdXQ6IG51bGwsXG4gIHRvcE1vdXNlT3ZlcjogbnVsbCxcbiAgdG9wTW91c2VVcDogbnVsbCxcbiAgdG9wUGFzdGU6IG51bGwsXG4gIHRvcFBhdXNlOiBudWxsLFxuICB0b3BQbGF5OiBudWxsLFxuICB0b3BQbGF5aW5nOiBudWxsLFxuICB0b3BQcm9ncmVzczogbnVsbCxcbiAgdG9wUmF0ZUNoYW5nZTogbnVsbCxcbiAgdG9wUmVzZXQ6IG51bGwsXG4gIHRvcFNjcm9sbDogbnVsbCxcbiAgdG9wU2Vla2VkOiBudWxsLFxuICB0b3BTZWVraW5nOiBudWxsLFxuICB0b3BTZWxlY3Rpb25DaGFuZ2U6IG51bGwsXG4gIHRvcFN0YWxsZWQ6IG51bGwsXG4gIHRvcFN1Ym1pdDogbnVsbCxcbiAgdG9wU3VzcGVuZDogbnVsbCxcbiAgdG9wVGV4dElucHV0OiBudWxsLFxuICB0b3BUaW1lVXBkYXRlOiBudWxsLFxuICB0b3BUb3VjaENhbmNlbDogbnVsbCxcbiAgdG9wVG91Y2hFbmQ6IG51bGwsXG4gIHRvcFRvdWNoTW92ZTogbnVsbCxcbiAgdG9wVG91Y2hTdGFydDogbnVsbCxcbiAgdG9wVHJhbnNpdGlvbkVuZDogbnVsbCxcbiAgdG9wVm9sdW1lQ2hhbmdlOiBudWxsLFxuICB0b3BXYWl0aW5nOiBudWxsLFxuICB0b3BXaGVlbDogbnVsbFxufTtcblxudmFyIEV2ZW50Q29uc3RhbnRzID0ge1xuICB0b3BMZXZlbFR5cGVzOiB0b3BMZXZlbFR5cGVzXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50Q29uc3RhbnRzO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yZWFjdC1kb20vbGliL0V2ZW50Q29uc3RhbnRzLmpzXG4vLyBtb2R1bGUgaWQgPSA2MDZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0IEZhY2Vib29rLCBJbmMuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFRvdWNoRXZlbnRVdGlsc1xuICovXG5cbnZhciBUb3VjaEV2ZW50VXRpbHMgPSB7XG4gIC8qKlxuICAgKiBVdGlsaXR5IGZ1bmN0aW9uIGZvciBjb21tb24gY2FzZSBvZiBleHRyYWN0aW5nIG91dCB0aGUgcHJpbWFyeSB0b3VjaCBmcm9tIGFcbiAgICogdG91Y2ggZXZlbnQuXG4gICAqIC0gYHRvdWNoRW5kYCBldmVudHMgdXN1YWxseSBkbyBub3QgaGF2ZSB0aGUgYHRvdWNoZXNgIHByb3BlcnR5LlxuICAgKiAgIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMzY2NjkyOS9cbiAgICogICBtb2JpbGUtc2FyYWktdG91Y2hlbmQtZXZlbnQtbm90LWZpcmluZy13aGVuLWxhc3QtdG91Y2gtaXMtcmVtb3ZlZFxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50fSBuYXRpdmVFdmVudCBOYXRpdmUgZXZlbnQgdGhhdCBtYXkgb3IgbWF5IG5vdCBiZSBhIHRvdWNoLlxuICAgKiBAcmV0dXJuIHtUb3VjaGVzT2JqZWN0P30gYW4gb2JqZWN0IHdpdGggcGFnZVggYW5kIHBhZ2VZIG9yIG51bGwuXG4gICAqL1xuICBleHRyYWN0U2luZ2xlVG91Y2g6IGZ1bmN0aW9uKG5hdGl2ZUV2ZW50KSB7XG4gICAgdmFyIHRvdWNoZXMgPSBuYXRpdmVFdmVudC50b3VjaGVzO1xuICAgIHZhciBjaGFuZ2VkVG91Y2hlcyA9IG5hdGl2ZUV2ZW50LmNoYW5nZWRUb3VjaGVzO1xuICAgIHZhciBoYXNUb3VjaGVzID0gdG91Y2hlcyAmJiB0b3VjaGVzLmxlbmd0aCA+IDA7XG4gICAgdmFyIGhhc0NoYW5nZWRUb3VjaGVzID0gY2hhbmdlZFRvdWNoZXMgJiYgY2hhbmdlZFRvdWNoZXMubGVuZ3RoID4gMDtcblxuICAgIHJldHVybiAhaGFzVG91Y2hlcyAmJiBoYXNDaGFuZ2VkVG91Y2hlcyA/IGNoYW5nZWRUb3VjaGVzWzBdIDpcbiAgICAgICAgICAgaGFzVG91Y2hlcyA/IHRvdWNoZXNbMF0gOlxuICAgICAgICAgICBuYXRpdmVFdmVudDtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBUb3VjaEV2ZW50VXRpbHM7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3QtdGFwLWV2ZW50LXBsdWdpbi9zcmMvVG91Y2hFdmVudFV0aWxzLmpzXG4vLyBtb2R1bGUgaWQgPSA2MDdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuLyoqXG4gKiBBbGxvd3MgZXh0cmFjdGlvbiBvZiBhIG1pbmlmaWVkIGtleS4gTGV0J3MgdGhlIGJ1aWxkIHN5c3RlbSBtaW5pZnkga2V5c1xuICogd2l0aG91dCBsb3NpbmcgdGhlIGFiaWxpdHkgdG8gZHluYW1pY2FsbHkgdXNlIGtleSBzdHJpbmdzIGFzIHZhbHVlc1xuICogdGhlbXNlbHZlcy4gUGFzcyBpbiBhbiBvYmplY3Qgd2l0aCBhIHNpbmdsZSBrZXkvdmFsIHBhaXIgYW5kIGl0IHdpbGwgcmV0dXJuXG4gKiB5b3UgdGhlIHN0cmluZyBrZXkgb2YgdGhhdCBzaW5nbGUgcmVjb3JkLiBTdXBwb3NlIHlvdSB3YW50IHRvIGdyYWIgdGhlXG4gKiB2YWx1ZSBmb3IgYSBrZXkgJ2NsYXNzTmFtZScgaW5zaWRlIG9mIGFuIG9iamVjdC4gS2V5L3ZhbCBtaW5pZmljYXRpb24gbWF5XG4gKiBoYXZlIGFsaWFzZWQgdGhhdCBrZXkgdG8gYmUgJ3hhMTInLiBrZXlPZih7Y2xhc3NOYW1lOiBudWxsfSkgd2lsbCByZXR1cm5cbiAqICd4YTEyJyBpbiB0aGF0IGNhc2UuIFJlc29sdmUga2V5cyB5b3Ugd2FudCB0byB1c2Ugb25jZSBhdCBzdGFydHVwIHRpbWUsIHRoZW5cbiAqIHJldXNlIHRob3NlIHJlc29sdXRpb25zLlxuICovXG52YXIga2V5T2YgPSBmdW5jdGlvbiBrZXlPZihvbmVLZXlPYmopIHtcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gb25lS2V5T2JqKSB7XG4gICAgaWYgKCFvbmVLZXlPYmouaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIHJldHVybiBrZXk7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGtleU9mO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9mYmpzL2xpYi9rZXlPZi5qc1xuLy8gbW9kdWxlIGlkID0gNjA4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCBSZWFjdCwgeyBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IFJvdXRlciwgUm91dGUsIEluZGV4Um91dGUsIExpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXInO1xyXG5cclxuXHJcblxyXG5pbXBvcnQgQXBwIGZyb20gJy4uL2NvbW1vbi9BcHAnXHJcblxyXG5cclxuaW1wb3J0IEhvbWUgZnJvbSAnLi4vcm91dGVzL0hvbWUvY29tcG9uZW50cy9Ib21lJ1xyXG5pbXBvcnQgQ29uZmlnIGZyb20gJy4uL3JvdXRlcy9Db25maWcvY29tcG9uZW50cy9Db25maWcnXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4vLyBmdW5jdGlvbiBsYXp5TG9hZENvbXBvbmVudChsYXp5TW9kdWxlKSB7ICBcclxuLy8gICByZXR1cm4gKGxvY2F0aW9uLCBjYikgPT4ge1xyXG4vLyAgICAgbGF6eU1vZHVsZShtb2R1bGUgPT4gY2IobnVsbCwgbW9kdWxlKSlcclxuLy8gICB9XHJcbi8vIH1cclxuXHJcbi8vIGZ1bmN0aW9uIGxhenlMb2FkQ29tcG9uZW50cyhsYXp5TW9kdWxlcykgeyAgXHJcbi8vICAgcmV0dXJuIChsb2NhdGlvbiwgY2IpID0+IHtcclxuLy8gICAgIGNvbnN0IG1vZHVsZUtleXMgPSBPYmplY3Qua2V5cyhsYXp5TW9kdWxlcyk7XHJcbi8vICAgICBjb25zdCBwcm9taXNlcyA9IG1vZHVsZUtleXMubWFwKGtleSA9PlxyXG4vLyAgICAgICBuZXcgUHJvbWlzZShyZXNvbHZlID0+IGxhenlNb2R1bGVzW2tleV0ocmVzb2x2ZSkpXHJcbi8vICAgICApXHJcblxyXG4vLyAgICAgUHJvbWlzZS5hbGwocHJvbWlzZXMpLnRoZW4obW9kdWxlcyA9PiB7XHJcbi8vICAgICAgIGNiKG51bGwsIG1vZHVsZXMucmVkdWNlKChvYmosIG1vZHVsZSwgaSkgPT4ge1xyXG4vLyAgICAgICAgIG9ialttb2R1bGVLZXlzW2ldXSA9IG1vZHVsZTtcclxuLy8gICAgICAgICByZXR1cm4gb2JqO1xyXG4vLyAgICAgICB9LCB7fSkpXHJcbi8vICAgICB9KVxyXG4vLyAgIH1cclxuLy8gfVxyXG5cclxuY29uc3QgaXNSZWFjdENvbXBvbmVudCA9IChvYmopID0+IEJvb2xlYW4ob2JqICYmIG9iai5wcm90b3R5cGUgJiYgQm9vbGVhbihvYmoucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQpKTtcclxuXHJcbmNvbnN0IGNvbXBvbmVudCA9IChjb21wb25lbnQpID0+IHtcclxuICByZXR1cm4gaXNSZWFjdENvbXBvbmVudChjb21wb25lbnQpXHJcbiAgICA/IHtjb21wb25lbnR9XHJcbiAgICA6IHtnZXRDb21wb25lbnQ6IChsb2MsIGNiKT0+IGNvbXBvbmVudChcclxuICAgICAgICAgY29tcD0+IGNiKG51bGwsIGNvbXAuZGVmYXVsdCB8fCBjb21wKSl9XHJcbn07XHJcblxyXG5cclxuXHJcbmNvbnN0IFJvdXRlcyA9ICh7IGhpc3RvcnkgfSkgPT5cclxuICA8Um91dGVyIGhpc3Rvcnk9e2hpc3Rvcnl9PlxyXG4gICAgPFJvdXRlIHBhdGg9XCIvXCIgY29tcG9uZW50PXtBcHB9ID5cclxuICAgICAgICA8SW5kZXhSb3V0ZSB7Li4uY29tcG9uZW50KEhvbWUpfS8+XHJcbiAgICAgICAgPFJvdXRlIHBhdGg9XCJIb21lXCIgICAgey4uLmNvbXBvbmVudChIb21lKX0gLz5cclxuICAgICAgICA8Um91dGUgcGF0aD1cIkNvbmZpZ1wiICB7Li4uY29tcG9uZW50KENvbmZpZyl9Lz5cclxuICAgIDwvUm91dGU+XHJcbiAgICBcclxuICA8L1JvdXRlcj47XHJcblxyXG5Sb3V0ZXMucHJvcFR5cGVzID0ge1xyXG4gIGhpc3Rvcnk6IFByb3BUeXBlcy5hbnksXHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBSb3V0ZXM7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL3JvdXRlL2luZGV4LmpzIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCwgUHJvcFR5cGVzIH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgTXVpVGhlbWVQcm92aWRlciBmcm9tICdtYXRlcmlhbC11aS9zdHlsZXMvTXVpVGhlbWVQcm92aWRlcic7XHJcbmltcG9ydCBkYXJrQmFzZVRoZW1lIGZyb20gJ21hdGVyaWFsLXVpL3N0eWxlcy9iYXNlVGhlbWVzL2RhcmtCYXNlVGhlbWUnO1xyXG5pbXBvcnQgTWFpbkxheW91dCBmcm9tICcuLi9sYXlvdXRzL01haW5MYXlvdXQnO1xyXG5pbXBvcnQgeyBkZWVwT3JhbmdlNTAwLHJlZEEyMDAsZ3JleTUwMCxncmV5OTAwLGdyZXk1MCxncmV5NjAwLHdoaXRlLGRhcmtCbGFjayxjeWFuNTAwLFxyXG4gICAgICAgIGN5YW43MDAsZ3JleTQwMCxncmV5MTAwLGdyZXkzMDBcclxuIH0gZnJvbSAnbWF0ZXJpYWwtdWkvc3R5bGVzL2NvbG9ycyc7XHJcblxyXG5pbXBvcnQgZ2V0TXVpVGhlbWUgZnJvbSAnbWF0ZXJpYWwtdWkvc3R5bGVzL2dldE11aVRoZW1lJztcclxuXHJcbmltcG9ydCB7ZGFya2VuLCBmYWRlLCBlbXBoYXNpemUsIGxpZ2h0ZW59IGZyb20gJ21hdGVyaWFsLXVpL3V0aWxzL2NvbG9yTWFuaXB1bGF0b3InO1xyXG5cclxuXHJcbmNvbnN0IG11aVRoZW1lID0gZ2V0TXVpVGhlbWUoe1xyXG4gIHBhbGV0dGU6IHtcclxuICAgIGFjY2VudDFDb2xvcjogZGVlcE9yYW5nZTUwMCxcclxuICAgIHRleHRDb2xvcjpncmV5NTAwLFxyXG4gICAgc2hhZG93Q29sb3I6IGdyZXk1MCxcclxuICAgIGRpc2FibGVkQ29sb3I6IGZhZGUoZGFya0JsYWNrLCAwLjMpLFxyXG4gICAgcGlja2VySGVhZGVyQ29sb3I6IGN5YW41MDAsXHJcbiAgICBjbG9ja0NpcmNsZUNvbG9yOiBmYWRlKGRhcmtCbGFjaywgMC4wNyksXHJcblxyXG4gICAgcHJpbWFyeTFDb2xvcjogY3lhbjUwMCxcclxuICAgIHByaW1hcnkyQ29sb3I6IGN5YW43MDAsXHJcbiAgICBwcmltYXJ5M0NvbG9yOiBncmV5NDAwLFxyXG4gICAgXHJcbiAgICBhY2NlbnQyQ29sb3I6IGdyZXkxMDAsXHJcbiAgICBhY2NlbnQzQ29sb3I6IGdyZXk1MDAsXHJcbiAgICBcclxuICAgIGFsdGVybmF0ZVRleHRDb2xvcjogd2hpdGUsXHJcbiAgICBjYW52YXNDb2xvcjogd2hpdGUsXHJcbiAgICBib3JkZXJDb2xvcjogZ3JleTMwMFxyXG4gICAgXHJcbiBcclxuICB9LFxyXG4gIG1lbnU6IHtcclxuICAgIGJhY2tncm91bmRDb2xvcjogd2hpdGUsXHJcbiAgICBjb250YWluZXJCYWNrZ3JvdW5kQ29sb3I6IHdoaXRlLFxyXG4gIH0sXHJcbiAgbWVudUl0ZW06IHtcclxuICAgIGRhdGFIZWlnaHQ6IDQ4LFxyXG4gICAgaGVpZ2h0OiA1MixcclxuICAgIGhvdmVyQ29sb3I6IGZhZGUocmVkQTIwMCwgMC4wMzUpLFxyXG4gICAgc2VsZWN0ZWRUZXh0Q29sb3I6IHJlZEEyMDAsXHJcbiAgICBcclxuICAgIHJpZ2h0SWNvbkRlc2t0b3BGaWxsOiByZWRBMjAwLFxyXG4gIH1cclxufSk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBcHAgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gIHJlbmRlcigpIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxNdWlUaGVtZVByb3ZpZGVyIG11aVRoZW1lPXttdWlUaGVtZX0+XHJcbiAgICAgICAgICAgICAgICA8TWFpbkxheW91dD5cclxuICAgICAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5jaGlsZHJlbn1cclxuICAgICAgICAgICAgICAgIDwvTWFpbkxheW91dD5cclxuICAgICAgICAgICAgPC9NdWlUaGVtZVByb3ZpZGVyPlxyXG4gICAgICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG5BcHAucHJvcFR5cGVzID0ge1xyXG5cclxuXHJcblxyXG59O1xyXG5cclxuXHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9jb21tb24vQXBwLmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NvbG9ycyA9IHJlcXVpcmUoJy4uL2NvbG9ycycpO1xuXG52YXIgX2NvbG9yTWFuaXB1bGF0b3IgPSByZXF1aXJlKCcuLi8uLi91dGlscy9jb2xvck1hbmlwdWxhdG9yJyk7XG5cbnZhciBfc3BhY2luZyA9IHJlcXVpcmUoJy4uL3NwYWNpbmcnKTtcblxudmFyIF9zcGFjaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NwYWNpbmcpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSB7XG4gIHNwYWNpbmc6IF9zcGFjaW5nMi5kZWZhdWx0LFxuICBmb250RmFtaWx5OiAnUm9ib3RvLCBzYW5zLXNlcmlmJyxcbiAgcGFsZXR0ZToge1xuICAgIHByaW1hcnkxQ29sb3I6IF9jb2xvcnMuY3lhbjcwMCxcbiAgICBwcmltYXJ5MkNvbG9yOiBfY29sb3JzLmN5YW43MDAsXG4gICAgcHJpbWFyeTNDb2xvcjogX2NvbG9ycy5ncmV5NjAwLFxuICAgIGFjY2VudDFDb2xvcjogX2NvbG9ycy5waW5rQTIwMCxcbiAgICBhY2NlbnQyQ29sb3I6IF9jb2xvcnMucGlua0E0MDAsXG4gICAgYWNjZW50M0NvbG9yOiBfY29sb3JzLnBpbmtBMTAwLFxuICAgIHRleHRDb2xvcjogX2NvbG9ycy5mdWxsV2hpdGUsXG4gICAgc2Vjb25kYXJ5VGV4dENvbG9yOiAoMCwgX2NvbG9yTWFuaXB1bGF0b3IuZmFkZSkoX2NvbG9ycy5mdWxsV2hpdGUsIDAuNyksXG4gICAgYWx0ZXJuYXRlVGV4dENvbG9yOiAnIzMwMzAzMCcsXG4gICAgY2FudmFzQ29sb3I6ICcjMzAzMDMwJyxcbiAgICBib3JkZXJDb2xvcjogKDAsIF9jb2xvck1hbmlwdWxhdG9yLmZhZGUpKF9jb2xvcnMuZnVsbFdoaXRlLCAwLjMpLFxuICAgIGRpc2FibGVkQ29sb3I6ICgwLCBfY29sb3JNYW5pcHVsYXRvci5mYWRlKShfY29sb3JzLmZ1bGxXaGl0ZSwgMC4zKSxcbiAgICBwaWNrZXJIZWFkZXJDb2xvcjogKDAsIF9jb2xvck1hbmlwdWxhdG9yLmZhZGUpKF9jb2xvcnMuZnVsbFdoaXRlLCAwLjEyKSxcbiAgICBjbG9ja0NpcmNsZUNvbG9yOiAoMCwgX2NvbG9yTWFuaXB1bGF0b3IuZmFkZSkoX2NvbG9ycy5mdWxsV2hpdGUsIDAuMTIpXG4gIH1cbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L21hdGVyaWFsLXVpL3N0eWxlcy9iYXNlVGhlbWVzL2RhcmtCYXNlVGhlbWUuanNcbi8vIG1vZHVsZSBpZCA9IDYxMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50LCBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCdcclxuaW1wb3J0IHsgUm91dGVyLCBSb3V0ZSwgSW5kZXhSb3V0ZSwgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlcidcclxuXHJcblxyXG5pbXBvcnQgVG9wTmF2IGZyb20gJy4uL2NvbW1vbi9Ub3BOYXYnXHJcblxyXG5pbXBvcnQgQ29udGVudCBmcm9tICcuLi9jb21tb24vQ29udGVudCdcclxuXHJcbmltcG9ydCBEcmF3ZXIgZnJvbSAnbWF0ZXJpYWwtdWkvRHJhd2VyJ1xyXG5pbXBvcnQgQXBwQmFyIGZyb20gJ21hdGVyaWFsLXVpL0FwcEJhcidcclxuXHJcbmltcG9ydCBMZWZ0TmF2IGZyb20gJy4uL2NvbW1vbi9MZWZ0TmF2J1xyXG5cclxuaW1wb3J0IExpc3RFeGFtcGxlU2VsZWN0YWJsZSBmcm9tICcuLi9jb21tb24vU2VsZWN0YWJsZUxpc3QnXHJcblxyXG5cclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNYWluTGF5b3V0IGV4dGVuZHMgQ29tcG9uZW50IHtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG4gICAgICAgIHN1cGVyKHByb3BzKTtcclxuICAgICAgICB0aGlzLnN0YXRlID0ge29wZW46IHRydWV9O1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpe1xyXG4gICAgICBcclxuXHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2FwcC1yb290Jz5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSd0b3AtbmF2LWFyZWEnPlxyXG4gICAgICAgICAgICAgICAgICAgIDxUb3BOYXYgLz5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdsZWZ0LW5hdi1hcmVhJz5cclxuICAgICAgICAgICAgICAgICAgICA8TGlzdEV4YW1wbGVTZWxlY3RhYmxlIC8+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIDxDb250ZW50PiAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAge3RoaXMucHJvcHMuY2hpbGRyZW59XHJcbiAgICAgICAgICAgICAgICA8L0NvbnRlbnQ+XHJcblxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApXHJcblxyXG4gICAgfVxyXG5cclxufVxyXG5cclxuXHJcbk1haW5MYXlvdXQucHJvcFR5cGVzPXtcclxuICAgIFxyXG59XHJcblxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvbGF5b3V0cy9NYWluTGF5b3V0LmpzIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCwgUHJvcFR5cGVzIH0gZnJvbSAncmVhY3QnXHJcbmltcG9ydCB7IFJvdXRlciwgUm91dGUsIEluZGV4Um91dGUsIExpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXInXHJcbmltcG9ydCBBdmF0YXIgZnJvbSAnbWF0ZXJpYWwtdWkvQXZhdGFyJztcclxuaW1wb3J0IE11aVRoZW1lUHJvdmlkZXIgZnJvbSAnbWF0ZXJpYWwtdWkvc3R5bGVzL011aVRoZW1lUHJvdmlkZXInXHJcblxyXG5pbXBvcnQgSWNvbk1lbnUgZnJvbSAnbWF0ZXJpYWwtdWkvSWNvbk1lbnUnXHJcbmltcG9ydCBJY29uQnV0dG9uIGZyb20gJ21hdGVyaWFsLXVpL0ljb25CdXR0b24nXHJcbmltcG9ydCBGb250SWNvbiBmcm9tICdtYXRlcmlhbC11aS9Gb250SWNvbidcclxuaW1wb3J0IE5hdmlnYXRpb25FeHBhbmRNb3JlSWNvbiBmcm9tICdtYXRlcmlhbC11aS9zdmctaWNvbnMvbmF2aWdhdGlvbi9leHBhbmQtbW9yZSdcclxuaW1wb3J0IE1lbnVJdGVtIGZyb20gJ21hdGVyaWFsLXVpL01lbnVJdGVtJ1xyXG5pbXBvcnQgRHJvcERvd25NZW51IGZyb20gJ21hdGVyaWFsLXVpL0Ryb3BEb3duTWVudSdcclxuXHJcbmltcG9ydCBSYWlzZWRCdXR0b24gZnJvbSAnbWF0ZXJpYWwtdWkvUmFpc2VkQnV0dG9uJ1xyXG5pbXBvcnQge1Rvb2xiYXIsIFRvb2xiYXJHcm91cCwgVG9vbGJhclNlcGFyYXRvciwgVG9vbGJhclRpdGxlfSBmcm9tICdtYXRlcmlhbC11aS9Ub29sYmFyJ1xyXG5pbXBvcnQgRmlsZUZvbGRlciBmcm9tICdtYXRlcmlhbC11aS9zdmctaWNvbnMvZmlsZS9mb2xkZXInXHJcbmltcG9ydCBCYWRnZSBmcm9tICdtYXRlcmlhbC11aS9CYWRnZSdcclxuaW1wb3J0IEZsYXRCdXR0b24gZnJvbSAnbWF0ZXJpYWwtdWkvRmxhdEJ1dHRvbic7XHJcblxyXG5cclxuXHJcbmltcG9ydCBVcGxvYWRJY29uIGZyb20gJ21hdGVyaWFsLXVpL3N2Zy1pY29ucy9maWxlL2Nsb3VkLXVwbG9hZCc7XHJcbmltcG9ydCBGb2xkZXJJY29uIGZyb20gJ21hdGVyaWFsLXVpL3N2Zy1pY29ucy9maWxlL2ZvbGRlci1vcGVuJztcclxuaW1wb3J0IE5vdGlmaWNhdGlvbnNJY29uIGZyb20gJ21hdGVyaWFsLXVpL3N2Zy1pY29ucy9zb2NpYWwvbm90aWZpY2F0aW9ucydcclxuXHJcbmltcG9ydCBUZXh0RmllbGQgZnJvbSAnbWF0ZXJpYWwtdWkvVGV4dEZpZWxkJztcclxuaW1wb3J0IHtvcmFuZ2U1MDAsIGJsdWU1MDB9IGZyb20gJ21hdGVyaWFsLXVpL3N0eWxlcy9jb2xvcnMnO1xyXG5cclxuXHJcblxyXG5pbXBvcnQgJy4uL2xpYi9Gb250LUF3ZXNvbWUvY3NzL2ZvbnQtYXdlc29tZS5taW4uY3NzJ1xyXG5cclxuaW1wb3J0IHtcclxuICAgIGJsdWUzMDAsXHJcbiAgICBpbmRpZ285MDAsXHJcbiAgICBvcmFuZ2UyMDAsXHJcbiAgICBkZWVwT3JhbmdlMzAwLFxyXG4gICAgcGluazQwMCxcclxuICAgIHB1cnBsZTUwMCxcclxufSBmcm9tICdtYXRlcmlhbC11aS9zdHlsZXMvY29sb3JzJztcclxuXHJcblxyXG5pbXBvcnQgVXNlckNvbnRyb2wgZnJvbSAnLi9Vc2VyQ29udHJvbCdcclxuXHJcblxyXG5jb25zdCBzdHlsZXMgPSB7XHJcbiAgZXJyb3JTdHlsZToge1xyXG4gICAgY29sb3I6IG9yYW5nZTUwMCxcclxuICB9LFxyXG4gIHVuZGVybGluZVN0eWxlOiB7XHJcbiAgICBib3JkZXJDb2xvcjogb3JhbmdlNTAwLFxyXG4gIH0sXHJcbiAgZmxvYXRpbmdMYWJlbFN0eWxlOiB7XHJcbiAgICBjb2xvcjogb3JhbmdlNTAwLFxyXG4gIH0sXHJcbiAgZmxvYXRpbmdMYWJlbEZvY3VzU3R5bGU6IHtcclxuICAgIGNvbG9yOiBibHVlNTAwLFxyXG4gIH0sXHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUb3BOYXYgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG4gICAgc3VwZXIocHJvcHMpO1xyXG4gICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgdmFsdWU6IDMsXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgXHJcbiAgcmVuZGVyKCkge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgPFRvb2xiYXIgc3R5bGU9e3snYmFja2dyb3VuZENvbG9yJzond2hpdGUnfX0+XHJcbiAgICAgICAgPFRvb2xiYXJHcm91cCBmaXJzdENoaWxkPXt0cnVlfT5cclxuICAgICAgICBcclxuXHJcbiAgICAgICAgICAgIDxGbGF0QnV0dG9uXHJcbiAgICAgICAgICAgICAgbGFiZWw9XCJTY3J1bWFuIEh1YlwiXHJcbiAgICAgICAgICAgICAgaHJlZj1cIiNcIlxyXG4gICAgICAgICAgICAgIHNlY29uZGFyeT17dHJ1ZX1cclxuICAgICAgICAgICAgICBpY29uPXs8aSBjbGFzc05hbWU9XCJpY29uLXRpbWUgaWNvbi0yeFwiPjwvaT59XHJcbiAgICAgICAgICAgIC8+XHJcbiAgICAgICAgPC9Ub29sYmFyR3JvdXA+XHJcblxyXG5cclxuICAgICAgICA8VG9vbGJhckdyb3VwPlxyXG4gICAgICAgICBcclxuICAgICAgICAgICAgPGRpdj5cclxuXHJcbiAgICAgICAgICAgICAgICA8QmFkZ2Ugc3R5bGU9e3snbWFyZ2luVG9wJzonLTE1cHgnfX1cclxuICAgICAgICAgICAgICAgICAgICBiYWRnZUNvbnRlbnQ9ezxJY29uQnV0dG9uIHRvb2x0aXA9XCJCYWNrdXBcIj48VXBsb2FkSWNvbiAvPjwvSWNvbkJ1dHRvbj59XHJcbiAgICAgICAgICAgICAgICAgICAgYmFkZ2VTdHlsZT17e3RvcDogOCwgcmlnaHQ6IDh9fVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgIDxGb2xkZXJJY29uIC8+XHJcbiAgICAgICAgICAgICAgICA8L0JhZGdlPlxyXG5cclxuXHJcblxyXG5cclxuICAgICAgICAgICAgICAgIDxCYWRnZSBzdHlsZT17eydtYXJnaW5Ub3AnOictMTVweCd9fVxyXG4gICAgICAgICAgICAgICAgICBiYWRnZUNvbnRlbnQ9ezEwfVxyXG4gICAgICAgICAgICAgICAgICBzZWNvbmRhcnk9e3RydWV9XHJcbiAgICAgICAgICAgICAgICAgIGJhZGdlU3R5bGU9e3t0b3A6IDI0LCByaWdodDogMjQsJ3dpZHRoJzonMjBweCcsJ2hlaWdodCc6JzIwcHgnfX1cclxuICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICA8SWNvbkJ1dHRvbiB0b29sdGlwPVwiTm90aWZpY2F0aW9uc1wiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxOb3RpZmljYXRpb25zSWNvbiAvPlxyXG4gICAgICAgICAgICAgICAgICA8L0ljb25CdXR0b24+XHJcbiAgICAgICAgICAgICAgPC9CYWRnZT5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICBcclxuXHJcbiAgICAgICAgPC9Ub29sYmFyR3JvdXA+XHJcbiAgICAgICAgXHJcbiAgICAgICAgPFRvb2xiYXJHcm91cCBsYXN0Q2hpbGQ9e3RydWV9PlxyXG5cclxuICAgICAgICAgIFxyXG4gICAgICAgICAgPFRleHRGaWVsZCBzdHlsZT17eydtYXJnaW5Ub3AnOiAnLTE1cHgnLCd3aWR0aCc6JzE1MHB4J319IFxyXG4gICAgICAgICAgICAgIGZsb2F0aW5nTGFiZWxUZXh0PVwiU2VhcmNoXCJcclxuICAgICAgICAgICAgICBmbG9hdGluZ0xhYmVsU3R5bGU9e3N0eWxlcy5mbG9hdGluZ0xhYmVsU3R5bGV9XHJcbiAgICAgICAgICAgICAgZmxvYXRpbmdMYWJlbEZvY3VzU3R5bGU9e3N0eWxlcy5mbG9hdGluZ0xhYmVsRm9jdXNTdHlsZX1cclxuICAgICAgICAgICAgLz5cclxuXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgPEF2YXRhciBzcmM9XCIvc3JjL2NvbnRlbnQvaW1nL3VzZXIuanBnXCIgIHN0eWxlPXt7bWFyZ2luVG9wOic3cHgnfX0+PC9BdmF0YXI+XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIDxVc2VyQ29udHJvbCAvPlxyXG4gICAgICAgIDwvVG9vbGJhckdyb3VwPlxyXG4gICAgICA8L1Rvb2xiYXI+XHJcbiAgICApO1xyXG4gIH1cclxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9jb21tb24vVG9wTmF2LmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHVyZSA9IHJlcXVpcmUoJ3JlY29tcG9zZS9wdXJlJyk7XG5cbnZhciBfcHVyZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wdXJlKTtcblxudmFyIF9TdmdJY29uID0gcmVxdWlyZSgnLi4vLi4vU3ZnSWNvbicpO1xuXG52YXIgX1N2Z0ljb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU3ZnSWNvbik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBGaWxlRm9sZGVyID0gZnVuY3Rpb24gRmlsZUZvbGRlcihwcm9wcykge1xuICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgX1N2Z0ljb24yLmRlZmF1bHQsXG4gICAgcHJvcHMsXG4gICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ3BhdGgnLCB7IGQ6ICdNMTAgNEg0Yy0xLjEgMC0xLjk5LjktMS45OSAyTDIgMThjMCAxLjEuOSAyIDIgMmgxNmMxLjEgMCAyLS45IDItMlY4YzAtMS4xLS45LTItMi0yaC04bC0yLTJ6JyB9KVxuICApO1xufTtcbkZpbGVGb2xkZXIgPSAoMCwgX3B1cmUyLmRlZmF1bHQpKEZpbGVGb2xkZXIpO1xuRmlsZUZvbGRlci5kaXNwbGF5TmFtZSA9ICdGaWxlRm9sZGVyJztcbkZpbGVGb2xkZXIubXVpTmFtZSA9ICdTdmdJY29uJztcblxuZXhwb3J0cy5kZWZhdWx0ID0gRmlsZUZvbGRlcjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vbWF0ZXJpYWwtdWkvc3ZnLWljb25zL2ZpbGUvZm9sZGVyLmpzXG4vLyBtb2R1bGUgaWQgPSA2MTRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHVyZSA9IHJlcXVpcmUoJ3JlY29tcG9zZS9wdXJlJyk7XG5cbnZhciBfcHVyZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wdXJlKTtcblxudmFyIF9TdmdJY29uID0gcmVxdWlyZSgnLi4vLi4vU3ZnSWNvbicpO1xuXG52YXIgX1N2Z0ljb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU3ZnSWNvbik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBGaWxlQ2xvdWRVcGxvYWQgPSBmdW5jdGlvbiBGaWxlQ2xvdWRVcGxvYWQocHJvcHMpIHtcbiAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgIF9TdmdJY29uMi5kZWZhdWx0LFxuICAgIHByb3BzLFxuICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdwYXRoJywgeyBkOiAnTTE5LjM1IDEwLjA0QzE4LjY3IDYuNTkgMTUuNjQgNCAxMiA0IDkuMTEgNCA2LjYgNS42NCA1LjM1IDguMDQgMi4zNCA4LjM2IDAgMTAuOTEgMCAxNGMwIDMuMzEgMi42OSA2IDYgNmgxM2MyLjc2IDAgNS0yLjI0IDUtNSAwLTIuNjQtMi4wNS00Ljc4LTQuNjUtNC45NnpNMTQgMTN2NGgtNHYtNEg3bDUtNSA1IDVoLTN6JyB9KVxuICApO1xufTtcbkZpbGVDbG91ZFVwbG9hZCA9ICgwLCBfcHVyZTIuZGVmYXVsdCkoRmlsZUNsb3VkVXBsb2FkKTtcbkZpbGVDbG91ZFVwbG9hZC5kaXNwbGF5TmFtZSA9ICdGaWxlQ2xvdWRVcGxvYWQnO1xuRmlsZUNsb3VkVXBsb2FkLm11aU5hbWUgPSAnU3ZnSWNvbic7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IEZpbGVDbG91ZFVwbG9hZDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vbWF0ZXJpYWwtdWkvc3ZnLWljb25zL2ZpbGUvY2xvdWQtdXBsb2FkLmpzXG4vLyBtb2R1bGUgaWQgPSA2MTVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHVyZSA9IHJlcXVpcmUoJ3JlY29tcG9zZS9wdXJlJyk7XG5cbnZhciBfcHVyZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wdXJlKTtcblxudmFyIF9TdmdJY29uID0gcmVxdWlyZSgnLi4vLi4vU3ZnSWNvbicpO1xuXG52YXIgX1N2Z0ljb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU3ZnSWNvbik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBGaWxlRm9sZGVyT3BlbiA9IGZ1bmN0aW9uIEZpbGVGb2xkZXJPcGVuKHByb3BzKSB7XG4gIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICBfU3ZnSWNvbjIuZGVmYXVsdCxcbiAgICBwcm9wcyxcbiAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgncGF0aCcsIHsgZDogJ00yMCA2aC04bC0yLTJINGMtMS4xIDAtMS45OS45LTEuOTkgMkwyIDE4YzAgMS4xLjkgMiAyIDJoMTZjMS4xIDAgMi0uOSAyLTJWOGMwLTEuMS0uOS0yLTItMnptMCAxMkg0VjhoMTZ2MTB6JyB9KVxuICApO1xufTtcbkZpbGVGb2xkZXJPcGVuID0gKDAsIF9wdXJlMi5kZWZhdWx0KShGaWxlRm9sZGVyT3Blbik7XG5GaWxlRm9sZGVyT3Blbi5kaXNwbGF5TmFtZSA9ICdGaWxlRm9sZGVyT3Blbic7XG5GaWxlRm9sZGVyT3Blbi5tdWlOYW1lID0gJ1N2Z0ljb24nO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBGaWxlRm9sZGVyT3BlbjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vbWF0ZXJpYWwtdWkvc3ZnLWljb25zL2ZpbGUvZm9sZGVyLW9wZW4uanNcbi8vIG1vZHVsZSBpZCA9IDYxNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wdXJlID0gcmVxdWlyZSgncmVjb21wb3NlL3B1cmUnKTtcblxudmFyIF9wdXJlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3B1cmUpO1xuXG52YXIgX1N2Z0ljb24gPSByZXF1aXJlKCcuLi8uLi9TdmdJY29uJyk7XG5cbnZhciBfU3ZnSWNvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TdmdJY29uKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIFNvY2lhbE5vdGlmaWNhdGlvbnMgPSBmdW5jdGlvbiBTb2NpYWxOb3RpZmljYXRpb25zKHByb3BzKSB7XG4gIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICBfU3ZnSWNvbjIuZGVmYXVsdCxcbiAgICBwcm9wcyxcbiAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgncGF0aCcsIHsgZDogJ00xMiAyMmMxLjEgMCAyLS45IDItMmgtNGMwIDEuMS44OSAyIDIgMnptNi02di01YzAtMy4wNy0xLjY0LTUuNjQtNC41LTYuMzJWNGMwLS44My0uNjctMS41LTEuNS0xLjVzLTEuNS42Ny0xLjUgMS41di42OEM3LjYzIDUuMzYgNiA3LjkyIDYgMTF2NWwtMiAydjFoMTZ2LTFsLTItMnonIH0pXG4gICk7XG59O1xuU29jaWFsTm90aWZpY2F0aW9ucyA9ICgwLCBfcHVyZTIuZGVmYXVsdCkoU29jaWFsTm90aWZpY2F0aW9ucyk7XG5Tb2NpYWxOb3RpZmljYXRpb25zLmRpc3BsYXlOYW1lID0gJ1NvY2lhbE5vdGlmaWNhdGlvbnMnO1xuU29jaWFsTm90aWZpY2F0aW9ucy5tdWlOYW1lID0gJ1N2Z0ljb24nO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBTb2NpYWxOb3RpZmljYXRpb25zO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9tYXRlcmlhbC11aS9zdmctaWNvbnMvc29jaWFsL25vdGlmaWNhdGlvbnMuanNcbi8vIG1vZHVsZSBpZCA9IDYxN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgSWNvbk1lbnUgZnJvbSAnbWF0ZXJpYWwtdWkvSWNvbk1lbnUnO1xyXG5pbXBvcnQgTWVudUl0ZW0gZnJvbSAnbWF0ZXJpYWwtdWkvTWVudUl0ZW0nO1xyXG5pbXBvcnQgSWNvbkJ1dHRvbiBmcm9tICdtYXRlcmlhbC11aS9JY29uQnV0dG9uJztcclxuaW1wb3J0IERpdmlkZXIgZnJvbSAnbWF0ZXJpYWwtdWkvRGl2aWRlcic7XHJcbmltcG9ydCBEb3dubG9hZCBmcm9tICdtYXRlcmlhbC11aS9zdmctaWNvbnMvZmlsZS9maWxlLWRvd25sb2FkJztcclxuaW1wb3J0IEFycm93RHJvcFJpZ2h0IGZyb20gJ21hdGVyaWFsLXVpL3N2Zy1pY29ucy9uYXZpZ2F0aW9uLWFycm93LWRyb3AtcmlnaHQnO1xyXG5pbXBvcnQgTW9yZVZlcnRJY29uIGZyb20gJ21hdGVyaWFsLXVpL3N2Zy1pY29ucy9uYXZpZ2F0aW9uL21vcmUtdmVydCc7XHJcblxyXG5jb25zdCBVc2VyQ29udHJvbCA9ICgpID0+IChcclxuICA8ZGl2PlxyXG4gICAgPEljb25NZW51XHJcbiAgICAgIGljb25CdXR0b25FbGVtZW50PXs8SWNvbkJ1dHRvbj48TW9yZVZlcnRJY29uIC8+PC9JY29uQnV0dG9uPn1cclxuICAgICAgYW5jaG9yT3JpZ2luPXt7aG9yaXpvbnRhbDogJ2xlZnQnLCB2ZXJ0aWNhbDogJ3RvcCd9fVxyXG4gICAgICB0YXJnZXRPcmlnaW49e3tob3Jpem9udGFsOiAnbGVmdCcsIHZlcnRpY2FsOiAndG9wJ319XHJcbiAgICA+XHJcbiAgICAgIDxNZW51SXRlbVxyXG4gICAgICAgIHByaW1hcnlUZXh0PVwiQ29weSAmIFBhc3RlXCJcclxuICAgICAgICByaWdodEljb249ezxBcnJvd0Ryb3BSaWdodCAvPn1cclxuICAgICAgICBtZW51SXRlbXM9e1tcclxuICAgICAgICAgIDxNZW51SXRlbSBwcmltYXJ5VGV4dD1cIkN1dFwiIC8+LFxyXG4gICAgICAgICAgPE1lbnVJdGVtIHByaW1hcnlUZXh0PVwiQ29weVwiIC8+LFxyXG4gICAgICAgICAgPERpdmlkZXIgLz4sXHJcbiAgICAgICAgICA8TWVudUl0ZW0gcHJpbWFyeVRleHQ9XCJQYXN0ZVwiIC8+LFxyXG4gICAgICAgIF19XHJcbiAgICAgIC8+XHJcblxyXG4gICAgICA8TWVudUl0ZW1cclxuICAgICAgICBwcmltYXJ5VGV4dD1cIkNhc2UgVG9vbHNcIlxyXG4gICAgICAgIHJpZ2h0SWNvbj17PEFycm93RHJvcFJpZ2h0IC8+fVxyXG4gICAgICAgIG1lbnVJdGVtcz17W1xyXG4gICAgICAgICAgPE1lbnVJdGVtIHByaW1hcnlUZXh0PVwiVVBQRVJDQVNFXCIgLz4sXHJcbiAgICAgICAgICA8TWVudUl0ZW0gcHJpbWFyeVRleHQ9XCJsb3dlcmNhc2VcIiAvPixcclxuICAgICAgICAgIDxNZW51SXRlbSBwcmltYXJ5VGV4dD1cIkNhbWVsQ2FzZVwiIC8+LFxyXG4gICAgICAgICAgPE1lbnVJdGVtIHByaW1hcnlUZXh0PVwiUHJvcGVyY2FzZVwiIC8+LFxyXG4gICAgICAgIF19XHJcbiAgICAgIC8+XHJcbiAgICAgIDxEaXZpZGVyIC8+XHJcbiAgICAgIDxNZW51SXRlbSBwcmltYXJ5VGV4dD1cIkRvd25sb2FkXCIgbGVmdEljb249ezxEb3dubG9hZCAvPn0gLz5cclxuICAgICAgPERpdmlkZXIgLz5cclxuICAgICAgPE1lbnVJdGVtIHZhbHVlPVwiRGVsXCIgcHJpbWFyeVRleHQ9XCJEZWxldGVcIiAvPlxyXG5cclxuICAgIDwvSWNvbk1lbnU+XHJcbiAgPC9kaXY+XHJcbik7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBVc2VyQ29udHJvbDtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvY29tbW9uL1VzZXJDb250cm9sLmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHVyZSA9IHJlcXVpcmUoJ3JlY29tcG9zZS9wdXJlJyk7XG5cbnZhciBfcHVyZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wdXJlKTtcblxudmFyIF9TdmdJY29uID0gcmVxdWlyZSgnLi4vLi4vU3ZnSWNvbicpO1xuXG52YXIgX1N2Z0ljb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU3ZnSWNvbik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBGaWxlRmlsZURvd25sb2FkID0gZnVuY3Rpb24gRmlsZUZpbGVEb3dubG9hZChwcm9wcykge1xuICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgX1N2Z0ljb24yLmRlZmF1bHQsXG4gICAgcHJvcHMsXG4gICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ3BhdGgnLCB7IGQ6ICdNMTkgOWgtNFYzSDl2Nkg1bDcgNyA3LTd6TTUgMTh2MmgxNHYtMkg1eicgfSlcbiAgKTtcbn07XG5GaWxlRmlsZURvd25sb2FkID0gKDAsIF9wdXJlMi5kZWZhdWx0KShGaWxlRmlsZURvd25sb2FkKTtcbkZpbGVGaWxlRG93bmxvYWQuZGlzcGxheU5hbWUgPSAnRmlsZUZpbGVEb3dubG9hZCc7XG5GaWxlRmlsZURvd25sb2FkLm11aU5hbWUgPSAnU3ZnSWNvbic7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IEZpbGVGaWxlRG93bmxvYWQ7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L21hdGVyaWFsLXVpL3N2Zy1pY29ucy9maWxlL2ZpbGUtZG93bmxvYWQuanNcbi8vIG1vZHVsZSBpZCA9IDYyOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wdXJlID0gcmVxdWlyZSgncmVjb21wb3NlL3B1cmUnKTtcblxudmFyIF9wdXJlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3B1cmUpO1xuXG52YXIgX1N2Z0ljb24gPSByZXF1aXJlKCcuLi9TdmdJY29uJyk7XG5cbnZhciBfU3ZnSWNvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TdmdJY29uKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIE5hdmlnYXRpb25BcnJvd0Ryb3BSaWdodCA9IGZ1bmN0aW9uIE5hdmlnYXRpb25BcnJvd0Ryb3BSaWdodChwcm9wcykge1xuICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgX1N2Z0ljb24yLmRlZmF1bHQsXG4gICAgcHJvcHMsXG4gICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ3BhdGgnLCB7IGQ6ICdNOS41LDdsNSw1bC01LDVWN3onIH0pXG4gICk7XG59O1xuXG5OYXZpZ2F0aW9uQXJyb3dEcm9wUmlnaHQgPSAoMCwgX3B1cmUyLmRlZmF1bHQpKE5hdmlnYXRpb25BcnJvd0Ryb3BSaWdodCk7XG5OYXZpZ2F0aW9uQXJyb3dEcm9wUmlnaHQuZGlzcGxheU5hbWUgPSAnTmF2aWdhdGlvbkFycm93RHJvcFJpZ2h0Jztcbk5hdmlnYXRpb25BcnJvd0Ryb3BSaWdodC5tdWlOYW1lID0gJ1N2Z0ljb24nO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBOYXZpZ2F0aW9uQXJyb3dEcm9wUmlnaHQ7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L21hdGVyaWFsLXVpL3N2Zy1pY29ucy9uYXZpZ2F0aW9uLWFycm93LWRyb3AtcmlnaHQuanNcbi8vIG1vZHVsZSBpZCA9IDYyOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wdXJlID0gcmVxdWlyZSgncmVjb21wb3NlL3B1cmUnKTtcblxudmFyIF9wdXJlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3B1cmUpO1xuXG52YXIgX1N2Z0ljb24gPSByZXF1aXJlKCcuLi8uLi9TdmdJY29uJyk7XG5cbnZhciBfU3ZnSWNvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TdmdJY29uKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIE5hdmlnYXRpb25Nb3JlVmVydCA9IGZ1bmN0aW9uIE5hdmlnYXRpb25Nb3JlVmVydChwcm9wcykge1xuICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgX1N2Z0ljb24yLmRlZmF1bHQsXG4gICAgcHJvcHMsXG4gICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ3BhdGgnLCB7IGQ6ICdNMTIgOGMxLjEgMCAyLS45IDItMnMtLjktMi0yLTItMiAuOS0yIDIgLjkgMiAyIDJ6bTAgMmMtMS4xIDAtMiAuOS0yIDJzLjkgMiAyIDIgMi0uOSAyLTItLjktMi0yLTJ6bTAgNmMtMS4xIDAtMiAuOS0yIDJzLjkgMiAyIDIgMi0uOSAyLTItLjktMi0yLTJ6JyB9KVxuICApO1xufTtcbk5hdmlnYXRpb25Nb3JlVmVydCA9ICgwLCBfcHVyZTIuZGVmYXVsdCkoTmF2aWdhdGlvbk1vcmVWZXJ0KTtcbk5hdmlnYXRpb25Nb3JlVmVydC5kaXNwbGF5TmFtZSA9ICdOYXZpZ2F0aW9uTW9yZVZlcnQnO1xuTmF2aWdhdGlvbk1vcmVWZXJ0Lm11aU5hbWUgPSAnU3ZnSWNvbic7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IE5hdmlnYXRpb25Nb3JlVmVydDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vbWF0ZXJpYWwtdWkvc3ZnLWljb25zL25hdmlnYXRpb24vbW9yZS12ZXJ0LmpzXG4vLyBtb2R1bGUgaWQgPSA2MzBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCwgUHJvcFR5cGVzIH0gZnJvbSAncmVhY3QnXHJcblxyXG5cclxuXHJcblxyXG5cclxuY2xhc3MgQ29udGVudCBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICByZW5kZXIoKXtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nY29udGVudCc+ICAgIFxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAge3RoaXMucHJvcHMuY2hpbGRyZW59XHJcblxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApXHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5cclxuQ29udGVudC5wcm9wVHlwZXM9e1xyXG5cclxuICAgIFxyXG5cclxufVxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IENvbnRlbnRcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvY29tbW9uL0NvbnRlbnQuanMiLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50LCBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBQYXBlciBmcm9tICdtYXRlcmlhbC11aS9QYXBlcic7XHJcbmltcG9ydCBNZW51IGZyb20gJ21hdGVyaWFsLXVpL01lbnUnO1xyXG5pbXBvcnQgTWVudUl0ZW0gZnJvbSAnbWF0ZXJpYWwtdWkvTWVudUl0ZW0nO1xyXG5pbXBvcnQgUmVtb3ZlUmVkRXllIGZyb20gJ21hdGVyaWFsLXVpL3N2Zy1pY29ucy9pbWFnZS9yZW1vdmUtcmVkLWV5ZSc7XHJcbmltcG9ydCBQZXJzb25BZGQgZnJvbSAnbWF0ZXJpYWwtdWkvc3ZnLWljb25zL3NvY2lhbC9wZXJzb24tYWRkJztcclxuaW1wb3J0IENvbnRlbnRMaW5rIGZyb20gJ21hdGVyaWFsLXVpL3N2Zy1pY29ucy9jb250ZW50L2xpbmsnO1xyXG5pbXBvcnQgRGl2aWRlciBmcm9tICdtYXRlcmlhbC11aS9EaXZpZGVyJztcclxuaW1wb3J0IENvbnRlbnRDb3B5IGZyb20gJ21hdGVyaWFsLXVpL3N2Zy1pY29ucy9jb250ZW50L2NvbnRlbnQtY29weSc7XHJcbmltcG9ydCBEb3dubG9hZCBmcm9tICdtYXRlcmlhbC11aS9zdmctaWNvbnMvZmlsZS9maWxlLWRvd25sb2FkJztcclxuaW1wb3J0IERlbGV0ZSBmcm9tICdtYXRlcmlhbC11aS9zdmctaWNvbnMvYWN0aW9uL2RlbGV0ZSc7XHJcbmltcG9ydCBGb250SWNvbiBmcm9tICdtYXRlcmlhbC11aS9Gb250SWNvbic7XHJcblxyXG5pbXBvcnQge0xpc3QsIExpc3RJdGVtLCBtYWtlU2VsZWN0YWJsZX0gZnJvbSAnbWF0ZXJpYWwtdWkvTGlzdCc7XHJcblxyXG5jb25zdCBzdHlsZSA9IHtcclxuICBwYXBlcjoge1xyXG4gICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXHJcbiAgICBmbG9hdDogJ2xlZnQnLFxyXG4gICAgbWFyZ2luOiAnOHB4IDMycHggMTZweCAxMHB4JyxcclxuICAgIGJhY2tncm91bmRDb2xvcjoncmdiKDQzLCA1MywgNjUpJyxcclxuICB9XHJcbn07XHJcblxyXG5jb25zdCBpdGVtU3R5bGUgPXsnY29sb3InOidyZ2IoMTE3LCAxMTcsIDExNyknfTtcclxuXHJcbmNsYXNzIExlZnROYXYgZXh0ZW5kcyBDb21wb25lbnQge1xyXG5cclxuXHJcbiAgICBoYW5kbGVOYXZpZ2F0b3IoZXZlbnQsdmFsdWUpe1xyXG5cclxuICAgICAgdGhpcy5jb250ZXh0LnJvdXRlci5wdXNoKHZhbHVlKTtcclxuICAgICAgXHJcbiAgICAgIFxyXG4gICAgICBcclxuICAgIH1cclxuXHJcblxyXG4gICAgaGFuZGxlSXRlbVRvdWNoKGV2ZW50LG1lbnVJdGVtLGluZGV4KXtcclxuXHJcbiAgICAgIFxyXG4gICAgICAvL21lbnVJdGVtLnByb3BzLnN0eWxlPXsnYmFja2dyb3VuZENvbG9yJzoncmdiKDU0LDY0LDc2KSd9O1xyXG5cclxuICAgIH1cclxuXHJcblxyXG4gICAgcmVuZGVyKCl7XHJcblxyXG4gICAgICByZXR1cm4gKFxyXG5cclxuICAgICAgICAgIDxQYXBlciBzdHlsZT17c3R5bGUucGFwZXJ9PlxyXG4gICAgICAgICAgICA8TWVudSBvbkNoYW5nZT17dGhpcy5oYW5kbGVOYXZpZ2F0b3IuYmluZCh0aGlzKX0gb25JdGVtVG91Y2hUYXA9e3RoaXMuaGFuZGxlSXRlbVRvdWNoLmJpbmQodGhpcyl9PlxyXG4gICAgICAgICAgICAgIDxNZW51SXRlbSB2YWx1ZT17J0hvbWUnfSBwcmltYXJ5VGV4dD1cIlByZXZpZXdcIiAgbGVmdEljb249ezxSZW1vdmVSZWRFeWUgLz59ICAvPlxyXG4gICAgICAgICAgICAgIDxNZW51SXRlbSB2YWx1ZT17J0NvbmZpZyd9IHByaW1hcnlUZXh0PVwiU2hhcmVcIiBsZWZ0SWNvbj17PFBlcnNvbkFkZCAvPn0gIC8+XHJcbiAgICAgICAgICAgICAgPE1lbnVJdGVtIHZhbHVlPXszfSBwcmltYXJ5VGV4dD1cIkdldCBsaW5rc1wiIGxlZnRJY29uPXs8Q29udGVudExpbmsgLz59ICAvPlxyXG4gICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgIDxNZW51SXRlbSB2YWx1ZT17NH0gcHJpbWFyeVRleHQ9XCJNYWtlIGEgY29weVwiIGxlZnRJY29uPXs8Q29udGVudENvcHkgLz59ICAvPlxyXG4gICAgICAgICAgICAgIDxNZW51SXRlbSB2YWx1ZT17NX0gcHJpbWFyeVRleHQ9XCJEb3dubG9hZFwiIGxlZnRJY29uPXs8RG93bmxvYWQgLz59ICAvPlxyXG4gICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgIDxNZW51SXRlbSB2YWx1ZT17Nn0gcHJpbWFyeVRleHQ9XCJSZW1vdmVcIiBsZWZ0SWNvbj17PERlbGV0ZSAvPn0gIC8+XHJcbiAgICAgICAgICAgIDwvTWVudT5cclxuICAgICAgICAgIDwvUGFwZXI+XHJcblxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgXHJcbiAgXHJcbn1cclxuXHJcblxyXG5MZWZ0TmF2LmNvbnRleHRUeXBlcyA9IHtcclxuICByb3V0ZXI6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZFxyXG5cclxufVxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IG1ha2VTZWxlY3RhYmxlKExlZnROYXYpO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9jb21tb24vTGVmdE5hdi5qcyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3B1cmUgPSByZXF1aXJlKCdyZWNvbXBvc2UvcHVyZScpO1xuXG52YXIgX3B1cmUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHVyZSk7XG5cbnZhciBfU3ZnSWNvbiA9IHJlcXVpcmUoJy4uLy4uL1N2Z0ljb24nKTtcblxudmFyIF9TdmdJY29uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1N2Z0ljb24pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgSW1hZ2VSZW1vdmVSZWRFeWUgPSBmdW5jdGlvbiBJbWFnZVJlbW92ZVJlZEV5ZShwcm9wcykge1xuICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgX1N2Z0ljb24yLmRlZmF1bHQsXG4gICAgcHJvcHMsXG4gICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ3BhdGgnLCB7IGQ6ICdNMTIgNC41QzcgNC41IDIuNzMgNy42MSAxIDEyYzEuNzMgNC4zOSA2IDcuNSAxMSA3LjVzOS4yNy0zLjExIDExLTcuNWMtMS43My00LjM5LTYtNy41LTExLTcuNXpNMTIgMTdjLTIuNzYgMC01LTIuMjQtNS01czIuMjQtNSA1LTUgNSAyLjI0IDUgNS0yLjI0IDUtNSA1em0wLThjLTEuNjYgMC0zIDEuMzQtMyAzczEuMzQgMyAzIDMgMy0xLjM0IDMtMy0xLjM0LTMtMy0zeicgfSlcbiAgKTtcbn07XG5JbWFnZVJlbW92ZVJlZEV5ZSA9ICgwLCBfcHVyZTIuZGVmYXVsdCkoSW1hZ2VSZW1vdmVSZWRFeWUpO1xuSW1hZ2VSZW1vdmVSZWRFeWUuZGlzcGxheU5hbWUgPSAnSW1hZ2VSZW1vdmVSZWRFeWUnO1xuSW1hZ2VSZW1vdmVSZWRFeWUubXVpTmFtZSA9ICdTdmdJY29uJztcblxuZXhwb3J0cy5kZWZhdWx0ID0gSW1hZ2VSZW1vdmVSZWRFeWU7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L21hdGVyaWFsLXVpL3N2Zy1pY29ucy9pbWFnZS9yZW1vdmUtcmVkLWV5ZS5qc1xuLy8gbW9kdWxlIGlkID0gNjMzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3B1cmUgPSByZXF1aXJlKCdyZWNvbXBvc2UvcHVyZScpO1xuXG52YXIgX3B1cmUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHVyZSk7XG5cbnZhciBfU3ZnSWNvbiA9IHJlcXVpcmUoJy4uLy4uL1N2Z0ljb24nKTtcblxudmFyIF9TdmdJY29uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1N2Z0ljb24pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgU29jaWFsUGVyc29uQWRkID0gZnVuY3Rpb24gU29jaWFsUGVyc29uQWRkKHByb3BzKSB7XG4gIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICBfU3ZnSWNvbjIuZGVmYXVsdCxcbiAgICBwcm9wcyxcbiAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgncGF0aCcsIHsgZDogJ00xNSAxMmMyLjIxIDAgNC0xLjc5IDQtNHMtMS43OS00LTQtNC00IDEuNzktNCA0IDEuNzkgNCA0IDR6bS05LTJWN0g0djNIMXYyaDN2M2gydi0zaDN2LTJINnptOSA0Yy0yLjY3IDAtOCAxLjM0LTggNHYyaDE2di0yYzAtMi42Ni01LjMzLTQtOC00eicgfSlcbiAgKTtcbn07XG5Tb2NpYWxQZXJzb25BZGQgPSAoMCwgX3B1cmUyLmRlZmF1bHQpKFNvY2lhbFBlcnNvbkFkZCk7XG5Tb2NpYWxQZXJzb25BZGQuZGlzcGxheU5hbWUgPSAnU29jaWFsUGVyc29uQWRkJztcblNvY2lhbFBlcnNvbkFkZC5tdWlOYW1lID0gJ1N2Z0ljb24nO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBTb2NpYWxQZXJzb25BZGQ7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L21hdGVyaWFsLXVpL3N2Zy1pY29ucy9zb2NpYWwvcGVyc29uLWFkZC5qc1xuLy8gbW9kdWxlIGlkID0gNjM0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3B1cmUgPSByZXF1aXJlKCdyZWNvbXBvc2UvcHVyZScpO1xuXG52YXIgX3B1cmUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHVyZSk7XG5cbnZhciBfU3ZnSWNvbiA9IHJlcXVpcmUoJy4uLy4uL1N2Z0ljb24nKTtcblxudmFyIF9TdmdJY29uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1N2Z0ljb24pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgQ29udGVudExpbmsgPSBmdW5jdGlvbiBDb250ZW50TGluayhwcm9wcykge1xuICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgX1N2Z0ljb24yLmRlZmF1bHQsXG4gICAgcHJvcHMsXG4gICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ3BhdGgnLCB7IGQ6ICdNMy45IDEyYzAtMS43MSAxLjM5LTMuMSAzLjEtMy4xaDRWN0g3Yy0yLjc2IDAtNSAyLjI0LTUgNXMyLjI0IDUgNSA1aDR2LTEuOUg3Yy0xLjcxIDAtMy4xLTEuMzktMy4xLTMuMXpNOCAxM2g4di0ySDh2MnptOS02aC00djEuOWg0YzEuNzEgMCAzLjEgMS4zOSAzLjEgMy4xcy0xLjM5IDMuMS0zLjEgMy4xaC00VjE3aDRjMi43NiAwIDUtMi4yNCA1LTVzLTIuMjQtNS01LTV6JyB9KVxuICApO1xufTtcbkNvbnRlbnRMaW5rID0gKDAsIF9wdXJlMi5kZWZhdWx0KShDb250ZW50TGluayk7XG5Db250ZW50TGluay5kaXNwbGF5TmFtZSA9ICdDb250ZW50TGluayc7XG5Db250ZW50TGluay5tdWlOYW1lID0gJ1N2Z0ljb24nO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBDb250ZW50TGluaztcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vbWF0ZXJpYWwtdWkvc3ZnLWljb25zL2NvbnRlbnQvbGluay5qc1xuLy8gbW9kdWxlIGlkID0gNjM1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3B1cmUgPSByZXF1aXJlKCdyZWNvbXBvc2UvcHVyZScpO1xuXG52YXIgX3B1cmUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHVyZSk7XG5cbnZhciBfU3ZnSWNvbiA9IHJlcXVpcmUoJy4uLy4uL1N2Z0ljb24nKTtcblxudmFyIF9TdmdJY29uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1N2Z0ljb24pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgQ29udGVudENvbnRlbnRDb3B5ID0gZnVuY3Rpb24gQ29udGVudENvbnRlbnRDb3B5KHByb3BzKSB7XG4gIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICBfU3ZnSWNvbjIuZGVmYXVsdCxcbiAgICBwcm9wcyxcbiAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgncGF0aCcsIHsgZDogJ00xNiAxSDRjLTEuMSAwLTIgLjktMiAydjE0aDJWM2gxMlYxem0zIDRIOGMtMS4xIDAtMiAuOS0yIDJ2MTRjMCAxLjEuOSAyIDIgMmgxMWMxLjEgMCAyLS45IDItMlY3YzAtMS4xLS45LTItMi0yem0wIDE2SDhWN2gxMXYxNHonIH0pXG4gICk7XG59O1xuQ29udGVudENvbnRlbnRDb3B5ID0gKDAsIF9wdXJlMi5kZWZhdWx0KShDb250ZW50Q29udGVudENvcHkpO1xuQ29udGVudENvbnRlbnRDb3B5LmRpc3BsYXlOYW1lID0gJ0NvbnRlbnRDb250ZW50Q29weSc7XG5Db250ZW50Q29udGVudENvcHkubXVpTmFtZSA9ICdTdmdJY29uJztcblxuZXhwb3J0cy5kZWZhdWx0ID0gQ29udGVudENvbnRlbnRDb3B5O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9tYXRlcmlhbC11aS9zdmctaWNvbnMvY29udGVudC9jb250ZW50LWNvcHkuanNcbi8vIG1vZHVsZSBpZCA9IDYzNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wdXJlID0gcmVxdWlyZSgncmVjb21wb3NlL3B1cmUnKTtcblxudmFyIF9wdXJlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3B1cmUpO1xuXG52YXIgX1N2Z0ljb24gPSByZXF1aXJlKCcuLi8uLi9TdmdJY29uJyk7XG5cbnZhciBfU3ZnSWNvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TdmdJY29uKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIEFjdGlvbkRlbGV0ZSA9IGZ1bmN0aW9uIEFjdGlvbkRlbGV0ZShwcm9wcykge1xuICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgX1N2Z0ljb24yLmRlZmF1bHQsXG4gICAgcHJvcHMsXG4gICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ3BhdGgnLCB7IGQ6ICdNNiAxOWMwIDEuMS45IDIgMiAyaDhjMS4xIDAgMi0uOSAyLTJWN0g2djEyek0xOSA0aC0zLjVsLTEtMWgtNWwtMSAxSDV2MmgxNFY0eicgfSlcbiAgKTtcbn07XG5BY3Rpb25EZWxldGUgPSAoMCwgX3B1cmUyLmRlZmF1bHQpKEFjdGlvbkRlbGV0ZSk7XG5BY3Rpb25EZWxldGUuZGlzcGxheU5hbWUgPSAnQWN0aW9uRGVsZXRlJztcbkFjdGlvbkRlbGV0ZS5tdWlOYW1lID0gJ1N2Z0ljb24nO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBBY3Rpb25EZWxldGU7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L21hdGVyaWFsLXVpL3N2Zy1pY29ucy9hY3Rpb24vZGVsZXRlLmpzXG4vLyBtb2R1bGUgaWQgPSA2Mzdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiaW1wb3J0IFJlYWN0LCB7Q29tcG9uZW50LCBQcm9wVHlwZXN9IGZyb20gJ3JlYWN0JztcclxuXHJcbmltcG9ydCB7TGlzdCwgTGlzdEl0ZW0sIG1ha2VTZWxlY3RhYmxlfSBmcm9tICdtYXRlcmlhbC11aS9MaXN0JztcclxuaW1wb3J0IEF2YXRhciBmcm9tICdtYXRlcmlhbC11aS9BdmF0YXInO1xyXG5pbXBvcnQgU3ViaGVhZGVyIGZyb20gJ21hdGVyaWFsLXVpL1N1YmhlYWRlcic7XHJcbmltcG9ydCBDb250ZW50Q29weSBmcm9tICdtYXRlcmlhbC11aS9zdmctaWNvbnMvY29udGVudC9jb250ZW50LWNvcHknO1xyXG5pbXBvcnQgRG93bmxvYWQgZnJvbSAnbWF0ZXJpYWwtdWkvc3ZnLWljb25zL2ZpbGUvZmlsZS1kb3dubG9hZCc7XHJcbmltcG9ydCBEZWxldGUgZnJvbSAnbWF0ZXJpYWwtdWkvc3ZnLWljb25zL2FjdGlvbi9kZWxldGUnO1xyXG5pbXBvcnQgRm9udEljb24gZnJvbSAnbWF0ZXJpYWwtdWkvRm9udEljb24nO1xyXG5pbXBvcnQgUmVtb3ZlUmVkRXllIGZyb20gJ21hdGVyaWFsLXVpL3N2Zy1pY29ucy9pbWFnZS9yZW1vdmUtcmVkLWV5ZSc7XHJcbmltcG9ydCBQZXJzb25BZGQgZnJvbSAnbWF0ZXJpYWwtdWkvc3ZnLWljb25zL3NvY2lhbC9wZXJzb24tYWRkJztcclxuaW1wb3J0IENvbnRlbnRMaW5rIGZyb20gJ21hdGVyaWFsLXVpL3N2Zy1pY29ucy9jb250ZW50L2xpbmsnO1xyXG5cclxuXHJcblxyXG5jb25zdCBpdGVtU3R5bGUgPXsnY29sb3InOidyZ2IoMTE3LCAxMTcsIDExNyknfVxyXG5cclxuXHJcblxyXG5sZXQgU2VsZWN0YWJsZUxpc3QgPSBtYWtlU2VsZWN0YWJsZShMaXN0KTtcclxuXHJcbmZ1bmN0aW9uIHdyYXBTdGF0ZShDb21wb3NlZENvbXBvbmVudCkge1xyXG4gIHJldHVybiBjbGFzcyBTZWxlY3RhYmxlTGlzdCBleHRlbmRzIENvbXBvbmVudCB7XHJcblxyXG5cclxuICAgIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgc2VsZWN0ZWRJbmRleDogdGhpcy5wcm9wcy5kZWZhdWx0VmFsdWUsXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGhhbmRsZVJlcXVlc3RDaGFuZ2UoZXZlbnQsIGluZGV4KXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgc2VsZWN0ZWRJbmRleDogaW5kZXgsXHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgXHJcbiAgICAgIC8vJChldmVudC50YXJnZXQpLmNzcyh7J2NvbG9yJzoncmVkJ30pO1xyXG4gICAgICB0aGlzLmNvbnRleHQucm91dGVyLnB1c2goaW5kZXgpO1xyXG4gICAgfTtcclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgIHJldHVybiAoXHJcbiAgICAgICAgPENvbXBvc2VkQ29tcG9uZW50XHJcbiAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5zZWxlY3RlZEluZGV4fVxyXG4gICAgICAgICAgb25DaGFuZ2U9e3RoaXMuaGFuZGxlUmVxdWVzdENoYW5nZS5iaW5kKHRoaXMpfVxyXG4gICAgICAgID5cclxuICAgICAgICAgIHt0aGlzLnByb3BzLmNoaWxkcmVufVxyXG4gICAgICAgIDwvQ29tcG9zZWRDb21wb25lbnQ+XHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgfTtcclxufVxyXG5cclxuU2VsZWN0YWJsZUxpc3QgPSB3cmFwU3RhdGUoU2VsZWN0YWJsZUxpc3QpO1xyXG5cclxuU2VsZWN0YWJsZUxpc3QuY29udGV4dFR5cGVzID0ge1xyXG4gIHJvdXRlcjogUmVhY3QuUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkXHJcbn1cclxuXHJcbmNsYXNzIExpc3RFeGFtcGxlU2VsZWN0YWJsZSBleHRlbmRzIENvbXBvbmVudCB7XHJcblxyXG4gICAgcmVuZGVyKCl7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPFNlbGVjdGFibGVMaXN0IGRlZmF1bHRWYWx1ZT17J0hvbWUnfSA+XHJcbiAgICAgICAgICAgICAgICA8U3ViaGVhZGVyPiAgPC9TdWJoZWFkZXI+XHJcblxyXG4gICAgICAgICAgICAgICAgPExpc3RJdGVtXHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU9eydIb21lJ31cclxuICAgICAgICAgICAgICAgICAgICBwcmltYXJ5VGV4dD1cIldpZGdldOmFjee9rumhtemdolwiXHJcbiAgICAgICAgICAgICAgICAgICAgbGVmdEljb249ezxSZW1vdmVSZWRFeWUgLz59XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9e2l0ZW1TdHlsZX1cclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICA8TGlzdEl0ZW1cclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZT17J0NvbmZpZyd9XHJcbiAgICAgICAgICAgICAgICAgICAgcHJpbWFyeVRleHQ9XCLoh6rlrprkuYnooajljZXpobXpnaJcIlxyXG4gICAgICAgICAgICAgICAgICAgIGxlZnRJY29uPXs8UGVyc29uQWRkIC8+fVxyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlPXtpdGVtU3R5bGV9XHJcbiAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgPExpc3RJdGVtXHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU9ezR9XHJcbiAgICAgICAgICAgICAgICAgICAgcHJpbWFyeVRleHQ9XCJOb3RoaW5nXCJcclxuICAgICAgICAgICAgICAgICAgICBsZWZ0SWNvbj17PENvbnRlbnRMaW5rIC8+fVxyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlPXtpdGVtU3R5bGV9XHJcbiAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgPExpc3RJdGVtXHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU9ezV9XHJcbiAgICAgICAgICAgICAgICAgICAgcHJpbWFyeVRleHQ9XCJOb3RoaW5nXCJcclxuICAgICAgICAgICAgICAgICAgICBsZWZ0SWNvbj17PENvbnRlbnRDb3B5IC8+fVxyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlPXtpdGVtU3R5bGV9XHJcbiAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICA8L1NlbGVjdGFibGVMaXN0PlxyXG5cclxuICAgICAgICApO1xyXG4gICAgfVxyXG59O1xyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IExpc3RFeGFtcGxlU2VsZWN0YWJsZTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvY29tbW9uL1NlbGVjdGFibGVMaXN0LmpzIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihjYikge1xuXHRyZXF1aXJlLmVuc3VyZShbXSwgZnVuY3Rpb24ocmVxdWlyZSkge1xuXHRcdGNiKHJlcXVpcmUoXCIhIS4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/cHJlc2V0c1tdPWVzMjAxNSZwcmVzZXRzW109cmVhY3QhLi9Ib21lLmpzXCIpKTtcblx0fSwgXCJIb21lXCIpO1xufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9yb3V0ZXMvSG9tZS9jb21wb25lbnRzL0hvbWUuanMiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGNiKSB7XG5cdHJlcXVpcmUuZW5zdXJlKFtdLCBmdW5jdGlvbihyZXF1aXJlKSB7XG5cdFx0Y2IocmVxdWlyZShcIiEhLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz9wcmVzZXRzW109ZXMyMDE1JnByZXNldHNbXT1yZWFjdCEuL0NvbmZpZy5qc1wiKSk7XG5cdH0sIFwiQ29uZmlnXCIpO1xufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9yb3V0ZXMvQ29uZmlnL2NvbXBvbmVudHMvQ29uZmlnLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==